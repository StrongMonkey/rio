/*
Copyright 2019 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/rancher/rio/pkg/apis/admin.rio.cattle.io/v1"
	clientset "github.com/rancher/rio/pkg/generated/clientset/versioned/typed/admin.rio.cattle.io/v1"
	informers "github.com/rancher/rio/pkg/generated/informers/externalversions/admin.rio.cattle.io/v1"
	listers "github.com/rancher/rio/pkg/generated/listers/admin.rio.cattle.io/v1"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type SystemStackHandler func(string, *v1.SystemStack) (*v1.SystemStack, error)

type SystemStackController interface {
	generic.ControllerMeta
	SystemStackClient

	OnChange(ctx context.Context, name string, sync SystemStackHandler)
	OnRemove(ctx context.Context, name string, sync SystemStackHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() SystemStackCache
}

type SystemStackClient interface {
	Create(*v1.SystemStack) (*v1.SystemStack, error)
	Update(*v1.SystemStack) (*v1.SystemStack, error)

	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1.SystemStack, error)
	List(opts metav1.ListOptions) (*v1.SystemStackList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.SystemStack, err error)
}

type SystemStackCache interface {
	Get(name string) (*v1.SystemStack, error)
	List(selector labels.Selector) ([]*v1.SystemStack, error)

	AddIndexer(indexName string, indexer SystemStackIndexer)
	GetByIndex(indexName, key string) ([]*v1.SystemStack, error)
}

type SystemStackIndexer func(obj *v1.SystemStack) ([]string, error)

type systemStackController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.SystemStacksGetter
	informer          informers.SystemStackInformer
	gvk               schema.GroupVersionKind
}

func NewSystemStackController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.SystemStacksGetter, informer informers.SystemStackInformer) SystemStackController {
	return &systemStackController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromSystemStackHandlerToHandler(sync SystemStackHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.SystemStack
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.SystemStack))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *systemStackController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.SystemStack))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateSystemStackDeepCopyOnChange(client SystemStackClient, obj *v1.SystemStack, handler func(obj *v1.SystemStack) (*v1.SystemStack, error)) (*v1.SystemStack, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *systemStackController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *systemStackController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *systemStackController) OnChange(ctx context.Context, name string, sync SystemStackHandler) {
	c.AddGenericHandler(ctx, name, FromSystemStackHandlerToHandler(sync))
}

func (c *systemStackController) OnRemove(ctx context.Context, name string, sync SystemStackHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromSystemStackHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *systemStackController) Enqueue(name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), "", name)
}

func (c *systemStackController) EnqueueAfter(name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), "", name, duration)
}

func (c *systemStackController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *systemStackController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *systemStackController) Cache() SystemStackCache {
	return &systemStackCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *systemStackController) Create(obj *v1.SystemStack) (*v1.SystemStack, error) {
	return c.clientGetter.SystemStacks().Create(obj)
}

func (c *systemStackController) Update(obj *v1.SystemStack) (*v1.SystemStack, error) {
	return c.clientGetter.SystemStacks().Update(obj)
}

func (c *systemStackController) Delete(name string, options *metav1.DeleteOptions) error {
	return c.clientGetter.SystemStacks().Delete(name, options)
}

func (c *systemStackController) Get(name string, options metav1.GetOptions) (*v1.SystemStack, error) {
	return c.clientGetter.SystemStacks().Get(name, options)
}

func (c *systemStackController) List(opts metav1.ListOptions) (*v1.SystemStackList, error) {
	return c.clientGetter.SystemStacks().List(opts)
}

func (c *systemStackController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.SystemStacks().Watch(opts)
}

func (c *systemStackController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.SystemStack, err error) {
	return c.clientGetter.SystemStacks().Patch(name, pt, data, subresources...)
}

type systemStackCache struct {
	lister  listers.SystemStackLister
	indexer cache.Indexer
}

func (c *systemStackCache) Get(name string) (*v1.SystemStack, error) {
	return c.lister.Get(name)
}

func (c *systemStackCache) List(selector labels.Selector) ([]*v1.SystemStack, error) {
	return c.lister.List(selector)
}

func (c *systemStackCache) AddIndexer(indexName string, indexer SystemStackIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.SystemStack))
		},
	}))
}

func (c *systemStackCache) GetByIndex(indexName, key string) (result []*v1.SystemStack, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	for _, obj := range objs {
		result = append(result, obj.(*v1.SystemStack))
	}
	return result, nil
}
