// Code generated by go-bindata.
// sources:
// stacks/coredns-stack.yml
// stacks/istio-crd-stack.yml
// stacks/istio-gw-stack.yml
// stacks/istio-stack.yml
// DO NOT EDIT!

package stacks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stacksCorednsStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\xf6\x01\x2c\x4a\x82\x3e\x7f\x75\x79\x6c\xea\x43\x2e\x39\xb4\x45\xaf\x06\x43\xae\x2d\xc2\xfc\xc3\x2e\x95\xc6\x68\xfb\xee\x05\x4d\xcb\x50\xe3\x46\x17\x2d\x77\x86\xcb\xc5\xcc\xe8\x18\x0e\xf6\xc8\x72\x05\x50\xca\xf2\xbf\x54\x19\x43\x96\xf0\xab\xb9\x9c\x01\x84\xdc\x0c\xf0\xf3\x7a\x28\x1f\x12\x45\xe2\x45\x63\x44\xe5\xf2\xb8\x68\x9c\xa6\x67\xa4\x80\x19\x19\xb4\x9b\x38\x23\x09\x17\xb5\x72\x60\x43\xa3\x8c\x21\xa1\x28\x29\xb0\xe9\xff\x5a\x2c\x87\x97\x2f\x45\xc3\x60\x03\xa3\x9e\x08\xdf\x60\x53\xe2\x4c\xa8\xfc\x9b\xf6\x41\x39\x97\x47\x8a\xd3\x71\xfc\xf7\x23\x0b\xfe\xef\x45\x9d\x28\x7a\xcc\x23\x4e\x0c\xf2\x63\xbf\x19\xfe\x86\x5e\xcf\x20\xa0\xc5\xac\x5b\x42\x8e\xee\x45\x14\x9d\x16\x14\xad\xf4\x88\x30\x74\xab\x79\x30\x23\xbd\x58\x8d\x57\x4d\x09\x4d\xe0\x2a\x6b\x29\x60\x8c\x9c\xab\xc8\x2a\xed\x95\x31\x12\x9e\x76\xdf\xf6\x9f\x1e\x9f\x3e\xef\xbf\xee\xbe\x7c\x7f\x7c\xd8\xdd\x50\x43\x31\x49\x50\xce\x5d\x4d\xf1\x5e\x05\x53\x47\x35\xd0\xdc\xd6\x68\xea\x76\xd7\xa7\xda\x87\x48\x78\xb0\x0e\x67\x27\x67\x7b\x0b\xf1\x62\xf1\xfb\x6c\x7c\x4d\x91\x71\x26\xf7\x9d\xf8\x6f\x10\x9d\xe8\x3b\xb9\x19\xe4\x66\x68\x27\x93\xd6\x26\xf0\x3b\x70\x81\x9a\xac\xd3\x15\x2e\x42\xae\x3d\x66\xb2\xba\xde\x38\xba\xf8\xac\xdc\x3e\x21\x79\xcb\x6c\x63\xb8\x6d\xe5\x2c\xe7\xf5\x0f\x95\xf5\x08\x18\x4c\x8a\x36\x64\xbe\x87\x66\x59\xef\x91\x12\x95\xfb\x6e\x50\x1e\x39\xa9\xf9\x46\xcd\xa7\x1e\x51\x9f\x24\x8c\x39\x27\xd9\xb6\x97\x3c\x16\x43\xe4\xb6\xdb\x76\xed\x22\xc2\xd6\xab\x23\x4a\x38\x6d\x59\x1c\x35\x09\x1b\x67\xc1\x64\x2f\x7a\x51\x13\xe2\xd1\x47\x3a\x4b\xf8\xd0\xd5\x20\x12\x2a\xb3\x8f\xc1\x9d\x25\x64\x9a\xaa\xa2\xac\x95\x43\x09\xfd\xea\x4f\x00\x00\x00\xff\xff\xd5\x57\x8c\x0c\x68\x03\x00\x00")

func stacksCorednsStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCorednsStackYml,
		"stacks/coredns-stack.yml",
	)
}

func stacksCorednsStackYml() (*asset, error) {
	bytes, err := stacksCorednsStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/coredns-stack.yml", size: 872, mode: os.FileMode(436), modTime: time.Unix(1533317908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioCrdStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\x41\x4b\xc3\x40\x10\x05\xe0\x7b\x7e\xc5\x42\xce\x46\xaa\x37\x6f\x8a\x45\xbd\xc5\xb6\x78\x0d\xe3\xe6\x35\x1d\x9a\xce\x84\xdd\xd9\x96\xfe\x7b\x71\x5b\x14\x2d\x24\x3d\xbf\xef\x0d\xcb\xdb\x6d\xfa\x44\x10\x18\xe2\x43\xe1\x9c\xd0\x0e\x71\x20\x8f\xb6\xf1\x29\x9a\xee\x9a\x80\xa8\x29\x78\x34\x2d\xd6\x2c\x6c\xac\x92\x65\xe9\xbc\xca\x9a\xbb\xc2\xb9\x1b\xf7\x8c\x68\x2c\xf4\x1d\xd6\xda\xb3\x3f\x56\xa7\xb0\xe2\x68\xac\x15\xeb\xed\x7e\x46\xfd\xb0\xa1\xbb\xcc\xe7\x5d\x40\x8c\x8b\xd4\x63\xdc\x2d\x34\x19\xa6\xd9\xeb\x6a\x55\x3f\xd6\x6f\xcb\x01\xfe\x89\xa5\x65\xe9\xae\xf6\xe3\xf0\x3d\xa9\xd1\xd5\x67\x7f\xf4\x18\x2b\x9d\xc0\x0e\x1a\xb6\x2c\xa7\xe9\x3e\x38\x58\xa2\x7e\x89\xb0\x67\x8f\xea\x37\xbd\xa8\xdf\xff\x9f\x3a\x2f\x33\x59\x38\x5f\x9e\x8b\x85\xe3\xb4\x7e\x21\xc3\x81\x26\x61\xe9\x28\xd9\x06\x62\xec\xf3\x53\x72\xf7\xfc\xf5\x7f\x93\x8b\xfa\xac\xf8\x0a\x00\x00\xff\xff\xbd\xa2\x21\x22\x73\x02\x00\x00")

func stacksIstioCrdStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioCrdStackYml,
		"stacks/istio-crd-stack.yml",
	)
}

func stacksIstioCrdStackYml() (*asset, error) {
	bytes, err := stacksIstioCrdStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-crd-stack.yml", size: 627, mode: os.FileMode(436), modTime: time.Unix(1537832765, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioGwStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xd1\x4f\xdb\x30\x10\xc6\xdf\xf9\x2b\xac\x0c\x89\x6d\xc2\xa4\x45\x43\x93\x22\xed\x21\x82\x3e\xf0\x40\x1b\xd1\xee\x39\x32\xf6\xd1\x9e\x70\xec\xe8\xee\x12\xe8\xa6\xfd\xef\x53\x43\xe8\x92\x0d\xe8\xde\xe2\xfb\x7e\xdf\xe7\xf3\xd9\x61\xa0\x16\x2d\x70\x76\xa4\x14\xb2\x60\xd4\x6b\x23\xf0\x68\xb6\xbb\x82\x52\xde\xdc\x81\xe7\xe7\x6f\xa5\x92\x5e\x4b\x32\x95\xc0\x93\x00\x05\xe3\x93\x4e\x5b\xfb\x78\x67\x7c\x59\x03\x55\xc8\x8c\x31\xf4\x1e\xad\x92\x35\xc8\xe9\xa3\x11\xbb\x39\xf5\xc8\x72\xda\xd4\xce\x08\xa8\x9d\x3d\x74\x60\x2a\x1b\x24\x57\x1b\x92\x2d\x01\xc7\x86\x2c\x70\xf2\xbe\xf9\x73\xda\x22\x49\x63\xfc\x4b\xf7\x07\x79\x07\x2c\x18\x8c\x60\x0c\xd4\xf8\xff\x30\xf4\x27\xed\xc1\xe7\x72\x19\xc9\x01\x65\x8a\x25\xd6\xfa\x1e\x89\xa5\x13\x19\x1d\x3c\xa0\x7d\xd8\x8f\xe9\x79\x8e\x35\xc5\xa7\xed\x4b\x49\xa9\x3a\x92\x70\xa6\x8e\x7f\x16\x8b\xdb\xd5\xf2\xd7\xbe\x8e\x95\x59\x43\xa6\x92\xce\x94\x76\xa6\xf6\x3c\x9b\x9e\x4d\xce\xce\x93\x3d\x64\x63\x55\x99\xe0\xfe\xa4\x69\xd5\x91\x83\x35\xc5\x46\x80\x06\x05\xdd\x0e\x16\xc9\x20\x4c\x2b\xad\x1d\xb2\x8d\x2d\xd0\xf6\x16\xee\x09\x78\x73\x05\xde\x0c\xd3\x4e\xa6\x7c\xa2\x3e\x1c\xa2\xb4\x76\x64\x30\x5c\x35\xd4\x4d\x76\xe8\xff\x72\xd1\x05\xbc\x21\x6b\x5d\x1b\x82\x20\xcb\x4d\x23\x2e\x3e\xbe\x9a\x30\xad\x26\xbb\x88\x83\xa0\xd6\x36\x86\x00\x56\x56\x58\x41\x6c\x64\x94\xd1\x45\xbc\xa9\x6b\xdd\x3f\xa0\x4b\xdf\xf0\x78\x7a\x83\x3b\x1c\x19\x7e\x60\xfd\x80\x21\x77\x8e\x80\x79\x38\xe0\xf1\x7c\x59\x8c\xb0\xfb\xee\xea\x83\x64\xb7\x45\xee\x2a\x0c\x45\xa4\x61\x73\xc9\xf4\x62\x32\x99\x24\x7f\x9f\x54\x28\xfa\xc2\x9b\x00\x79\x23\x9b\x22\x7a\xb4\xc3\x06\xe7\x8b\xf9\xec\xf5\x8b\xfe\xb7\x91\xfe\x88\xe8\xa3\x64\xbb\xbd\xbe\xee\x35\x08\xed\xf0\xa9\x15\x8b\xab\x72\x9e\xdf\xcc\xbe\x1d\x7f\x64\xf0\xf7\x69\x30\x15\x7c\x7a\x45\x5f\x16\xf9\xe5\x08\xe2\xda\xd8\x11\x79\x3d\x5f\xae\xf2\xf9\xe5\xac\xbc\x2e\x5e\x38\xac\x47\xc0\x72\x75\xbd\x28\x6f\x66\xab\xbc\x7c\x7f\x57\x06\x4b\xb0\xfb\xa1\xd0\x41\x10\x94\x6d\x96\x82\xd8\xd4\x02\x09\x1f\xfd\x0e\x00\x00\xff\xff\x7b\x1f\x8e\xc3\xd5\x04\x00\x00")

func stacksIstioGwStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioGwStackYml,
		"stacks/istio-gw-stack.yml",
	)
}

func stacksIstioGwStackYml() (*asset, error) {
	bytes, err := stacksIstioGwStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-gw-stack.yml", size: 1237, mode: os.FileMode(436), modTime: time.Unix(1537807125, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x10\xc6\x02\xdb\x5d\x44\x96\x93\x6d\xda\xac\x00\x1f\x0c\xc7\x41\x02\x64\x6d\x37\x71\x51\xf4\x64\xd0\xe4\x58\x22\x42\x91\x04\x39\x72\x22\xb4\xfd\xef\x05\x25\xda\xa2\x12\xa7\x5d\x14\xe8\x25\x09\xe7\xbd\x19\x72\xbe\x9e\xc2\xb4\xda\x89\xdc\x65\x03\x42\x4a\x70\x85\xff\x4d\x08\xd3\x0a\x41\x61\x46\xfe\x4c\x9a\x33\x21\x5c\x38\xba\x95\xb0\xd2\x52\xb0\x7a\x56\x00\x7b\x72\x19\x41\x5b\x41\xc0\x85\xca\x2d\x38\x37\xd3\x0a\xad\x96\x12\xec\x37\xcd\x21\x23\xc3\xe5\xcd\xcd\x30\x50\x68\x85\x45\xeb\x9f\x91\xc5\x72\x31\x0f\x66\xcb\xdd\x03\xec\x2c\xb8\xe2\x1a\x24\xad\x33\x72\x3e\x76\x01\xd2\x15\x6e\x75\xa5\xf8\xda\xd2\xdd\x4e\xb0\xe0\x1c\x40\x42\xca\xe6\x8a\xe9\xfd\xfd\xf2\xb7\xcd\x74\xf1\xfb\xe1\xa5\xb0\xa3\x95\xc4\x59\x93\x57\x47\xe6\xc2\x31\xbd\x07\x5b\xbf\x77\x59\x93\xb5\x02\x86\x6b\x51\x82\xae\x30\x23\x5f\xfa\xd8\x4e\xe4\x2b\x8a\x45\x46\x86\x29\x20\x4b\x85\x43\xa1\x53\x63\xf5\x4b\x3d\x3c\xd2\xb6\x42\x51\x5b\x1f\x68\x95\xb3\xa9\xd4\x8c\xca\x74\x2b\x54\x0a\x6a\xaf\x23\xaa\x03\xbb\x17\x0c\x66\xb2\x72\x08\x36\x23\x4d\xbc\xa4\x89\xd7\x3d\xda\x52\xa1\xae\x2b\x4b\x51\x68\x95\x91\x1f\x2f\xbb\x07\x19\x6a\x41\xe1\x63\x51\x21\xd7\xcf\x11\xe7\xbc\x8c\x5e\x2d\x14\x82\x65\x60\x3c\xd4\x36\xe4\x61\x7e\x7d\xf7\x30\x9f\xad\xbb\x38\xfe\xc2\x29\x2f\x85\x5a\x69\x8b\x19\x39\xbf\x1c\x8f\xc7\x71\xda\xbe\x9f\x2b\x49\x15\x4c\x4f\xf7\x2f\x2a\xed\x94\x73\x3f\x04\xc7\x5c\x84\xd4\x38\xfa\xf0\xc7\x62\xfa\x6d\xfe\xb8\x9a\xce\xe6\x7f\x65\x3e\xfa\xcf\x83\x41\xc8\xbd\x99\xba\x88\xdb\x76\x4b\xd2\x2d\x48\x77\xe8\x5c\x03\x67\xa4\xc1\x1b\x53\x2e\xf5\x96\xca\x8d\x01\x5b\x0a\xe7\x84\x56\x81\x9a\x90\x8f\x9f\x43\x9b\x46\x8d\xd3\x48\xe8\xf4\xf3\xc7\x0e\x53\x80\xcf\xda\x3e\x09\xf5\x0e\xee\xe7\x13\x14\x0a\xd6\x54\xf2\x1d\x8e\x11\xf0\x82\xa0\x9a\x7b\x47\x4f\x57\xce\x13\x58\xe5\x50\x97\x16\x9c\xae\x2c\x03\x0e\x3b\xa1\x84\x0f\xe1\x22\xc7\xce\x2b\xc5\x42\x58\x6e\xa8\xc5\xfa\xe0\xf2\xfd\xc4\x51\x07\x9f\xf6\x09\x7b\xf8\x5e\xc8\x23\x9c\x3a\xa4\x58\x1d\x59\x76\x4b\x59\x94\x71\xb0\x32\x0b\x14\xe1\x2c\x07\x3c\x93\xc2\xe1\xd9\x33\x45\x56\x9c\x55\x86\x53\x84\x50\xea\x92\x1a\x17\xd8\xa0\xb8\xd1\x42\xe1\xe1\x6c\x34\x3f\xfc\x79\xe8\x77\x38\x2a\x5a\x82\x33\x34\x32\x68\x0e\x1d\x97\x59\x08\x41\x9c\xe0\xf0\x24\xbc\xd6\x0c\x5e\x8d\x5a\x16\x8d\x68\x59\x52\xc5\xb3\x0e\x23\x49\x22\x75\xbe\xd1\x15\x9a\x0a\x37\x12\xf6\x20\x27\x1c\xb6\x55\x4e\x92\xc4\x82\xab\x15\x9b\x5c\x14\xaf\x36\xdb\x75\x01\x93\x56\x08\xa3\x25\x6f\x29\xa9\x37\x1f\x59\xa0\xf6\xc2\x6a\x55\x7a\x99\x8c\x5c\x57\xcb\xeb\x8d\x9f\xf7\xc9\x87\x1f\x1c\xc8\x5d\xea\x53\xfd\x74\x02\x6f\xf6\x21\x26\x35\xf5\xe8\x31\xef\xee\x97\xeb\xcd\xfa\xf6\x61\xb9\x5e\xdf\xcf\x27\x97\xd1\x56\x1e\xc0\xd9\x74\x76\x3b\xdf\x3c\xfe\xf2\xeb\xf4\xf1\x76\x72\xd9\x6d\x7d\x49\x73\x08\x4b\x98\xb6\x8b\x75\x3e\x1a\x8f\x2e\x22\xe9\x69\x4a\x9c\x11\xc1\xfd\xc0\x63\xdd\x26\xcb\xc0\xa2\x8b\xd7\xae\x55\xa3\x2e\x3d\x78\x31\xda\x41\x9c\x6e\xb3\xcf\x69\x81\x68\xfa\xc6\xf3\x71\x9a\x5b\xc3\x22\xe3\xd7\xf1\xd7\x2f\x0d\xf1\xcc\xff\x48\x4a\xad\x04\x6a\x2b\x54\xfe\xce\xb3\xfd\xcd\xfb\x8b\x6c\x3c\xba\x1a\x8d\xdf\xf4\x3a\x8a\xdb\x17\xcc\x84\x24\x49\x5f\x58\x23\x28\x52\x9a\x9e\x03\x42\x69\x24\x45\xb8\x11\x12\x22\xe0\xb5\xca\xb7\x02\xbe\x69\x55\xad\xa6\xa5\x1c\x61\x69\x64\x2f\xd2\x69\xb9\x8c\x28\x3d\xdd\xfc\xdf\x47\xe8\x6e\xf1\xb8\x9e\x2e\x66\xf3\xcd\xdd\xea\xc0\x13\xe6\xd3\xf7\x8d\xc1\x51\x99\x99\x40\xca\x41\xb6\x2f\x0c\x3d\x1a\x86\xbd\x08\x50\x33\x5d\xc3\xc1\x9b\x0e\xf9\x92\x50\x63\x40\xf1\x84\x2b\x97\x34\x6f\x9c\x1c\xff\x69\xf0\xa8\x1f\x92\xc4\x68\x8b\x93\xab\xf1\x4f\xe3\xbe\xb9\xd0\x0e\xbd\xcb\x24\x5c\x33\xe8\x1a\x2c\x77\x89\x13\xb9\x02\x9e\x30\xda\x0f\x18\xb8\x89\x43\x6d\x69\x0e\xc9\xb1\x2e\x13\x2b\x74\xe2\x6a\x87\x50\xfe\xcb\x67\xe4\xd9\x0a\x84\x9e\x0c\x1d\x05\x8c\x32\xa6\x2b\xf5\xda\xda\x1e\x4f\x44\xf2\xc2\xc9\x41\x02\x02\xe1\x60\xa4\xae\x7d\xab\xdd\x5b\xf0\x74\xf4\xb7\x84\x13\xc8\xe9\xb8\x8d\x5a\xb7\x3a\x7d\x20\x46\x1f\x81\xff\xe2\x63\xc1\x48\xc1\xa8\x3b\x2a\xf3\x3f\xcd\xce\xdf\x01\x00\x00\xff\xff\x15\x95\xde\x00\x54\x0a\x00\x00")

func stacksIstioStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioStackYml,
		"stacks/istio-stack.yml",
	)
}

func stacksIstioStackYml() (*asset, error) {
	bytes, err := stacksIstioStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-stack.yml", size: 2644, mode: os.FileMode(436), modTime: time.Unix(1537895031, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stacks/coredns-stack.yml":   stacksCorednsStackYml,
	"stacks/istio-crd-stack.yml": stacksIstioCrdStackYml,
	"stacks/istio-gw-stack.yml":  stacksIstioGwStackYml,
	"stacks/istio-stack.yml":     stacksIstioStackYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stacks": &bintree{nil, map[string]*bintree{
		"coredns-stack.yml":   &bintree{stacksCorednsStackYml, map[string]*bintree{}},
		"istio-crd-stack.yml": &bintree{stacksIstioCrdStackYml, map[string]*bintree{}},
		"istio-gw-stack.yml":  &bintree{stacksIstioGwStackYml, map[string]*bintree{}},
		"istio-stack.yml":     &bintree{stacksIstioStackYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
