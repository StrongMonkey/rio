// Code generated by go-bindata.
// sources:
// stacks/cert-manager-stack.yaml
// stacks/coredns-stack.yaml
// stacks/istio-crd-stack.yaml
// stacks/istio-stack.yaml
// stacks/istio-telemetry-stack.yaml
// stacks/localstorage-stack.yaml
// stacks/nfs-stack.yaml
// stacks/rio-autoscaler-stack.yaml
// DO NOT EDIT!

package stacks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stacksCertManagerStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x6b\xdb\x40\x10\xc5\xef\xfa\x14\x83\x5b\x08\x04\xd6\x21\xb7\xa2\x9b\x31\x26\xe4\x90\x36\x84\xde\xc5\x7a\xf5\xac\x2c\xd9\x3f\xea\xcc\xac\x5b\x53\xfa\xdd\x8b\x25\x39\x56\x69\xc0\x3e\xee\x9b\xdf\xcc\xee\x9b\xb7\x02\xde\x7b\x07\xa9\x2b\x22\x07\x56\x13\x6d\xb2\x1d\xf8\x78\x26\xea\x42\xde\xda\xd0\xf4\xe0\xe8\x45\x7c\x4e\x32\xea\x86\x6e\x6e\x07\x7c\xa2\x97\x6f\x5f\x64\xe9\xf3\xdd\xed\xcd\xb9\x8c\x5f\x8a\x34\xf4\xdc\xf9\xd4\x31\x44\x20\xb3\xb2\xcb\x69\xe7\xbb\x68\xfb\xb9\x28\x70\x0c\x9d\x2b\xd8\x23\xe9\xbf\xc8\xf8\xe0\x99\xd4\xe7\x76\x3a\xfa\x68\x3b\xd4\xf4\xf9\xf7\x7a\xf3\xf2\xbd\x79\x5a\x7d\x5d\x3d\x6c\x5e\x9a\xc7\xa7\xd5\xc3\xe6\xcf\x19\x78\x2e\x21\x3c\xe7\xe0\xdd\xa1\xa6\x55\xf8\x69\x0f\x32\xd4\x5c\x8e\xd1\xa6\xf6\xe4\x70\xbe\x8d\x49\x32\x26\xc0\xb6\x60\x83\x00\xa7\x3e\x27\x93\x6c\x84\xf4\xd6\x61\x22\xd8\x67\x23\x07\x51\xc4\xf7\x16\x17\x8a\x28\xd8\x30\x24\x17\x76\xb8\xa6\x27\xe4\x4e\xb3\x68\x0b\x3e\x5d\xbd\x50\x2e\x58\x54\xd5\x5b\xd9\x82\x13\x74\x4c\xec\x7d\x54\xdb\xb8\x22\x9a\x63\x73\xba\xa5\x69\xb1\xf3\xc9\xeb\x29\xb3\x4f\x83\x1f\x3a\xfb\x31\xf4\x28\x52\xc0\xcb\x0f\x62\xdc\xdf\xdb\xd0\xbf\xda\xfb\x01\x5b\xbf\xda\x10\x90\x3a\x5c\x24\xbf\x71\x7b\xcd\x3c\xb0\xfa\x9d\x77\x56\x2f\x4d\xbc\x60\xc9\xd0\x7a\x5c\xed\x15\x46\xaa\x1f\x05\x32\x75\x1a\xda\x5b\xf6\x76\x1b\x50\xd3\xff\xff\xa4\x22\x6a\x21\x8e\x7d\x7f\xc4\x6b\x5a\xcc\xf7\x36\xfe\x1f\xd2\x4c\x45\x8e\x69\xfc\x0d\x00\x00\xff\xff\x22\x78\xed\xc4\x3e\x03\x00\x00")

func stacksCertManagerStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCertManagerStackYaml,
		"stacks/cert-manager-stack.yaml",
	)
}

func stacksCertManagerStackYaml() (*asset, error) {
	bytes, err := stacksCertManagerStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/cert-manager-stack.yaml", size: 830, mode: os.FileMode(420), modTime: time.Unix(1545254090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksCorednsStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\xf6\x01\x2c\x4a\x82\x3e\x7f\x75\x79\x6c\xea\x43\x2e\x39\xb4\x45\xaf\x06\x43\xae\x2d\xc2\xfc\xc3\x2e\x95\xc6\x68\xfb\xee\x05\x4d\xcb\x50\xe3\x46\x17\x2d\x77\x86\xcb\xc5\xcc\xe8\x18\x0e\xf6\xc8\x72\x05\x50\xca\xf2\xbf\x54\x19\x43\x96\xf0\xab\xb9\x9c\x01\x84\xdc\x0c\xf0\xf3\x7a\x28\x1f\x12\x45\xe2\x45\x63\x44\xe5\xf2\xb8\x68\x9c\xa6\x67\xa4\x80\x19\x19\xb4\x9b\x38\x23\x09\x17\xb5\x72\x60\x43\xa3\x8c\x21\xa1\x28\x29\xb0\xe9\xff\x5a\x2c\x87\x97\x2f\x45\xc3\x60\x03\xa3\x9e\x08\xdf\x60\x53\xe2\x4c\xa8\xfc\x9b\xf6\x41\x39\x97\x47\x8a\xd3\x71\xfc\xf7\x23\x0b\xfe\xef\x45\x9d\x28\x7a\xcc\x23\x4e\x0c\xf2\x63\xbf\x19\xfe\x86\x5e\xcf\x20\xa0\xc5\xac\x5b\x42\x8e\xee\x45\x14\x9d\x16\x14\xad\xf4\x88\x30\x74\xab\x79\x30\x23\xbd\x58\x8d\x57\x4d\x09\x4d\xe0\x2a\x6b\x29\x60\x8c\x9c\xab\xc8\x2a\xed\x95\x31\x12\x9e\x76\xdf\xf6\x9f\x1e\x9f\x3e\xef\xbf\xee\xbe\x7c\x7f\x7c\xd8\xdd\x50\x43\x31\x49\x50\xce\x5d\x4d\xf1\x5e\x05\x53\x47\x35\xd0\xdc\xd6\x68\xea\x76\xd7\xa7\xda\x87\x48\x78\xb0\x0e\x67\x27\x67\x7b\x0b\xf1\x62\xf1\xfb\x6c\x7c\x4d\x91\x71\x26\xf7\x9d\xf8\x6f\x10\x9d\xe8\x3b\xb9\x19\xe4\x66\x68\x27\x93\xd6\x26\xf0\x3b\x70\x81\x9a\xac\xd3\x15\x2e\x42\xae\x3d\x66\xb2\xba\xde\x38\xba\xf8\xac\xdc\x3e\x21\x79\xcb\x6c\x63\xb8\x6d\xe5\x2c\xe7\xf5\x0f\x95\xf5\x08\x18\x4c\x8a\x36\x64\xbe\x87\x66\x59\xef\x91\x12\x95\xfb\x6e\x50\x1e\x39\xa9\xf9\x46\xcd\xa7\x1e\x51\x9f\x24\x8c\x39\x27\xd9\xb6\x97\x3c\x16\x43\xe4\xb6\xdb\x76\xed\x22\xc2\xd6\xab\x23\x4a\x38\x6d\x59\x1c\x35\x09\x1b\x67\xc1\x64\x2f\x7a\x51\x13\xe2\xd1\x47\x3a\x4b\xf8\xd0\xd5\x20\x12\x2a\xb3\x8f\xc1\x9d\x25\x64\x9a\xaa\xa2\xac\x95\x43\x09\xfd\xea\x4f\x00\x00\x00\xff\xff\xd5\x57\x8c\x0c\x68\x03\x00\x00")

func stacksCorednsStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCorednsStackYaml,
		"stacks/coredns-stack.yaml",
	)
}

func stacksCorednsStackYaml() (*asset, error) {
	bytes, err := stacksCorednsStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/coredns-stack.yaml", size: 872, mode: os.FileMode(420), modTime: time.Unix(1545254090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioCrdStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\x41\x4b\xc3\x40\x10\x05\xe0\x7b\x7e\xc5\x42\xce\x46\xaa\x37\x6f\x8a\x45\xbd\xc5\xb6\x78\x0d\xe3\xe6\x35\x1d\x9a\xce\x84\xdd\xd9\x96\xfe\x7b\x71\x5b\x14\x2d\x24\x3d\xbf\xef\x0d\xcb\xdb\x6d\xfa\x44\x10\x18\xe2\x43\xe1\x9c\xd0\x0e\x71\x20\x8f\xb6\xf1\x29\x9a\xee\x9a\x80\xa8\x29\x78\x34\x2d\xd6\x2c\x6c\xac\x92\x65\xe9\xbc\xca\x9a\xbb\xc2\xb9\x1b\xf7\x8c\x68\x2c\xf4\x1d\xd6\xda\xb3\x3f\x56\xa7\xb0\xe2\x68\xac\x15\xeb\xed\x7e\x46\xfd\xb0\xa1\xbb\xcc\xe7\x5d\x40\x8c\x8b\xd4\x63\xdc\x2d\x34\x19\xa6\xd9\xeb\x6a\x55\x3f\xd6\x6f\xcb\x01\xfe\x89\xa5\x65\xe9\xae\xf6\xe3\xf0\x3d\xa9\xd1\xd5\x67\x7f\xf4\x18\x2b\x9d\xc0\x0e\x1a\xb6\x2c\xa7\xe9\x3e\x38\x58\xa2\x7e\x89\xb0\x67\x8f\xea\x37\xbd\xa8\xdf\xff\x9f\x3a\x2f\x33\x59\x38\x5f\x9e\x8b\x85\xe3\xb4\x7e\x21\xc3\x81\x26\x61\xe9\x28\xd9\x06\x62\xec\xf3\x53\x72\xf7\xfc\xf5\x7f\x93\x8b\xfa\xac\xf8\x0a\x00\x00\xff\xff\xbd\xa2\x21\x22\x73\x02\x00\x00")

func stacksIstioCrdStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioCrdStackYaml,
		"stacks/istio-crd-stack.yaml",
	)
}

func stacksIstioCrdStackYaml() (*asset, error) {
	bytes, err := stacksIstioCrdStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-crd-stack.yaml", size: 627, mode: os.FileMode(420), modTime: time.Unix(1545254090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x51\x6f\xdb\x38\x12\x7e\xf7\xaf\x20\x74\x05\x72\x2d\x42\xcb\x69\x9b\xbb\x56\x80\x1f\x0c\xc7\x45\x03\x24\xb1\x2f\x76\x71\xe8\x93\x41\x8b\x63\x9b\x08\x45\x6a\xc9\x91\x53\x6f\xb7\xff\x7d\x41\x4a\xb2\xa8\x44\xae\xb3\xbb\x58\xec\x4b\x1b\xf1\xfb\x66\x38\xc3\xe1\x7c\x1c\xa7\x5a\xad\xc5\xc6\x26\x3d\x42\x32\xb0\x5b\xf7\x3f\x21\xa9\x56\x08\x0a\x13\xf2\x1b\xf5\xdf\x84\x70\x61\xd9\x4a\xc2\x4c\x4b\x91\xee\xc7\x5b\x48\x1f\x6c\x42\xd0\x14\x50\xe1\x42\x6d\x0c\x58\x3b\xd6\x0a\x8d\x96\x12\xcc\xad\xe6\x90\x90\x68\xfa\xe9\x53\x54\x51\x58\x81\xdb\xd2\x3e\x21\x77\xd3\xbb\x49\xb5\x6c\xb8\xbd\x87\xb5\x01\xbb\xbd\x02\xc9\xf6\x09\xb9\x18\xd8\x0a\xd2\x05\xae\x74\xa1\xf8\xc2\xb0\xf5\x5a\xa4\x95\x71\x05\x12\x92\xf9\x2d\x46\x37\x37\xd3\xff\x2f\x47\x77\x5f\xeb\x48\x61\xcd\x0a\x89\x63\x9f\x57\x43\xe6\xc2\xa6\x7a\x07\x66\x7f\x6c\x33\x9f\xb5\x82\x14\x17\x22\x03\x5d\x60\x42\xde\xb5\xb1\xb5\xd8\xcc\x18\x6e\x13\x12\xc5\x80\x69\x2c\x2c\x0a\x1d\xe7\x46\x7f\xdb\x47\x07\xda\x4a\x28\x66\xf6\x35\xad\xb0\x26\x96\x3a\x65\x32\x5e\x09\x15\x83\xda\xe9\x80\x6a\xc1\xec\x44\x0a\x63\x59\x58\x04\x93\x10\xef\x8f\x7a\x7f\x4d\xd0\x86\x09\x75\x55\x18\x86\x42\xab\x84\xbc\xbf\x6c\x02\xca\x99\x01\x85\xf3\x6d\x81\x5c\x3f\x06\x9c\x8b\x2c\x88\x5a\x28\x04\x93\x42\xee\xa0\xb2\x20\xf7\x93\xab\xeb\xfb\xc9\x78\xd1\xf8\x71\x1b\x8e\x78\x26\xd4\x4c\x1b\x4c\xc8\xc5\xe5\x60\x30\x08\xd3\x76\xf5\x9c\x49\xa6\x60\xd4\x5d\xbf\xe0\x68\x47\x9c\xbb\x4b\x70\xc8\x45\x48\x8d\xfd\x57\xdf\xef\x46\xb7\x93\xf9\x6c\x34\x9e\xfc\x48\x9c\xf7\xff\xf6\x7a\x55\xee\xfe\xd6\x05\xdc\xb2\x5a\x92\xad\x40\xda\xba\x72\x1e\x4e\x88\xc7\xfd\xd2\x46\xea\x15\x93\xcb\x1c\x4c\x26\xac\x15\x5a\x55\x54\x4a\xce\xde\x54\x65\xea\x7b\xa3\xbe\xd0\xf1\x9b\xb3\x06\x53\x80\x8f\xda\x3c\x08\x75\x04\x77\xf7\x13\x14\x8a\xd4\x9f\xe4\x11\x4e\x2e\xe0\x1b\x82\xf2\xfb\xf6\x1f\x3e\x58\x47\x48\x0b\x8b\x3a\x33\x60\x75\x61\x52\xe0\xb0\x16\x4a\x38\x17\x36\x30\x6c\xac\x62\xdc\x0a\xc3\x73\x66\x70\x5f\x9b\xbc\x9c\xd8\x6f\xe0\x6e\x9b\xaa\x0f\x8f\xb9\x3c\xc0\xb1\x45\x86\xc5\x81\x65\x56\x2c\x0d\x32\xae\x56\x53\x03\x0c\xe1\x7c\x03\x78\x2e\x85\xc5\xf3\x47\x86\xe9\xf6\xbc\xc8\x39\x43\xa8\x8e\x3a\x63\xb9\xad\xd8\xa0\x78\xae\x85\xc2\xfa\x3b\xd7\xbc\xfe\xb3\xae\x77\xf5\xa9\x58\x06\x36\x67\xc1\x82\xe6\xd0\x70\x53\x03\x95\x13\x2b\x38\x3c\x08\xa7\x35\xbd\x27\x57\x2d\x09\xae\x68\x96\x31\xc5\x93\x06\x23\x94\x4a\xbd\x59\xea\x02\xf3\x02\x97\x12\x76\x20\x87\x1c\x56\xc5\x86\x50\x6a\xc0\xee\x55\x3a\x7c\xbb\x7d\xd2\xd9\xb6\x71\x48\x4b\x21\x0c\x9a\xbc\xa4\xc4\x6e\xf9\xc0\x02\xb5\x13\x46\xab\xcc\xc9\x64\x60\x3a\x9b\x5e\x2d\xdd\x7d\x1f\xbe\xfa\xb7\x05\xb9\x8e\x5d\xaa\xaf\x3b\x70\xdf\x0f\x21\xc9\x9f\x47\x8b\x79\x7d\x33\x5d\x2c\x17\x9f\xef\xa7\x8b\xc5\xcd\x64\x78\x19\x74\x65\x0d\x8e\x47\xe3\xcf\x93\xe5\xfc\x7f\x5f\x46\xf3\xcf\xc3\xcb\xa6\xeb\x33\xb6\x81\xaa\x09\xe3\xb2\xb1\x2e\xfa\x83\xfe\x65\x20\x3d\xfe\x88\x13\x22\xb8\xbb\xf0\xb8\x2f\x93\x4d\xc1\xa0\x0d\xdb\xae\x54\xa3\x26\x3d\xf8\x96\x6b\x0b\x61\xba\xbe\x9f\xe3\x2d\x62\xde\x5e\xbc\x18\xc4\x1b\x93\xa7\xc1\xe2\xc7\xc1\xc7\x77\x9e\x78\xee\xfe\xa1\x99\x56\x02\xb5\x11\x6a\x73\x24\x6c\xb7\xf3\xee\xed\x93\xc0\xeb\x5a\x07\x7e\xdb\x82\x49\x09\xa5\x6d\x61\x0d\xa0\x40\x69\x5a\x06\x08\x59\x2e\x19\xc2\x27\x21\x21\x00\x9e\xaa\x7c\x29\xe0\xcb\x52\xd5\xf6\x2c\x93\x7d\xcc\x72\xd9\xf2\xd4\x2d\x97\x01\xa5\xa5\x9b\x7f\xfb\x15\xba\xbe\x9b\x2f\x46\x77\xe3\xc9\xf2\x7a\x56\xf3\x44\xfe\xfa\x65\xd7\xe0\xa0\xcc\xa9\x40\xc6\x41\x96\x11\xb6\x6a\x54\x23\x4d\x8d\x5a\xf5\x71\x07\xc2\xf2\x1c\x14\xa7\x5c\x59\xea\x23\x1c\x1e\x46\x06\x87\xba\x2b\x42\x73\x6d\x70\xf8\x61\xf0\x9f\x41\x7b\x79\xab\x2d\x3a\x93\x61\xb5\x4b\xaf\x29\xaf\x5c\x53\x2b\x36\x0a\x38\x4d\x59\xdb\x61\xc5\xa5\x16\xb5\x61\x1b\xa0\x87\x53\x19\x1a\xa1\xa9\xdd\x5b\x84\xec\xc4\x23\xf2\x68\x04\x42\x4b\x84\x0e\xf2\xc5\xd2\x54\x17\xea\xe9\x6a\xf9\xd9\xe1\xc9\xc9\x26\x07\x09\x08\x84\x43\x2e\xf5\xde\x15\xda\x3e\x07\xbb\xbd\x3f\x27\x74\x20\xdd\x7e\xbd\x56\x97\x2a\x5d\x13\x83\x27\xe0\xcf\xd8\x18\xc8\xa5\x48\x99\x3d\xe8\xf2\x8b\x6e\xce\x86\x21\x3c\xb2\x7d\xd7\xab\x1e\x55\x58\x94\x90\xc8\xed\x63\x14\x93\xd1\x89\xca\x44\x2e\xce\xf2\x09\x0a\xa2\x3d\xf1\x60\x46\x3f\x37\x7e\x13\xef\x84\xc1\x82\xc9\xfa\x8c\x4f\xf2\x39\x58\x14\xca\x8f\x08\xa6\x90\x2f\x30\xa8\x32\xad\x88\xe5\xf2\x52\x1b\xee\x66\x3e\x8b\x3a\xa7\x6b\x61\x2c\x76\x3f\x77\x9d\x2a\xec\x1a\xc6\x26\xe4\xd5\xf7\xd9\xf4\x7e\x31\xff\xf1\x54\x3f\xa3\x0e\x01\x8d\xfe\x88\x82\x1a\x5d\xb4\x75\x93\xee\x82\x8f\xe8\x6d\xd4\x92\xbc\xce\xb9\x3a\x60\x9c\x5d\xd8\x33\xf2\xaf\x53\x2c\x4a\x5b\xa3\x6e\x68\xff\xfe\xd2\x3b\x38\x02\x53\xda\x3d\x08\xb7\x22\xc8\x06\xce\xc5\x49\xa2\xd7\xef\xe0\x17\x40\xcb\x87\x77\x71\x14\x3f\xfd\xea\x3c\x7b\xa6\x7e\x15\xf9\x83\x50\xd5\xc8\x1c\x1e\x70\xfb\x7c\xdd\x9c\x66\xf9\x17\x9e\x9f\x64\xb6\x27\xf9\x90\xe7\x67\xfa\xe8\x2f\xbc\x54\xad\x42\x3f\x0f\x24\x1c\xe1\xcb\x09\xbf\xc6\x40\xed\xfe\x91\xa7\x8d\x92\xeb\xf9\xe2\x7a\xba\xbc\x9d\x2c\x46\xcb\x9f\xef\x5a\x6b\x59\x98\xcf\xd1\xb1\xc8\xf7\x87\x7b\x14\xdd\x5a\x38\x22\x56\x83\x75\xd5\xec\xb4\x52\xc2\xde\x2f\x85\x93\x0b\x2f\x62\x94\xec\x98\x11\xee\x47\x74\x42\x16\x93\x9b\xc9\xed\x64\x71\xff\xb5\xc9\xb6\xe7\x7e\xb9\xda\xd4\x88\xbc\xfc\x1d\x57\xb6\x31\x45\x90\x90\x01\x9a\x7d\x33\x34\x47\xbd\x5e\xef\xf7\x00\x00\x00\xff\xff\x87\x46\xea\xd6\xb6\x0f\x00\x00")

func stacksIstioStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioStackYaml,
		"stacks/istio-stack.yaml",
	)
}

func stacksIstioStackYaml() (*asset, error) {
	bytes, err := stacksIstioStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-stack.yaml", size: 4022, mode: os.FileMode(420), modTime: time.Unix(1547079565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioTelemetryStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xff\x6f\xd3\xc8\x12\xff\x3d\x7f\xc5\x08\x9e\xd4\x14\x70\xd2\x82\x78\x52\xfd\x14\xa1\x40\x0b\x54\x82\x36\x6a\xcb\x93\x4e\x1c\xb7\x1a\x7b\x27\xc9\xc2\x7a\x77\x6f\x77\x1d\x1a\x29\x7f\xfc\x69\xd7\x8e\xed\x34\x6e\xe1\x90\xee\x7e\x8a\x33\xdf\xe7\x33\x5f\x76\x72\xad\xe6\x62\xe1\xd2\x01\x80\xb1\xba\x20\xbf\xa4\xd2\x25\x15\x35\x10\x01\x72\xad\x3c\x29\x9f\x02\x6c\x92\x48\x00\x58\x48\x9d\xa1\x4c\xeb\x7f\x00\x2e\xb7\x68\x88\x09\xe5\xc9\xae\x50\xa6\xf0\xd2\x0d\x76\x38\x8d\x97\x9a\xfc\x18\xae\x23\x03\x2a\x06\xcc\xb5\x05\x52\x2b\xbd\x06\xe7\xd1\x6f\x95\x13\xf8\xaa\x33\xa6\xb0\xa0\x14\x0e\x22\x3b\x89\xec\x83\xc6\x71\x41\xde\x8a\xdc\x31\x83\x7e\x99\xc2\x38\x72\xc7\x6d\x1e\x8d\xdc\xb7\x32\x23\xab\xc8\x93\x63\x8e\xb3\x4e\xce\x5b\x47\x56\x4b\x4a\xc1\x68\x3e\x68\x88\x96\x24\x66\x24\xfb\xa4\x9d\x2e\x6d\x4e\x2c\xf2\x5d\x0a\x9f\x19\x2b\xc8\x23\xeb\x78\x31\x3a\xba\xf1\x28\x14\x59\x66\xb4\xf5\x31\x8f\x2f\x8d\x11\x00\xcc\xbd\xd0\x2a\x85\x6f\x44\xa6\x43\xb6\xb4\xa0\xdb\x14\x0e\x46\x4f\x92\x2a\xe5\x90\xce\xc1\x83\xce\x91\x73\x4b\xce\x31\xf6\x0c\xfa\x23\x41\xa5\xb4\xc7\xe0\x8e\xb5\xe0\x30\xa1\x63\x60\x7d\x31\x59\x32\x12\x73\xda\x0f\x6b\xf8\xf9\x8f\xf4\xcb\xd3\xc3\xe1\xab\x34\xfd\x9d\x3f\x3d\x7c\xf5\xbf\x61\xf8\xd9\x91\x8b\x9a\x45\xec\x98\xff\x1c\xa7\xc7\x2f\x8f\x4e\x8e\x3a\x7c\x8f\x76\x41\xbe\x8a\x3e\x85\x4e\xec\x9d\x0c\xb7\x51\x44\xa1\x02\x7b\xd0\xe9\x4f\xb3\xaa\xd7\x70\xd4\x09\xe8\x67\x6a\x15\x0a\xe3\x0c\xe6\xbd\xd5\xd9\x47\x62\x37\x83\x46\xf9\x6f\xb7\xc7\x7d\xfd\xf0\x23\x8f\x5b\xdd\xc1\x9d\x29\x60\xf7\x36\xec\x63\x38\xbb\xcd\x65\xc9\x09\x9c\x2e\x08\xf4\x1c\xfc\x92\xea\x79\xab\x27\x08\xfc\x12\x3d\x2c\x71\x45\x50\xa0\x73\x62\x45\x90\xa3\xe5\x42\xa1\x14\x7e\xdd\xb1\x74\xb3\x14\x0e\xa4\x70\x1e\x0a\x5c\x83\x22\xe2\xe0\x35\x64\x04\xc6\x96\x8a\x38\xcc\x4b\xeb\x97\x64\xa1\xd0\x2b\xa1\xe2\x60\x7f\x47\xcb\x9f\x01\x3a\x10\x6a\xae\x6d\x41\xbc\x63\x2d\x5b\x83\x21\x1b\xc8\xa8\x72\x02\x54\x1c\x5c\x8e\x12\x33\x11\xdc\x82\x27\xe7\x85\x5a\x8c\x1e\xc0\x16\x72\x59\x3a\x4f\x36\x42\x02\x5f\x7a\x06\x69\xa8\x4b\x9f\xe9\x52\xf1\x8d\x50\xd5\x6f\x67\x06\xe2\xc6\x38\x1c\x3d\x39\xe8\x29\x04\xb7\xda\x3c\xe4\xd9\xe7\x86\x19\x4b\x73\x71\xfb\xef\xfa\x0d\xe8\x53\x58\x2b\xf5\xec\xf4\x7b\x1f\x3d\x3d\xfc\x15\xe3\x2c\x02\xc9\x58\xaf\xd1\xd8\x32\xcc\x4b\xf7\x6b\x81\xff\x8c\xed\xdc\x30\xae\xbf\x2b\xe7\x2d\x61\xf1\x8f\xb9\x59\x7a\x6f\xd8\x30\x16\x61\x83\xbc\x10\xea\x17\x4b\xf1\x13\xae\xb6\xfd\x39\x94\xd9\xc6\x92\xb7\xeb\x4d\x26\x62\x4f\x78\xb2\x0a\xe5\xa6\xc0\xdb\x8d\xb6\x62\x11\x46\xed\xa1\x28\x06\x00\x0b\x8b\x73\x54\x98\x70\x74\xcb\x4c\xa3\xe5\xc6\xea\x95\xe0\x64\xdd\x9d\x97\x7a\x53\x1b\x41\x23\xfe\x4f\xd6\x45\x23\xc7\x35\xed\x8e\x4e\x48\x8b\x0b\x87\x99\xa4\x53\x92\x54\x39\x9c\xa3\x74\xed\x02\x9a\x6b\xc9\xc9\xa6\x20\x9c\x17\xba\xa1\x56\xcf\xf2\x2e\x4d\x9b\xa0\xdf\xd9\x3c\x00\xf5\xcb\xbc\x42\x3b\x96\x22\x1b\xd7\x29\x8c\x9b\x14\xdc\xf8\x8e\x09\xbb\x38\xe7\x6d\xb4\x00\x7e\x6d\x28\x85\xb9\x90\xb4\x83\x80\xc7\xaa\x18\xf7\xa5\xde\x9f\x3c\xc0\x9e\x26\xd4\x4f\x4e\x4e\xce\xa5\x01\x9d\xdb\x75\x27\x7c\xe2\xc2\x07\x6c\x52\xf0\xb6\xec\xee\x64\xe1\x4e\x69\x8e\xa5\xf4\x7b\x9c\xaf\x4e\xab\x53\xf4\xd8\x45\x01\xc0\x8b\x82\xce\xf7\xef\xa3\x16\xc9\xd9\xfe\xd5\xd2\x83\xc6\x16\x8f\x9e\x1b\x07\xa0\xb4\x32\x85\xd0\xda\xe9\xb8\x73\x04\xa5\x27\xe1\x05\x1e\x38\xb2\x2b\x51\x67\xdd\x61\x46\xf5\xea\x9e\x63\x86\x6c\x21\x9c\xeb\x96\x30\x01\xa5\x39\xb5\x07\xd9\xd6\x4a\x43\x20\xc5\x8d\x16\xaa\x73\xb3\x19\xcd\xdd\xae\xf6\xb8\x8b\x6a\x52\xdf\x7c\x05\x9a\x56\x6c\x41\x3e\x44\x3f\x19\xd7\xcf\x51\x64\x88\x02\x17\x75\xaa\xdd\x74\x56\xcf\x47\x2f\x46\xc7\xad\xc4\xac\x94\x72\xa6\xa5\xc8\xd7\x29\x9c\xcf\x2f\xb4\x9f\x59\x72\xa4\x7c\x94\xa0\x5b\xa3\x1d\x55\xd9\x24\x10\x90\x18\x07\x80\xb6\x3d\xd3\xbe\x93\x49\xcf\xf9\x3b\x26\x9f\x77\x3c\x77\x3e\x47\xeb\x42\xd6\x36\x8a\x02\x15\xdf\xda\x48\x12\xe7\xb5\xc5\x05\x8d\xbc\xe3\xd9\xc8\x52\x68\x4a\xa1\xd5\xe4\xbf\xcb\x46\xa2\x32\x3e\x0a\x1d\x3d\xf9\xa1\x87\xba\xe1\x2b\xfb\xa4\x56\xc2\x6a\x15\x6f\xab\xda\xdc\xbb\xab\xe9\xdb\xe9\xc5\x94\xcd\x2e\xaf\x6e\x26\x2f\x8e\x8e\x8e\xb6\xf4\xb7\x6c\xfa\xe9\xe6\x3d\x7b\x3d\xbd\x3e\x7f\xc3\xce\x2e\xa6\xaf\x3f\x9c\x9d\x4e\xda\xb9\x6e\x25\xa6\x17\x97\x17\xbf\x7d\xbc\xfc\x74\xdd\x48\x35\xfd\xdc\x27\x74\x79\xf5\x8e\x5d\x5d\x7e\x38\x9b\xc4\xb5\xd9\x8a\xcd\xa6\x37\xef\xaf\xd9\xe9\xf4\x66\x3a\x19\x87\x19\xdb\x4e\x7a\xb7\x92\x1c\x85\x5b\xa2\x3a\x3e\x39\x79\xbe\x65\xa7\x12\xc3\x23\xdf\x5f\x4d\x94\xdf\x71\xed\x7a\xea\x18\x12\xbd\xb7\x8e\x0f\x6c\xc9\x08\xf7\x76\x05\x45\x72\x68\x76\xa1\x16\xdd\x7d\xb4\xaf\x37\x5a\x63\x5d\xee\xa4\x77\x03\x3d\x64\xb6\x91\xea\x7e\xb7\x06\x57\x5a\x96\x05\x35\xb1\x07\x99\x74\x17\xbf\xc1\xe0\xcf\x32\x9c\x41\x71\x28\x13\x58\xa1\x15\xd5\x42\xfa\xf0\x9a\x5d\x4c\x3f\x9e\x5d\xcf\xa6\x6f\xce\x06\x00\x9c\x5c\x6e\x85\xa9\x16\xf8\xa3\xb8\x54\x13\xb7\x76\x9e\x8a\xf6\x46\x7d\x34\xf8\x2b\x00\x00\xff\xff\x46\x03\x81\x85\xef\x0d\x00\x00")

func stacksIstioTelemetryStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioTelemetryStackYaml,
		"stacks/istio-telemetry-stack.yaml",
	)
}

func stacksIstioTelemetryStackYaml() (*asset, error) {
	bytes, err := stacksIstioTelemetryStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-telemetry-stack.yaml", size: 3567, mode: os.FileMode(420), modTime: time.Unix(1547069859, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksLocalstorageStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x51\x8b\xd3\x40\x10\x7e\xcf\xaf\x18\x82\x70\x2a\x97\xe6\xf4\x49\x16\x7c\xa8\xd7\x16\x85\xbb\xb6\xd8\x53\x1f\x44\xc2\x34\x99\xb6\xeb\x6d\x66\xc3\xee\x24\x20\xea\x7f\x97\xdd\xa4\x69\x7b\x70\x3e\x25\x33\xdf\x37\xbb\xb3\xdf\x37\xf3\xd8\x6e\xc9\x31\x09\x79\x95\x00\xd4\xc8\x7a\x47\x5e\x14\xfc\xc9\x12\x00\x00\x6c\xf4\x57\x72\x5e\x5b\x56\xe0\xc5\x3a\xdc\xd3\xe4\xf1\x9d\x9f\x68\x9b\x77\x6f\x22\xe3\x51\x73\xa5\x60\xd3\x63\xb7\x06\xbd\x8f\xe9\x9a\x04\x2b\x14\x54\x31\x02\x60\xac\x49\x81\xb1\x25\x9a\x21\x83\xcc\x56\x50\xb4\x65\x7f\x24\xc1\xf1\x8e\x32\x9c\x33\x39\xf5\x16\xee\xd3\x3e\xab\x68\x87\xad\x91\x2c\xc2\x0a\x52\x71\x2d\xa5\xb1\xb6\x71\xb6\xd3\xa1\x4d\x72\x0a\x1c\x72\x79\x20\x17\x8a\xe2\x85\x59\x83\x72\x88\xb4\xce\x9a\xb6\xa6\x0f\x9a\x2b\xcd\xfb\x7b\x5b\x91\x82\x6f\xa8\x65\x61\xdd\x42\x3b\x2f\xb7\x96\x7d\x5b\x93\x8b\x5c\x17\xba\xd0\xf5\xda\x1a\x5d\xfe\x52\x30\x23\x43\x42\x49\x52\x5a\xde\xe9\x7d\x6c\xb9\xff\xed\x9b\x2f\x2d\x0b\xf1\x49\x38\x80\xdf\xe3\xa3\x52\xb6\x15\xad\x51\x0e\xf7\xd8\xa4\x0a\xbe\x8f\xc0\x39\x69\x24\xa6\x0a\xd2\xd9\x7c\x31\xfd\x72\xf7\x50\xac\xa7\x0f\x1f\x8b\xc5\xea\x73\xb1\x5c\x2d\x8b\xbb\x4f\x9b\x87\xf9\xac\x58\xae\x66\xf3\x4d\x7a\x7d\x59\x18\x5e\xe8\x9f\x9c\x1d\x81\xbc\x43\x97\x1b\xbd\xcd\x07\x51\x72\x17\xac\x8b\x32\xf8\xf4\x82\xfc\xe3\x2c\xfa\x9b\x3c\xcd\xf6\x19\x83\x5b\x32\xa3\x5d\x25\x8a\x18\x0a\x32\x97\x8e\x50\xac\x53\xc0\xd6\xd5\xc8\x89\x27\xd7\xe9\xb2\x9f\xa9\x93\x05\xd9\xb9\x4b\x83\x6a\x75\x8d\x5c\xf5\x41\xf6\x0c\x75\x00\xb3\xac\xa2\x6d\xbb\x1f\x22\x2f\xe8\x64\x44\x7a\x27\x86\x30\x27\x29\xf3\x3e\x33\x7c\x26\x3f\xbd\xe5\xa3\x4d\xd1\xbd\xa3\x77\xff\xe3\x12\x77\xda\x59\xae\x83\xad\xc3\xd1\xeb\xd5\xac\x58\x4e\xef\xe7\x9b\xf5\xf4\x76\xfe\xfe\xc5\x4b\x4f\x66\x97\x87\xd1\xf6\x0d\x96\xf4\x2a\xb2\xf6\xc6\x6e\xd1\x14\x0d\xb9\x5a\x7b\x7f\x1a\xef\x0c\x82\xbb\x7e\xf8\x6f\xc2\x56\xf9\x30\x32\xbd\x19\x71\xd6\x8e\xe0\xd5\x6b\x20\xae\x1a\xab\x59\xfc\xd5\x29\xf7\xb4\xe6\x02\xb3\xd5\x18\x46\x37\xe8\xba\x41\x29\x0f\x40\x1d\xb1\xf8\x51\xb5\x8b\x15\x3e\xdf\xb6\xa1\x33\x5d\xe3\x9e\xc6\x15\xca\x9f\x31\xaf\xbb\x99\xdc\x4c\xde\x26\xff\x02\x00\x00\xff\xff\xdc\x03\x0d\x3a\x3d\x04\x00\x00")

func stacksLocalstorageStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksLocalstorageStackYaml,
		"stacks/localstorage-stack.yaml",
	)
}

func stacksLocalstorageStackYaml() (*asset, error) {
	bytes, err := stacksLocalstorageStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/localstorage-stack.yaml", size: 1085, mode: os.FileMode(420), modTime: time.Unix(1545254090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksNfsStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xda\x40\x10\xbd\xf3\x2b\x46\xa8\x47\x9c\x28\x55\x0f\xcd\x4a\x39\x44\x91\x2b\x72\x28\x20\x40\xa8\x37\x34\xd8\x03\x8c\x58\xef\x3a\xbb\x63\x27\xa8\xed\x7f\xaf\x76\xcd\x87\x1d\x40\xaa\x6f\xb3\xf3\xde\xdb\xf9\x78\xeb\x5d\xb5\x22\x67\x48\xc8\xab\x1e\x40\x81\x86\xd7\xe4\x45\xc1\x9f\xa4\x07\x00\x80\x25\x2f\xc8\x79\xb6\x46\x81\x17\xeb\x70\x43\x77\xbb\xef\xfe\x8e\xed\x7d\xfd\x10\x11\x3b\x36\xb9\x82\x59\x93\x7b\xd1\xe8\x7d\x3c\x2e\x48\x30\x47\x41\x15\x23\x00\x83\x05\x29\x30\xeb\x26\x5b\x3a\x5b\x73\x50\x25\xd7\x1c\xf6\x3c\xb9\x9a\xb3\xa6\x0a\xb3\xf6\x49\x1b\x11\x29\x5c\xe0\x86\x14\xbc\x55\xb8\x0f\xb7\xd3\x87\x90\x33\xa8\x97\x87\xaa\xee\x03\x29\xd3\x4c\x46\x3a\x5c\x8d\x42\x5e\xa2\x02\x99\xba\x91\x4a\x60\x32\x1d\x2f\x5e\x67\xaf\xe3\x51\x3a\x5d\x8e\x9e\x7f\xa6\x4f\xc7\xc2\x12\x18\xfd\x98\x2d\x67\xe9\x74\x91\x4e\x9f\xbe\xfc\x3e\x07\xcb\xe1\x78\x36\x0f\xd0\xbf\x2d\xdc\xe4\x79\x3e\xec\xa2\xd2\x5f\x93\xf1\x74\x1e\x13\x0d\xb0\xb6\xba\x2a\x9a\xb6\x02\x2b\x8e\xe4\xbe\x0c\x23\xf5\x42\x46\x0e\xe9\x98\xdd\x68\xbb\x42\xbd\x2c\xc9\x15\xec\x43\xf9\x27\xd6\x86\x64\xa0\xd9\xcb\xe0\x1d\x25\xdb\x0e\x32\x47\x28\x34\xc8\x49\x93\x10\x5c\x17\xbb\x20\x55\x65\x8e\x57\xd0\x99\x46\x2e\xae\x53\x3e\x2f\xfc\x10\x66\x61\xc7\xa7\x5b\x0e\xb5\x34\xea\x83\x32\xf2\xa8\x26\x23\x87\x45\xff\x6f\x33\x5d\x01\x93\x97\x96\x8f\x1a\x8e\xbc\xa0\x13\x05\xa8\xdf\x71\xef\x7b\xf1\xd0\x73\x4e\x3b\xce\x76\xfe\x68\x30\x36\x2c\x49\x67\xda\x2d\xd7\xe4\xc8\x7e\x8b\xe6\xe1\xf1\xf1\x6b\xcb\x28\x6d\x73\x84\x2f\xb3\x45\x81\x26\x3f\xb3\x13\xe8\xfb\x6d\xbf\x1d\x26\x59\x27\x2c\x6c\x65\x04\x12\x09\x96\xfd\x06\xd7\xfd\xa2\x6e\x1a\x04\x2e\x8d\x70\x56\xbf\x68\xe5\xa6\x79\x94\xdf\xa2\xa3\xfc\x04\x2c\x1d\xd7\xac\x69\x43\xb9\x02\x71\x15\x9d\x87\x61\x58\x5e\xac\x11\xe4\xf8\xee\xba\xb9\x30\xa8\x49\xa5\xf5\xc4\x6a\xce\xf6\xe7\x61\xbf\x55\xe4\xa5\xd9\x5f\x02\x35\x3a\xc6\x95\x26\x05\x57\x3a\xed\x01\xe4\xe4\x33\xc7\xa5\xc4\xff\x45\x7f\x68\xbd\x84\x77\x0f\x76\x1d\xf0\x10\xde\x38\xb9\xfe\x2d\x9d\xd6\x68\x2e\xa4\xd2\x8f\xd2\x3a\x81\x12\x65\xfb\x49\xed\x5f\x00\x00\x00\xff\xff\x7c\xd3\x96\x06\xc1\x04\x00\x00")

func stacksNfsStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksNfsStackYaml,
		"stacks/nfs-stack.yaml",
	)
}

func stacksNfsStackYaml() (*asset, error) {
	bytes, err := stacksNfsStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/nfs-stack.yaml", size: 1217, mode: os.FileMode(420), modTime: time.Unix(1545254090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksRioAutoscalerStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x5d\x6e\x22\x3d\x10\x7c\xe7\x14\x7e\x43\xfa\x84\xf9\xd3\xa7\x55\x32\xa7\x88\x36\x07\x40\x8d\x5d\x0c\x56\xec\xb6\x65\xb7\x21\xac\xf6\xf0\xab\xc1\x33\x10\x56\x44\xda\xc7\xa9\x1f\x77\x75\xd7\x98\xc8\x07\xd7\x97\x6e\xa6\x14\x55\x89\xc5\x90\x87\x6e\xe0\x80\x29\x65\x22\x0b\x58\x3a\xf5\x5b\x5f\xbf\x95\x02\xd3\xde\x43\x37\xa9\x44\xfd\x0b\x39\x76\x4a\x72\xc5\x28\x08\xf4\x39\xb2\x35\xe9\x4c\x82\x4e\x6d\xd6\x23\x37\x3c\x47\x8e\x91\x87\x21\xa6\xe6\x0c\x36\x17\x2d\x94\x7b\x88\x4e\xc8\x06\x2c\xd4\x0f\x8e\xe5\x3f\x59\x2c\x0e\x54\xbd\x74\x6a\x33\xaa\x8b\x5c\xd3\x9d\x1d\xdb\x78\xee\xd4\x8f\x75\x19\x89\x44\xec\xcc\x1d\x9f\x60\x71\xe6\x43\x3b\x16\xe4\x13\xf9\x4e\x6d\x27\xfc\x61\x3d\x2d\xc7\x8c\x72\x8c\xde\x76\xea\xff\xf0\x54\xd1\x67\x32\x18\x36\x70\xd1\x76\x6a\x1b\x66\xb3\x82\x7c\x72\x06\xd7\xdb\xf6\x24\x38\xd3\xa5\x9d\xb4\xf7\x71\x4f\x7e\x97\x90\x83\x2b\xc5\x45\x2e\x0d\xd7\x6a\xfe\x9f\x6a\xb7\x0f\x94\xca\xfc\x0e\xe2\x04\x96\x1b\xd0\x43\x16\xde\x15\x59\xd4\x64\x49\xb0\x38\x93\x98\xe3\xc2\xc2\x43\xa0\xb2\x8b\x4b\x43\x22\x1e\x4b\x17\x57\x53\x86\x2f\xce\xa6\xfe\xe2\x1f\x2c\xfa\x56\xfe\x13\xf3\x00\x67\x98\x18\x02\xd8\x92\x0c\x81\x9f\xbe\xa7\x52\xb4\xe5\xef\x8c\x8d\x1e\x27\x81\x6d\x8a\x8e\xe5\x1b\xff\x2d\xed\x95\x76\xe1\xfa\x23\x58\x72\xe5\x48\xbc\x79\x7d\xdd\xae\x1e\x92\xe6\xce\xe2\x74\x57\xbe\x55\xef\xdf\xa2\x77\xe6\xd2\x29\xf2\x67\xba\xb4\x21\xf8\x4c\xb1\x60\x3a\xf0\xcb\x7a\x75\x14\x49\xe3\x9f\x1d\x02\xb1\x9d\xa8\xc7\xb7\x47\x50\x6b\x8b\x7d\xed\xa7\xb8\xad\xc5\x1b\x37\x84\x06\x4f\x35\xbd\xac\xe7\xb3\xd9\x47\xdd\x23\x33\xa4\xd5\xce\x14\x50\x12\x19\xd8\x9d\xa9\x45\x62\xd8\x65\x94\x58\xb3\xc1\xce\xe2\xe0\xd8\xc9\xd4\xbe\x56\xef\x6d\xf9\xf7\x61\xfc\xcf\x87\x6b\x2f\xbf\x2b\xe8\xb4\xf9\x13\x00\x00\xff\xff\xb6\xe3\xb8\x75\xbf\x03\x00\x00")

func stacksRioAutoscalerStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksRioAutoscalerStackYaml,
		"stacks/rio-autoscaler-stack.yaml",
	)
}

func stacksRioAutoscalerStackYaml() (*asset, error) {
	bytes, err := stacksRioAutoscalerStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/rio-autoscaler-stack.yaml", size: 959, mode: os.FileMode(420), modTime: time.Unix(1547072865, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stacks/cert-manager-stack.yaml":    stacksCertManagerStackYaml,
	"stacks/coredns-stack.yaml":         stacksCorednsStackYaml,
	"stacks/istio-crd-stack.yaml":       stacksIstioCrdStackYaml,
	"stacks/istio-stack.yaml":           stacksIstioStackYaml,
	"stacks/istio-telemetry-stack.yaml": stacksIstioTelemetryStackYaml,
	"stacks/localstorage-stack.yaml":    stacksLocalstorageStackYaml,
	"stacks/nfs-stack.yaml":             stacksNfsStackYaml,
	"stacks/rio-autoscaler-stack.yaml":  stacksRioAutoscalerStackYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stacks": &bintree{nil, map[string]*bintree{
		"cert-manager-stack.yaml":    &bintree{stacksCertManagerStackYaml, map[string]*bintree{}},
		"coredns-stack.yaml":         &bintree{stacksCorednsStackYaml, map[string]*bintree{}},
		"istio-crd-stack.yaml":       &bintree{stacksIstioCrdStackYaml, map[string]*bintree{}},
		"istio-stack.yaml":           &bintree{stacksIstioStackYaml, map[string]*bintree{}},
		"istio-telemetry-stack.yaml": &bintree{stacksIstioTelemetryStackYaml, map[string]*bintree{}},
		"localstorage-stack.yaml":    &bintree{stacksLocalstorageStackYaml, map[string]*bintree{}},
		"nfs-stack.yaml":             &bintree{stacksNfsStackYaml, map[string]*bintree{}},
		"rio-autoscaler-stack.yaml":  &bintree{stacksRioAutoscalerStackYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
