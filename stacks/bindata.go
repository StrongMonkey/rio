// Code generated by go-bindata.
// sources:
// stacks/coredns-stack.yml
// stacks/istio-stack.yml
// DO NOT EDIT!

package stacks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stacksCorednsStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\xf6\x01\x2c\x4a\x82\x3e\x7f\x75\x79\x6c\xea\x43\x2e\x39\xb4\x45\xaf\x06\x43\xae\x2d\xc2\xfc\xc3\x2e\x95\xc6\x68\xfb\xee\x05\x4d\xcb\x50\xe3\x46\x17\x2d\x77\x86\xcb\xc5\xcc\xe8\x18\x0e\xf6\xc8\x72\x05\x50\xca\xf2\xbf\x54\x19\x43\x96\xf0\xab\xb9\x9c\x01\x84\xdc\x0c\xf0\xf3\x7a\x28\x1f\x12\x45\xe2\x45\x63\x44\xe5\xf2\xb8\x68\x9c\xa6\x67\xa4\x80\x19\x19\xb4\x9b\x38\x23\x09\x17\xb5\x72\x60\x43\xa3\x8c\x21\xa1\x28\x29\xb0\xe9\xff\x5a\x2c\x87\x97\x2f\x45\xc3\x60\x03\xa3\x9e\x08\xdf\x60\x53\xe2\x4c\xa8\xfc\x9b\xf6\x41\x39\x97\x47\x8a\xd3\x71\xfc\xf7\x23\x0b\xfe\xef\x45\x9d\x28\x7a\xcc\x23\x4e\x0c\xf2\x63\xbf\x19\xfe\x86\x5e\xcf\x20\xa0\xc5\xac\x5b\x42\x8e\xee\x45\x14\x9d\x16\x14\xad\xf4\x88\x30\x74\xab\x79\x30\x23\xbd\x58\x8d\x57\x4d\x09\x4d\xe0\x2a\x6b\x29\x60\x8c\x9c\xab\xc8\x2a\xed\x95\x31\x12\x9e\x76\xdf\xf6\x9f\x1e\x9f\x3e\xef\xbf\xee\xbe\x7c\x7f\x7c\xd8\xdd\x50\x43\x31\x49\x50\xce\x5d\x4d\xf1\x5e\x05\x53\x47\x35\xd0\xdc\xd6\x68\xea\x76\xd7\xa7\xda\x87\x48\x78\xb0\x0e\x67\x27\x67\x7b\x0b\xf1\x62\xf1\xfb\x6c\x7c\x4d\x91\x71\x26\xf7\x9d\xf8\x6f\x10\x9d\xe8\x3b\xb9\x19\xe4\x66\x68\x27\x93\xd6\x26\xf0\x3b\x70\x81\x9a\xac\xd3\x15\x2e\x42\xae\x3d\x66\xb2\xba\xde\x38\xba\xf8\xac\xdc\x3e\x21\x79\xcb\x6c\x63\xb8\x6d\xe5\x2c\xe7\xf5\x0f\x95\xf5\x08\x18\x4c\x8a\x36\x64\xbe\x87\x66\x59\xef\x91\x12\x95\xfb\x6e\x50\x1e\x39\xa9\xf9\x46\xcd\xa7\x1e\x51\x9f\x24\x8c\x39\x27\xd9\xb6\x97\x3c\x16\x43\xe4\xb6\xdb\x76\xed\x22\xc2\xd6\xab\x23\x4a\x38\x6d\x59\x1c\x35\x09\x1b\x67\xc1\x64\x2f\x7a\x51\x13\xe2\xd1\x47\x3a\x4b\xf8\xd0\xd5\x20\x12\x2a\xb3\x8f\xc1\x9d\x25\x64\x9a\xaa\xa2\xac\x95\x43\x09\xfd\xea\x4f\x00\x00\x00\xff\xff\xd5\x57\x8c\x0c\x68\x03\x00\x00")

func stacksCorednsStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCorednsStackYml,
		"stacks/coredns-stack.yml",
	)
}

func stacksCorednsStackYml() (*asset, error) {
	bytes, err := stacksCorednsStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/coredns-stack.yml", size: 872, mode: os.FileMode(420), modTime: time.Unix(1534733485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xdd\x6f\xe3\xb8\x11\x7f\xf7\x5f\x41\x68\x0f\x48\x2f\x88\xfc\xb1\x7b\x69\x73\x02\xfc\xe0\x73\xbc\x4d\x80\x6c\xe2\x8b\x7d\x57\xf4\xc9\xa0\xc5\xb1\x4d\x84\x22\x05\x72\xe4\xac\xfb\xf1\xbf\x17\xa4\x28\x89\xf2\x47\x6c\xb4\x28\xee\x65\x37\x9a\xf9\xcd\x90\x9c\xe1\xfc\x66\xe8\x54\xc9\x15\x5f\x9b\xa4\x43\x48\x06\x66\x63\xff\x27\x24\x55\x12\x41\x62\x42\xfe\x15\xbb\x6f\x42\x18\x37\x74\x29\x60\xaa\x04\x4f\x77\xe3\x0d\xa4\x6f\x26\x21\xa8\x0b\xf0\x7a\x2e\xd7\x1a\x8c\x19\x2b\x89\x5a\x09\x01\xfa\x9b\x62\x90\x90\xe8\xe5\xeb\xd7\xc8\x43\x68\x81\x9b\xd2\x3e\x21\xcf\x2f\xcf\x13\x2f\xd6\xcc\xbc\xc2\x4a\x83\xd9\xdc\x83\xa0\xbb\x84\x0c\xfa\xc6\xab\x54\x81\x4b\x55\x48\x36\xd7\x74\xb5\xe2\xa9\x37\xf6\x4a\x42\x32\xb7\xc4\xe8\xe9\xe9\xe5\x6f\x8b\xd1\xf3\xdf\xab\x9d\xc2\x8a\x16\x02\xc7\xee\x5c\x0d\x98\x71\x93\xaa\x2d\xe8\xdd\xa9\xc5\xdc\xa9\x25\xa4\x38\xe7\x19\xa8\x02\x13\xf2\xa5\xad\x5b\xf1\xf5\x94\xe2\x26\x21\x51\x0f\x30\xed\x71\x83\x5c\xf5\x72\xad\xbe\xef\xa2\x1a\xb6\xe4\x92\xea\x5d\x05\x2b\x8c\xee\x09\x95\x52\xd1\x5b\x72\xd9\x03\xb9\x55\x01\xd4\x80\xde\xf2\x14\xc6\xa2\x30\x08\x3a\x21\xce\x5f\xec\xfc\x35\x9b\xd6\x94\xcb\xfb\x42\x53\xe4\x4a\x26\xe4\xa7\xdb\x66\x43\x39\xd5\x20\x71\xb6\x29\x90\xa9\xf7\x00\x33\xc8\x82\x5d\x73\x89\xa0\x53\xc8\xad\xaa\x4c\xc8\xeb\xe4\xfe\xf1\x75\x32\x9e\x37\x7e\xec\x82\x23\x96\x71\x39\x55\x1a\x13\x32\xb8\xed\xf7\xfb\xe1\xb1\x6d\x3e\xa7\x82\x4a\x18\x1d\xcf\x5f\x10\xda\x11\x63\xf6\x12\xd4\x67\xe1\x42\x61\xf7\x87\x7f\x3e\x8f\xbe\x4d\x66\xd3\xd1\x78\xf2\xef\xc4\x7a\xff\x4b\xa7\xe3\xcf\xee\x6e\x5d\x80\x2d\xb3\x25\xe8\x12\x84\xa9\x32\xe7\xd4\x09\x71\x7a\x27\x5a\x0b\xb5\xa4\x62\x91\x83\xce\xb8\x31\x5c\x49\x0f\x8d\xc9\xd5\xb5\x4f\x53\xd7\x19\x75\xb9\xea\x5d\x5f\x35\x3a\x09\xf8\xae\xf4\x1b\x97\x27\xf4\xf6\x7e\x82\x44\x9e\xba\x48\x9e\xc0\xe4\x1c\xbe\x23\x48\xb7\x6e\xf7\xed\xce\x58\x40\x5a\x18\x54\x99\x06\xa3\x0a\x9d\x02\x83\x15\x97\xdc\xba\x30\x81\x61\x63\xd5\xc3\x0d\xd7\x2c\xa7\x1a\x77\x95\xc9\xe5\xc0\x6e\xa3\x3e\x6e\xe3\xeb\xf0\x94\xcb\x5a\xdd\x33\x48\xb1\xa8\x51\x7a\x49\xd3\xe0\xc4\x5e\x9a\x6a\xa0\x08\x37\x6b\xc0\x1b\xc1\x0d\xde\xbc\x53\x4c\x37\x37\x45\xce\x28\x82\x0f\x75\x46\x73\xe3\xd1\x20\x59\xae\xb8\xc4\xea\x3b\x57\xac\xfa\xb3\xca\xb7\xff\x94\x34\x03\x93\xd3\x40\xa0\x18\x34\xd8\x54\x83\x77\x62\x38\x83\x37\x6e\xb9\xa6\xb3\x77\xd5\x92\xe0\x8a\x66\x19\x95\x2c\x69\x74\x24\x8e\x85\x5a\x2f\x54\x81\x79\x81\x0b\x01\x5b\x10\x43\x06\xcb\x62\x4d\xe2\x58\x83\xd9\xc9\x74\xf8\x79\xb3\x57\xd9\xa6\x71\x18\x97\x44\x18\x14\x79\x09\xe9\x59\x71\x8d\x02\xb9\xe5\x5a\xc9\xcc\xd2\x64\x60\x3a\x7d\xb9\x5f\xd8\xfb\x3e\xfc\xe1\x4f\x06\xc4\xaa\x67\x8f\xfa\xe3\x11\xbd\xab\x87\x10\xe4\xe2\xd1\x42\x3e\x3e\xbd\xcc\x17\xf3\x87\xd7\x97\xf9\xfc\x69\x32\xbc\x0d\xaa\xb2\x52\x8e\x47\xe3\x87\xc9\x62\xf6\xeb\x6f\xa3\xd9\xc3\xf0\xb6\xa9\xfa\x8c\xae\xc1\x17\x61\xaf\x2c\xac\x41\xb7\xdf\xed\x07\xd4\xe3\x42\x9c\x10\xce\xec\x85\xc7\x5d\x79\xd8\x14\x34\x9a\xb0\xec\x4a\x36\x6a\x8e\x07\xdf\x73\x65\x20\x3c\xae\xab\xe7\xde\x06\x31\x6f\x0b\x07\xfd\xde\x5a\xe7\x69\x20\xfc\xb9\xff\xf3\x17\x07\xbc\xb1\xff\xc4\x99\x92\x1c\x95\xe6\x72\x7d\x62\xdb\x76\xe5\xed\xe7\xa4\xdf\xbd\xeb\xf6\x0f\x72\x1d\xf8\x6d\x13\x66\x4c\xe2\xb8\x4d\xac\x81\x2a\x60\x9a\x96\x01\x42\x96\x0b\x8a\xf0\x95\x0b\x08\x14\xfb\x2c\x5f\x12\xf8\xa2\x64\xb5\x1d\xcd\x44\x17\xb3\x5c\xb4\x3c\x1d\xa7\xcb\x00\xd2\xe2\xcd\xff\xfb\x15\x7a\x7c\x9e\xcd\x47\xcf\xe3\xc9\xe2\x71\x5a\xe1\x78\xfe\xe3\x65\xd7\xa0\x66\xe6\x94\x23\x65\x20\xca\x1d\xfa\x1c\x45\xbe\x2e\xbc\xca\xdd\xae\xa8\x73\x90\x21\x1b\x12\x9a\xe7\x20\x59\xcc\xa4\x89\xdd\x1e\x87\xf5\xd0\x60\xb5\xf6\x92\xc4\xb9\xd2\x38\xbc\xeb\xff\xb9\xdf\x16\x6f\x94\x41\x6b\x32\xf4\xcb\x74\x9a\x04\x8b\x55\x6c\xf8\x5a\x02\x8b\x53\xda\x76\xe8\xb1\xb1\x41\xa5\xe9\x1a\xe2\x3a\x2e\x43\xcd\x55\x6c\x76\x06\x21\x3b\xd3\x46\xde\x35\x47\x68\xd1\x50\x4d\x60\x34\x4d\x55\x21\xf7\xa5\xe5\xe7\x11\x4f\x96\x38\x19\x08\x40\x20\x0c\x72\xa1\x76\x36\xd5\xe6\x50\x79\xdc\xfb\x21\xe0\x88\xe6\xb8\x5f\xc7\xd6\x25\x4f\x57\xc0\xa0\x09\xfc\x37\x36\x1a\x72\xc1\x53\x6a\x6a\x66\xbe\xe8\xee\xac\x29\xc2\x3b\xdd\x1d\xeb\xeb\x91\xd7\x45\x09\x89\xec\x3a\x5a\x52\x11\x9d\xc9\x4c\x64\xf7\x59\x36\xa1\x60\xb7\x67\x5a\x66\xf4\xb1\xf1\x75\x6f\xcb\x35\x16\x54\x54\x31\x3e\x8b\x67\x60\x90\x4b\x37\x24\xe8\x42\x5c\x60\xe0\x4f\xea\x81\xa5\x78\xa1\x34\xb3\x53\x9f\x41\x95\xc7\x2b\xae\x0d\x1e\x6f\x78\x47\x79\xb8\x5d\x85\x15\x55\x06\x55\x78\x21\x57\x6a\x55\xb4\x19\xf2\xb0\x71\x06\xca\xc8\x4f\xd6\x09\x97\x2b\x15\xb5\xac\x8e\x0e\xd7\x01\xe2\x6a\x60\xae\xc8\xa7\x73\xa8\x38\x6e\xcd\xbb\xa1\xfd\x4f\xb7\xce\xc1\x09\x75\x1c\x1f\x9f\x86\x5b\x3b\xc8\xfa\xd6\xc5\x59\xa0\x23\xf1\xe0\x19\xd0\xf2\xe1\x5c\x9c\xd4\x9f\x6f\x3d\x07\xbd\xea\x1f\x3c\x7f\xe3\xd2\xcf\xcd\x61\xac\xdb\xf1\xb5\xc3\x9a\x61\xbf\xb1\xfc\x2c\xb2\x3d\xce\x87\x38\x37\xd8\x47\xff\x43\xbb\x6a\x25\xfa\x70\x23\xe1\x1c\x5f\x8e\xf9\x95\x0e\xe4\xf6\x0f\xe9\x6f\x31\x79\x9c\xcd\x1f\x5f\x16\xdf\x26\xf3\xd1\xe2\xe3\x55\x3f\xa6\xb3\xb7\x62\x09\x5a\x02\x96\x0f\x96\x7a\x2b\x6c\x51\x4e\xfe\x8b\x8a\x6b\x16\xc1\xec\x6f\x91\x9f\xfc\x70\xd9\xb1\x7b\xb9\x6f\x68\xa3\x8c\x73\x77\xff\xb1\xb2\x1d\x50\x91\x6f\xe8\x67\x07\x9f\xb8\x41\xfd\xb5\x10\xf0\x31\xee\xd5\xd6\xf0\x79\xd8\xc3\x7c\x3e\x1d\x4d\x1f\x67\x39\xa4\xbf\x70\xc9\xec\x23\xe8\x52\xfc\xc7\xc0\x5f\x0b\x85\xf4\x62\xb7\x35\xfa\x23\xd8\xa7\xe0\xa9\xe6\xac\x7e\x2f\x19\x7a\x56\x56\x57\xf7\xd8\x43\xce\x9b\x7f\xd9\x0f\xb5\x8b\xcc\x59\x03\xef\x79\x22\x51\xef\xce\xa3\xff\x5a\xf2\xf9\x39\xe0\xa7\xbd\x17\xa5\xb3\xf5\xa9\x3f\xf5\xd6\xf4\xe6\x83\x4e\xfb\x9e\x65\x54\xf2\x15\x98\xe6\x07\x19\x9a\xf3\xdf\x41\x1b\xf7\xe2\xdf\x0e\x9c\xe8\x8d\xdb\x47\x90\x3f\x89\x93\x64\x80\x94\x51\xa4\x55\xf1\x59\x87\x09\xb1\x73\x90\x58\x7a\x11\x95\x52\x21\xc5\xa6\xc9\xee\xb7\xe9\x8f\x1a\xb5\xc9\x21\xad\x70\xb8\xcb\x21\x21\x4f\x8a\xb2\x5f\xa8\xa0\x32\xad\xd9\xcf\x80\x80\x14\x95\xbe\xc4\x21\x21\x76\x14\xac\xd7\x8e\xfd\x8e\xdd\x83\xe1\xae\x1f\xdf\xf5\xc3\x5f\x2d\x50\xa5\x4a\x24\x64\x3e\x9e\x36\x52\xf7\x0b\x46\x00\x43\xaa\xd7\x80\xd3\x50\x1c\xc7\x87\x11\x3c\x93\xc8\x2a\xb6\x3e\xef\x67\x62\xbb\x0e\x50\x61\x84\x0e\x03\x51\x4d\x47\xa4\x8a\x42\x8d\xd4\x5b\xd0\x41\x18\xdc\xb9\x6a\xb3\xf0\xf4\x91\xad\xd3\x28\x50\xc9\x22\x5b\xda\xb9\x22\x08\x82\x9d\xa3\x5b\xcf\xdb\xe8\x3a\xea\xfc\x27\x00\x00\xff\xff\x30\x9e\xd8\x9c\xf7\x13\x00\x00")

func stacksIstioStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioStackYml,
		"stacks/istio-stack.yml",
	)
}

func stacksIstioStackYml() (*asset, error) {
	bytes, err := stacksIstioStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-stack.yml", size: 5111, mode: os.FileMode(420), modTime: time.Unix(1537378934, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stacks/coredns-stack.yml": stacksCorednsStackYml,
	"stacks/istio-stack.yml":   stacksIstioStackYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stacks": &bintree{nil, map[string]*bintree{
		"coredns-stack.yml": &bintree{stacksCorednsStackYml, map[string]*bintree{}},
		"istio-stack.yml":   &bintree{stacksIstioStackYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
