// Code generated for package stacks by go-bindata DO NOT EDIT. (@generated)
// sources:
// stacks/build-stack.yaml
// stacks/buildkit-local-stack.yaml
// stacks/cert-manager-stack.yaml
// stacks/gloo-stack.sh
// stacks/gloo-stack.yaml
// stacks/gloo-values.yaml
// stacks/linkerd-stack.yaml
// stacks/rio-autoscaler-stack.yaml
// stacks/rio-controller-stack.yaml
package stacks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stacksBuildStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xfb\x8b\x24\x37\x92\xfe\xbd\xff\x8a\xa4\x38\xf0\xdd\xd0\x55\x95\x92\x52\xaf\x82\xe1\x6c\xc6\x73\xb7\xde\xc5\xe3\x66\x66\x58\x30\xc6\x0c\x21\x29\x54\x95\xdb\x59\x99\x89\xa4\xea\x71\xaf\xed\xff\x7d\xc9\x67\x3d\xba\x67\xa6\xd7\xb0\xbb\xb6\x31\x0d\xd5\x99\x11\x5f\x84\x3e\x7d\xa1\x47\xa4\x6d\x6a\x5f\x6e\xe3\xe6\x2a\xcb\x86\xc7\x65\xd5\x6c\xb7\x65\xbd\xed\x2c\xbd\x2d\x61\x9d\x36\xd9\x4f\xcb\xfe\x3d\xcb\xaa\x66\x5b\xe1\x1d\x56\xab\xce\x15\x9a\xaa\xc2\xb0\xc9\xca\xda\x37\xa3\xff\x14\x11\xd0\xc5\x65\x59\x97\xe9\x43\x88\x6d\x99\x3e\xea\x7f\x8f\x66\xd7\x34\xb7\x17\xee\xbf\x43\xdb\xb3\xc4\xb0\x1c\x38\x6f\xb2\x9f\x66\x67\x96\xfd\x78\xf2\x9c\x65\x8b\x3e\xd3\x62\x93\x2d\xba\x1c\x8b\xeb\x73\xa7\xeb\x9c\x4d\xbb\xc7\x3a\x2d\x36\x99\x87\x2a\xe2\x05\x22\xc2\xbe\xad\xca\x7a\xbb\xd8\x5c\x24\xce\xba\x8c\x65\x2a\xa1\x4b\x4e\xf2\xfc\xfa\xd2\x9b\x76\x18\x10\x7c\xc2\x30\x00\xce\xfc\x3f\x5f\x0c\xd3\x1c\x52\x7b\x48\x37\x90\x76\x71\xb1\xc9\xbe\x5b\xc4\xe4\x9a\x43\x5a\x7c\x7f\x01\xc3\x10\x9a\xf0\xcd\x43\x2c\x86\xf0\x10\x5b\xdb\xc6\x0d\xcc\x17\x7f\x8b\x4d\x7d\x39\xf7\xde\x8f\xe1\x45\x2f\xe1\x63\xd3\x4b\xe5\x1e\xff\x82\xf7\x5d\xfc\xe2\xc1\xec\x7a\x59\x47\xef\x20\xf1\x03\x48\x0d\x73\xfc\x50\xae\x87\x10\x0b\xdd\x02\x1a\x41\xc3\xcb\x43\xd0\x1e\x63\x84\xed\x94\x6a\x1f\xb7\x0f\x21\x31\x81\xbd\x4d\x01\xec\x84\x3a\x1a\x1e\xa1\x5e\xd6\xf8\xb2\x9e\xa4\xf9\xc0\xd4\x5e\x0e\xea\x3c\x8e\xe8\x94\xf9\x28\xc0\x1d\x02\xa4\xb2\xa9\x3f\x0a\x1a\xe6\x7b\x0a\x39\x5f\x22\x57\xe7\xcf\xe3\xfe\x84\x90\x4a\x0f\x36\x2d\xcd\xc1\xde\x62\x1a\xf6\xe9\x8f\x8f\x01\xda\x3b\x3b\x7b\xaf\x22\x86\xbb\xd2\x62\xbf\xd3\x03\x6e\xcb\x98\xc2\xfd\xe0\x2d\xf7\xb0\xc5\xcd\xd1\x48\x7b\x2b\xd6\x77\x83\x7b\x99\xbd\x7e\xf9\xff\x5f\xbd\x79\xfb\xfa\xdb\x77\x7f\x7a\xfb\xf6\xe6\xdd\x17\x5f\x7e\xf9\xfa\x79\xbe\xea\xff\x36\x6a\x58\xd5\x6d\x13\x52\x9c\xe0\xaa\x33\xaf\x93\x6d\xaf\xa7\x94\xd7\x65\x9d\x30\xd4\x50\x3d\x4f\xe1\x80\x3d\xec\xae\xa9\x0e\x7b\x9c\x63\x62\x6a\x02\x6c\x71\x39\x93\x58\xdf\x41\x58\x57\xa5\x59\x4f\x96\xab\x2c\x9b\x4e\x83\x3e\x66\x5b\x35\x06\xaa\x77\x2d\x86\x7d\x19\x63\xd9\xd4\x73\xae\xc5\xb3\x6c\x5b\xa6\xf7\x90\xec\x0e\xc3\xca\x42\x4a\x15\xae\xca\x66\x7d\x34\xc6\xc5\xa7\xa1\xb6\xd9\xef\xcb\x34\x23\x3f\x7b\x36\xca\xbb\x87\x36\x7e\x76\x34\xe2\x1d\xd6\x69\x36\x6c\x31\x5d\x57\x65\x4c\x59\xdb\xb8\x38\xda\x6c\x40\x48\x78\x3d\xbb\xd6\x9d\x6f\x5d\x35\xdb\x69\xea\x68\x03\xa6\x78\x56\x0a\xa8\x3b\x42\x27\x8c\x37\x77\xf9\xaa\x58\x91\x1e\x04\x61\x3b\xcf\xf5\x88\x18\x0d\xcb\x65\x37\x08\xd6\x4b\x70\x2e\x60\x9c\x48\x6c\x54\xae\xf3\xe3\x10\x37\x87\xaa\xba\x69\xaa\xd2\xde\x6f\x32\xa8\xde\xc3\x7d\x7c\xac\x8c\x3a\x5f\xef\x52\x6a\xaf\xbb\x9f\xe5\x28\xfe\x55\x96\x99\x43\x59\xb9\xe5\xc9\xf1\xff\x89\x7a\x7c\xf6\xac\x97\xe3\x44\xb4\xee\x60\x88\x2d\x58\x3c\x35\x8e\x3a\x7c\x50\xdb\x1e\xd2\xaf\x61\xb0\xb6\x39\x9c\x7b\x1e\xaf\xcd\x0f\x09\xeb\x9e\xca\xda\x61\x5b\x35\xf7\xfb\xb3\x7c\x17\x85\xb9\xee\x85\xbc\x6e\xfb\xdf\x43\xeb\x3a\x9f\xc3\x0a\x13\x66\x09\x6f\x53\x53\xaf\x1c\xde\xad\x9f\x9d\xe4\x87\xb6\x3c\x0e\xb1\xba\x55\xb1\x5b\x3a\xf6\x10\x53\xb3\x0f\x18\x9b\x43\xb0\xe8\xd0\xf7\x97\x44\x53\x8f\xe3\x8e\x15\x2e\x6b\x87\x3f\xac\x5c\x63\x6f\x31\x74\x51\x53\xc5\x8f\xaa\x2e\x49\x0e\x0c\x19\x95\x9a\x7a\xc6\x04\x27\x4c\x0b\x97\x53\x23\x14\xe7\x20\x90\x89\xcf\xe3\x0e\x28\x17\x1b\x89\xe8\x9c\xa0\xde\x14\x04\x38\x31\x82\x09\xc5\xac\xb2\x79\x0e\x8e\x70\x70\x8c\x68\x94\x1c\x3c\x61\x4e\x16\x44\x28\xf0\x82\x49\x9f\x17\x42\x49\xce\x14\x81\x62\xba\xe7\xa7\x36\xa0\x5f\xb3\x67\xad\xc0\x7a\xea\x02\xd6\x98\xec\xfa\xdc\x77\x79\x56\xbc\xf9\xf6\xcd\xdb\x97\x5f\xbf\x7b\xf5\xc5\xd7\x2f\xdf\xdc\x7c\xf1\xe2\xe5\xf3\xff\xfa\x71\x7e\xfe\xf9\xc1\xf2\xed\xb2\xa4\x66\xb8\xbf\x26\xd3\xf0\x96\x76\x01\xe3\xae\xa9\xdc\x68\xfe\xea\xd5\xff\x7d\x33\x21\x6e\x0f\x06\x47\x16\xef\x43\x99\x30\x2c\x7b\x55\x47\xf7\x87\xa4\x3d\x46\x8d\x41\xcc\x31\xe9\x11\x72\x93\x73\x86\xa0\xa8\x13\xc2\x48\x9b\x1b\xc0\x9c\x39\x6b\xf2\x49\x60\xa7\x88\x67\x5e\x31\xe6\x88\x06\x21\x0a\x2d\x94\xa6\x9a\x4b\x0f\xc4\x23\x35\xa6\x28\x38\xd5\x68\x05\x05\x09\xc2\x18\x25\x00\x84\xb0\xc0\x29\xe7\x8c\x1b\x22\x27\xda\x63\x3b\xf4\x04\xaa\xc7\xc6\x69\x69\xa5\x20\x9e\x76\x05\x94\x86\x39\x65\x10\xb4\xe3\xb9\xb5\xc2\x9a\x9c\xe4\xc2\x4f\x24\x51\x5b\x21\xbc\x93\xde\x09\x2e\x4c\x4e\x25\xcf\x65\x6e\x73\x2d\x05\xb1\x52\xe6\xda\xe9\xdc\x48\x2e\x68\x4e\xbd\x75\x04\x0a\x97\x7b\x66\xa4\x10\xc6\x70\xb0\x8e\x91\x89\x64\xdf\x91\x3d\x81\xe2\xd4\xb9\x2d\x0b\x25\x0b\x2d\x15\x68\xa9\x84\x11\x82\x72\xe7\x94\x11\xe8\x29\x50\x02\x20\x67\x15\xa5\xa4\xa6\xe0\xda\x2b\x8f\x20\x00\x81\x32\x6b\x8a\x3c\x17\xca\x0a\x2a\xac\x2b\x38\x58\xce\xd1\x09\x24\x5a\x53\x9b\x1b\xef\x29\x30\x42\x11\x99\x23\x0c\x28\x4c\x04\xeb\xa6\x7d\x12\xc1\x0e\xa7\x10\xac\xb4\x84\x31\x74\xe0\xb8\xf3\x92\x68\x67\x99\x34\x4c\x18\x41\x0b\x45\x27\x6e\x96\x58\xa0\x94\x78\x6b\xbd\x76\xda\x14\xb9\x02\x25\x35\x61\x9a\x11\x25\x8c\xd4\x5a\x0a\xae\x05\x65\x5a\x69\x67\xc0\x83\x2f\x0c\x00\x72\xcb\x04\xe3\x00\x5a\x4f\xdc\x0c\xc4\xdd\xb2\x6e\x9e\xc8\xb0\x47\x23\x31\x42\x51\x95\x33\x4b\x99\x15\xc6\x1b\x4d\xb4\x50\xb6\x90\xc2\x58\x43\xd1\x4e\x14\x55\xc1\x10\x34\x70\xcf\x84\x23\x02\x7d\xce\x85\xe9\x8a\x2d\xbc\xa6\x16\xa9\x95\xb9\xd2\x9e\xf3\xdc\x7a\x74\x1e\xb4\x46\x4e\x18\x71\xa2\x90\x9a\x15\xa0\xfc\x2c\xdf\x36\x1e\x52\x59\x3d\xad\xc4\x03\x14\x1c\x32\xef\xd0\x18\xa9\x89\x55\x0a\x0b\xe9\x8a\x82\x2b\xb4\xa2\x20\x4e\xc3\x2c\x22\x27\x86\x69\xce\xbd\x01\x63\x4c\x41\xbc\x2f\x88\xf0\x45\x41\x39\x17\x16\x73\xc6\xb8\xa5\x9a\x18\x65\x8c\x17\x85\xd6\x12\x09\x3a\xa5\x84\xcb\x95\x52\xda\x69\x39\x8b\x88\x75\x0a\xf7\x6d\x53\xd6\x4f\x5b\x88\x27\x70\xe3\x7d\x0e\x94\x3a\x20\xb9\x32\x96\x7a\x22\xac\x22\xca\x6a\x29\x0a\x02\x54\xcf\x27\xa6\x05\x46\x1c\xed\xe6\x50\x28\x8e\x1a\x94\xc9\x0b\x2f\x8c\x32\xc2\x5a\x89\x92\xa2\x80\x02\x15\x72\xaa\x25\xe7\xb9\xe6\xe8\x24\x32\xc5\xa8\xd1\x85\xb2\x9a\x4f\x47\xd2\x40\xcf\x95\x5b\x8c\x69\x89\x3f\x74\x97\xe7\x13\x8f\xa2\x93\xc0\x39\x4e\xa0\xb4\x9c\x28\x14\x84\x72\xcf\x88\x14\x04\x0d\xe6\x46\x0b\x6b\x05\xd3\x92\x4c\xe4\x3d\xb8\x82\x14\xce\x08\xe8\xd4\x54\x05\x50\xb0\x92\x4b\x02\xd6\x5b\x55\x18\x4a\x94\x27\x16\x99\x96\xd4\x30\x47\xc0\x09\xcf\x1d\xb7\x3e\xf7\xce\x20\x6a\xc2\xae\xae\xae\xba\x93\x30\xd4\x98\x86\xf6\x6b\x0f\x75\xe9\x31\x1e\xbf\xf1\x96\xcb\xe1\x3f\xb4\xe5\x5f\x31\x74\x97\xdb\xe6\xf1\xab\xee\x8e\x18\x4c\x30\x1c\x1d\xb7\x65\xed\x36\xd9\x8b\xfe\xf2\x7b\x3d\x5e\x7e\x5f\xce\x97\x5f\x0f\xd9\x63\x02\x07\x09\x36\x63\x5f\xdb\x75\x01\x9b\xcc\x56\x87\x98\x30\x24\x88\xb7\x71\x75\xbc\x68\x7b\x4c\x6c\xd1\x4e\xe8\x6d\x68\x0e\xed\x26\xbb\x40\x0c\x59\xe2\x66\x6e\x95\x2d\x24\xdc\x36\xa1\x3c\xb5\x2d\x33\xa8\xaa\x93\xb7\x21\xc7\xb2\x2d\x5b\xec\x3e\x05\xe2\xec\x1a\x27\x31\x30\x7a\x0b\xf1\x76\xf6\xb4\xd5\x21\x40\x75\xce\x76\x74\x46\xdb\xb4\x38\x47\x4d\xc6\x83\x99\x5a\x80\x13\x22\x31\x41\x3a\xc4\xcd\xd0\xad\xf7\x5d\xf0\xa4\xef\x1d\x81\xaa\xdd\x01\xb9\xfa\x0f\x54\xa0\x5f\x8d\x71\x65\xc1\xee\xca\x7a\xbb\x9a\x7a\xf5\xd5\x6d\x0d\xa9\xbc\xc3\x8f\x55\xe3\x93\x31\xbf\xa8\x3e\x63\x92\xe5\x94\xf5\xc4\x35\x0e\x78\x51\xb1\xaf\xe6\x3d\x77\x5a\xab\x61\x5e\x47\xf1\x77\x4d\x48\xaf\xce\xd9\x2c\xb3\x72\x7f\x4c\x16\xcb\x7a\x7b\xa8\x20\x8c\xa1\xe7\xf5\x7d\x35\xf5\xac\xee\x37\x58\xe2\x79\xa9\xff\x3a\x76\xd8\xcd\x68\x7f\x50\xb2\xcb\x80\xdf\x93\xf6\xe1\x50\x7f\x54\x7e\x70\xae\x4f\x05\xd5\x4d\xe8\x57\xfe\x8b\xee\x13\xb9\x9e\xe7\xb7\xcc\xfe\xfc\xe6\x9b\x57\x37\x90\x76\x9b\x6c\x35\x4c\x75\x65\x9b\x7a\x08\x8a\xdf\xfd\xef\x7f\x7f\xbe\x4a\xf7\x2d\x3e\x7f\xbe\x78\x73\xb0\x16\xd1\xa1\x5b\xfc\xcf\xf7\x23\x72\xd6\x68\xe0\x34\x23\x66\x7b\x17\xba\xc9\x62\x0a\xc7\xdd\xf5\x0b\x07\x0c\x08\x71\x14\xe4\x38\xe0\xeb\x73\xe3\x13\x47\x8b\x09\x42\x7a\x5b\xee\xf1\x92\xfe\x03\xfb\x90\xb0\xfb\x66\xfb\x28\xf9\x7d\x5b\x61\xc7\xfe\x91\x9c\x2f\x1e\x77\x3e\x48\xfc\xef\xdf\x25\xaf\x0f\xf5\x07\x37\x4a\xb7\xa8\x3e\x71\xc2\xb5\xe1\xec\xe5\x77\xb9\xb5\x26\xc2\xbf\xae\xe3\x6d\x9a\xcb\x87\xab\x37\xf1\xfe\x1d\xd5\xe4\x57\xd4\xc8\x3d\xda\xc1\x3d\xd2\xba\xfd\xe6\xf5\xfe\xe3\x6a\xf9\xe3\x6a\xf9\xa7\x77\xc6\x63\xd7\xca\xb4\x98\x3e\x71\xa5\xa4\x70\xf6\xf2\x2f\xdb\x4e\xd3\x6e\xfa\x47\x00\x00\x00\xff\xff\x49\xe2\x9e\x32\xa5\x1c\x00\x00")

func stacksBuildStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksBuildStackYaml,
		"stacks/build-stack.yaml",
	)
}

func stacksBuildStackYaml() (*asset, error) {
	bytes, err := stacksBuildStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/build-stack.yaml", size: 7333, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksBuildkitLocalStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x71\xd0\xfa\x38\xfd\xd8\x52\x04\x01\x81\x3c\x04\x4e\x3a\x04\x9b\x1d\xa3\x76\x81\x01\xc5\x30\xd0\xe4\x59\x26\x4c\x91\xea\x91\x72\x6b\x64\xfe\xdf\x07\x59\xb2\x45\x29\x4e\xd2\x76\x7d\x18\xf2\x12\x1f\xef\xee\xfb\x78\xf7\xf1\x4e\xc2\x9a\x95\xca\x1d\x1b\x01\x2c\x2b\xa5\xe5\x46\x79\x19\x37\xc6\xda\x16\x58\x13\x6f\x0b\xcd\xe0\x9f\x83\x15\xe0\xf1\x31\x06\xb5\x02\xfc\x04\xd1\x9b\xc7\xf7\x1f\xa6\x8b\xfb\xc9\xdd\x3e\x82\x48\x58\xe3\xb9\x32\x48\x32\x82\xfd\xbe\x75\x26\x6b\x3d\x5c\x43\x94\x1e\xb3\xc5\x92\x7b\x1e\xb5\xa7\x1f\x73\x2a\xc5\x5f\xed\x0f\x00\x2e\x25\xa1\x73\x70\x0d\x1f\x21\xf2\xa2\x64\x69\x9a\x25\x87\x3f\x76\x95\x45\xd0\x39\xfe\x04\x12\x97\x55\x7e\xd3\xfa\x2b\x77\x0a\x5d\x59\x02\xee\x3d\x17\x6b\x65\x72\xc8\x2d\x94\x64\x57\x4a\xa3\x03\x6e\x64\x13\x95\x23\xb9\xe4\x94\xaa\x97\xe8\x1a\xa2\x23\xe0\x65\x76\x99\x45\xa3\x23\xcf\xcf\x96\x36\x48\x89\x15\xaa\x23\x81\x86\x2f\x35\x4a\xb8\x86\x15\xd7\x0e\x87\xbe\x5d\x39\xce\x5d\x30\x4a\xa9\x32\xe9\xe6\xc2\xa5\x9d\x5f\xf0\x6f\xe2\xac\xd8\x44\x67\xa0\x3c\x55\x78\x32\x97\x9a\xfb\x95\xa5\xa2\xad\x98\x56\xa6\xfa\x92\xf2\x42\x5e\xbe\x0d\x8b\x65\x78\x81\xae\xe4\x02\x6b\xd8\xcd\x95\x4b\x94\x8d\x82\x56\xa2\x76\x78\x6a\xd7\xff\xbe\x21\x01\x6f\x23\xf7\xfb\xd1\xc8\x21\x6d\x95\xc0\x81\x8e\x25\x6e\x1b\x11\x4b\xe5\xea\xd2\xcd\x1b\xaf\x09\xba\x35\xeb\x6a\xa8\xf9\x12\xb5\x63\x6d\x52\x5e\x96\xac\x9f\xe2\x70\xe0\x76\xce\x63\x31\x2f\x51\x1c\x1d\x4b\x2b\xc3\x9f\x00\xa7\xbe\xb9\xce\x16\x83\x2a\x78\x8e\x0c\xa2\xc2\x2e\x77\x27\xf9\xb3\x6d\x96\x5c\x26\x59\xd7\x5a\x68\xfc\x66\x95\xd6\x33\xab\x95\xd8\x31\xb8\x5f\x4d\xad\x9f\x11\x3a\x34\x3e\xf0\xab\xfb\x18\x10\x0c\x4e\x4a\x4b\x3e\x80\xae\xc1\x4f\x94\x66\x96\x3c\x83\xab\x2c\x38\x85\xba\x07\xde\x0a\xab\x19\x2c\xc6\xb3\xe0\x84\xd0\xd9\x8a\xea\x6a\xc2\xe3\x3e\xb0\x3b\x14\x15\x29\xbf\x1b\x5b\xe3\xf1\x8b\x67\x83\x64\x6a\xab\x34\xe6\x28\x59\x5f\x9e\x2d\x92\x98\xd8\xca\x78\x06\xb7\xb8\xe2\x95\x0e\x6f\xe4\x91\x0a\x65\xb8\x57\xd6\x4c\xd0\xb9\xba\x0c\xdc\xaf\x19\xa4\x12\xb7\x69\x70\x18\x6b\x9b\xbf\x1c\xd6\x56\xee\x9d\xd2\x21\xfc\xd6\xea\xaa\xc0\x03\xfc\xa0\x3c\x45\x6d\x6b\xc1\xd0\x8b\x53\x7b\xd2\xfe\xd0\xeb\x5d\xa5\xa9\x7f\x33\x21\x7b\x07\xae\x5a\x36\xa9\x9e\x0d\xfe\xa6\x91\xf9\x94\xe1\x96\x53\xaa\xd5\x32\x25\x6e\xc4\x1a\xa9\x1e\x1b\xe7\x99\xb5\xc9\x9e\x4d\x44\x95\x39\x13\xd8\xb7\xf6\x23\x7a\x63\xfb\x4c\xec\xc0\xdc\x3d\xcc\xa3\x45\x1a\x77\xec\xce\x58\x57\xce\x23\xbd\x53\xe4\x3a\x15\x10\x3a\xcf\xc9\x1f\x7d\x6e\xf4\x67\xbe\xeb\x6e\xe7\xc4\x1a\x65\xa5\x91\xa6\x0d\x5a\x23\xa1\xf8\x64\x1e\x9d\xd1\xc4\x6f\xc4\x05\xce\x90\x94\x95\x73\x14\xd6\x48\xc7\xe0\xa2\xd3\x7f\x23\x8a\xde\x4b\x6d\x7a\x3a\xe1\x65\x5f\xd8\x2d\xda\xc4\x4a\x64\xf0\xf6\xd7\xec\xcc\xf5\x87\x9b\xf3\xc9\x73\x1d\x98\xbf\x51\x08\x31\xac\xad\x6b\x5a\xd1\x7f\x55\x5f\xa7\x0b\xbf\x2b\x91\xc1\xad\x22\x14\xde\xd2\xee\x1c\xb9\xa1\x62\x5e\x41\x1c\x0a\xe8\x35\x84\xd0\xff\x95\xd4\xcf\x2b\x6d\x00\xf2\x40\x63\x42\xee\xf1\x09\x58\x2f\x30\x54\x62\x5b\x75\x83\x83\xaa\x17\x95\xf6\xaa\xd4\x18\x1b\x2b\xd1\xb5\x95\x77\x56\x70\x1f\xd7\xfb\x17\xfd\xf7\xed\x90\x30\xc3\x7f\x5b\x21\x9c\xf2\xc1\xe0\x5a\x8c\x67\xf1\x1f\xf7\xf3\xc5\xdd\x94\x5d\x65\x3f\xaf\x2c\x6d\x7a\xc7\x1f\xa6\xf7\x7f\xc6\xe3\x87\xe9\xf4\x6e\xbc\x60\x6f\x1e\xe7\x0f\xe3\xdf\xef\x16\x7f\xdf\xdc\xde\xbe\xbf\x9b\xcf\xf7\xc3\xa5\xc3\x80\xeb\x52\x19\x4c\x0f\x8c\xd9\x2f\x49\x96\x5c\x7c\xf7\x62\x3a\xe4\xf8\x01\x3b\xe3\xab\x86\xf6\x4b\x57\x0b\x08\x6d\x7e\xfc\x92\x3c\x33\x3e\x5e\x92\xf5\xcb\x44\x1b\x65\x0f\xb6\x56\x8f\x7d\xf0\xa5\xe3\xb1\xa8\x3f\xf8\x1a\xec\x4f\x15\xba\x7a\xd8\xb5\x44\x62\xd8\x72\x52\xb5\x4a\x19\xb4\x02\x7f\x62\xef\x13\x19\xfd\x1b\x00\x00\xff\xff\x22\x23\xba\x31\x00\x0c\x00\x00")

func stacksBuildkitLocalStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksBuildkitLocalStackYaml,
		"stacks/buildkit-local-stack.yaml",
	)
}

func stacksBuildkitLocalStackYaml() (*asset, error) {
	bytes, err := stacksBuildkitLocalStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/buildkit-local-stack.yaml", size: 3072, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksCertManagerStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xc1\x6a\x32\x41\x10\x84\xef\x3e\xc5\xb0\x08\x82\x30\xfa\xff\xb7\xb0\xb7\x25\x48\x4e\x09\x42\x72\x0f\x93\xb1\x32\x0e\x99\x9d\x5e\xba\x7b\x4d\x44\x7c\xf7\xe0\xba\xd1\x11\x72\xc8\xb1\xab\xbe\x6a\xaa\x04\xbc\x8b\x1e\x52\x4f\x8c\xf1\x60\xb5\xad\xcb\x2e\x80\x4f\xb7\x31\x21\xd1\x9b\x4b\xaf\x1d\xb8\x8d\x22\x91\xb2\x9c\x75\x6b\x66\xf3\x01\x1f\xe9\xc5\xc7\x9d\x2c\x22\x2d\xe7\xb3\xab\x8d\x2f\x45\x1e\x32\xcb\x98\x03\x43\x04\x52\xd8\x9e\xf2\x7b\x0c\xad\xeb\x4a\x51\xe0\x19\x5a\x2a\xd8\x21\xeb\x2d\x72\x2e\x5c\x48\x1d\x6d\xc6\x33\xb6\x2e\xa0\x36\x15\xbb\xec\xb7\xe0\x65\xb9\xc8\x7a\xca\xca\x94\x12\xb8\x9e\x1e\x5e\x9a\x87\x63\x75\xcd\xac\xfb\x94\xd6\x94\xa2\xdf\xd7\xa6\x49\x9f\x6e\x2f\x83\xe7\x38\x5c\x16\x97\xbf\x46\xc9\xda\x04\xb7\x01\x5b\x24\x78\x8d\x94\x6d\x76\x2d\xa4\x73\x1e\x23\x31\x3d\x3c\x35\x8f\xab\xe7\x75\x73\xbf\x3a\x5e\x42\x3e\xf5\xa2\x60\xcb\x10\xea\xd9\xe3\x6f\x29\xe7\x5b\xd8\xad\x6a\xf7\xef\xbf\x15\x4a\x3b\xb0\x1d\xaa\x8f\xc0\xef\x9b\x4f\xa1\x33\x7c\xb3\x79\xa8\x4e\x41\x49\x74\x03\xfe\x99\x53\x29\xf7\xa8\x26\x93\xef\x00\x00\x00\xff\xff\xb5\x0f\x05\x7e\x14\x02\x00\x00")

func stacksCertManagerStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCertManagerStackYaml,
		"stacks/cert-manager-stack.yaml",
	)
}

func stacksCertManagerStackYaml() (*asset, error) {
	bytes, err := stacksCertManagerStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/cert-manager-stack.yaml", size: 532, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksGlooStackSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xce\xcf\x4b\xc3\x40\x10\xc5\xf1\xfb\xfc\x15\x4f\x2c\xac\x1e\xb6\x7b\x2f\x45\x28\x12\x6f\xfe\x00\x3d\x0b\x93\x74\xba\x86\x4e\x36\x92\x99\x28\xc1\xf8\xbf\x4b\x0c\x3d\x7e\x0f\x8f\xcf\xbb\xbe\x4a\x75\x5b\x52\xcd\xf6\x41\xd4\xb0\xe3\x0e\x59\xfb\x3e\x9a\x73\x73\xde\x4e\xdc\x29\xf6\x7b\x54\xcf\x0f\x74\x1e\x6b\x19\x8a\xb8\xd8\x8e\x80\x8e\x4b\x7b\x12\xf3\x1d\x66\xda\xdc\x2c\x93\xc6\x15\x6d\x31\x67\x55\x64\x76\xf9\xe6\x09\xb1\x20\x6c\x7e\x9e\x0e\x8f\xd5\xeb\xcb\xe1\xbe\xfa\x0d\x88\xf1\x8b\x75\x14\xc3\x36\xfd\x3b\x6b\xad\x50\x8c\xc7\x61\x8a\xc3\x58\x30\xc3\xe4\x88\x60\xe9\x3d\x01\x40\xca\xe1\x96\xc8\xa5\xfb\x54\x76\x59\xf8\xdc\xbf\x5d\x0a\x27\x56\x13\x5a\x2e\xfe\x05\x00\x00\xff\xff\x9e\x2f\xe5\x9e\xcd\x00\x00\x00")

func stacksGlooStackShBytes() ([]byte, error) {
	return bindataRead(
		_stacksGlooStackSh,
		"stacks/gloo-stack.sh",
	)
}

func stacksGlooStackSh() (*asset, error) {
	bytes, err := stacksGlooStackShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/gloo-stack.sh", size: 205, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksGlooStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x20\xdc\x05\x6e\x0b\x54\xb2\x93\xdb\xde\xee\x0a\xb8\x87\x34\xed\x16\xc5\xa5\x59\x23\xc9\xf6\xe5\x70\x10\x68\x69\x22\xf3\x42\x91\x5a\x92\x72\xe2\xeb\xf5\x3e\xfb\x81\x14\xf5\x9f\xb6\xe5\x38\x89\xd3\xb4\x79\x68\x6d\x91\x1a\x0e\xe7\xf7\x9b\xe1\x0c\x49\x5f\xe7\x33\x10\x0c\x14\xc8\xe0\x00\xa1\x14\x33\x72\x05\x52\x05\xe8\xbf\x07\x08\x21\x64\xfe\xc1\x19\xf9\x04\x42\x12\xce\x02\xfd\x19\x6e\x15\x30\xfd\x4d\xfa\xd7\xbf\x48\x9f\xf0\xf1\xe2\x70\x06\x0a\x1f\x9a\xce\xd7\x84\xc5\x01\x3a\xc9\xa5\xe2\xe9\x39\x48\x9e\x8b\x08\xde\xc2\x15\x61\x44\x11\xce\x4c\x97\x14\x14\x8e\xb1\xc2\x81\xf9\x86\x10\xc3\x29\x04\x48\x82\x52\x84\x25\xd2\x4f\x28\xe7\xbe\xe4\x94\xfb\x84\xdb\x1e\x98\x31\xae\xb0\x16\x20\xcb\x97\x10\x1a\xcd\x81\xa6\xbe\x9c\x8f\xe7\x9c\x5f\x8f\x02\x14\x89\xd8\x23\x4c\x2a\x4c\xa9\xed\x43\xf1\x0c\x68\xe3\x0d\x2d\xb9\x1e\xc8\x3c\x96\x19\x44\x65\x87\x44\xf0\x3c\x0b\x90\x63\x7c\xad\x61\x43\x4e\x31\xc7\x8b\xa6\x1c\x33\x1c\x91\xea\x1f\xad\xa6\x53\x22\x55\xd5\x9c\xd1\x5c\x60\xda\x19\xdf\xe8\x30\xe7\x42\x9d\xb5\x87\x40\xc8\x43\xd5\xbb\x32\xe2\x19\x04\xc8\x74\xc9\x70\x04\xb1\x7d\xbe\x28\x51\x59\x1c\xb6\x9f\x34\x04\x79\xd6\xbc\x55\x17\x23\x10\xc4\x02\xe2\x00\x29\x91\x43\xf3\xb1\xe2\x02\x27\xd0\x78\x6e\xfe\xf1\x3c\xef\xb1\xc9\x90\x60\x05\x37\x78\x29\x7d\xfb\xa1\xc4\xc3\x5f\x1c\xed\x42\x09\x17\xda\xab\x06\x70\x62\xfe\xbe\xe8\xed\x80\xdc\xb6\x38\x11\x2f\x67\xb3\x11\xf1\xe4\xa6\xee\x42\x58\x92\x53\x2c\xaa\xb7\x07\x73\xe1\x68\x33\x17\x8e\xd6\x82\xbe\x82\x23\xfb\xe2\xc2\x82\x08\x95\x63\xaa\xf5\x21\x11\xf4\x28\xf1\xb0\x7c\x58\x47\x86\x4f\x85\x62\x17\x85\x62\x0e\x4e\xb4\x3b\x38\xa9\xd1\x99\xdc\x46\x86\x2c\xa4\x83\x21\x6d\x21\x3b\x07\x0d\x47\xc8\x70\x06\x8c\xa7\x13\x2e\x04\xcf\x15\x28\x3c\xa3\x4f\x89\x1e\xe7\x5a\xa9\x4b\xad\x94\x83\x1a\x75\xa3\x93\x16\x8d\x09\x6d\xa4\x84\x50\x0e\x4a\xd4\x02\xbe\x41\x3a\x64\x82\xdf\x12\xb8\xbf\x4c\x62\x87\x24\x61\x2a\xf8\xad\x6b\xb9\x30\xcf\x9d\xd0\x5b\xe5\x37\xc2\x9e\xdd\x3a\x60\xcf\x1a\xc3\x7d\x4b\x88\xe7\x99\x54\x02\x70\xfa\x24\x30\xff\xc3\x2a\xe3\x80\xbd\x6c\x72\x22\x5f\x4d\x62\x23\xf6\xb9\x6b\x15\xc8\xdb\xc3\x7e\x8b\xf0\x1b\xa0\x9e\x14\x07\xde\xeb\xd7\xd6\x10\xc1\xb4\xaf\x65\x43\x31\xa7\xcd\x94\x48\xd6\x50\x22\x69\x68\xf1\x2d\xf1\x02\xe7\x6a\x1e\x71\x76\x45\x12\xe9\x03\x53\x20\x32\x41\x24\x3c\x24\x3f\xd6\x8f\xe2\xa4\xca\x71\xae\xe6\x27\x46\x49\x07\x4f\xea\x46\x27\x49\x1a\x13\x5c\xcb\x10\x0f\xe1\xc8\xc1\x8f\xfa\xf5\xa7\x42\x8e\x26\x2f\x16\x4d\xf4\x2b\x95\xd6\xc0\xfd\xc3\xe7\xb3\xe3\x8f\xef\x2e\xa6\xc7\x27\xef\xbe\xd8\x86\xee\x16\x00\xce\xac\x13\x6f\x83\x7b\x26\xa0\xb3\xb3\xd0\xe9\xe3\xdd\x00\x49\xe6\x6a\x14\xa0\xd1\x64\x34\x6c\x3e\xb6\x28\x38\x8e\x22\x9e\x33\xe5\x9c\xd4\x26\xdd\xcb\x0d\x8d\x6d\xa7\x33\x6a\xcc\x67\xb4\x71\x42\xaf\x47\x2d\x1b\x37\x06\x63\x25\x24\x0e\xcb\x3f\xba\x11\x62\x22\x23\xbe\x00\xb1\x7c\x34\x4b\x74\x47\x5c\x67\x8e\x95\xb1\xef\xc1\x38\xd1\xda\x34\x78\x04\x5a\xb4\xc6\xdb\xc8\x8c\xbd\x1a\xc5\x6b\x66\xc9\x8f\x66\x9a\xd6\xa8\x77\x30\x90\x5d\x04\x69\x2e\x15\x88\x73\x6e\x0b\xbb\xa6\xd9\xc4\x0c\x47\xbe\x0e\xe9\x5c\x90\xff\x98\x29\xd5\x8b\xa9\xd3\x6e\xa5\x86\xd7\xf9\x0c\x3c\x61\x17\x56\xef\x06\xab\x68\x0e\xa2\x5e\x8c\x3a\xd6\x75\x5b\xb8\xb6\xb2\x56\xa3\x86\xc2\x65\xde\xa1\x06\x5e\x6d\xe2\x43\x1b\x66\x45\x4e\xcb\x65\xce\xd3\xb6\x30\xe9\x94\x0c\xd0\x3f\x47\xa3\x7f\x59\x31\xe5\xbc\xcc\xd3\x8c\xc7\x72\xf4\x0a\x8d\xca\xfd\x96\xe2\x73\x24\x40\x99\x8f\xc0\xe2\x8c\x13\x56\x7c\x29\x16\xc6\x14\x67\xe6\x5b\x85\x98\xac\x24\x2f\x40\xcc\x8c\xd4\x04\x94\xee\xa2\x57\x6d\xfd\xbf\x31\xa0\xed\xf5\xa8\x38\x6a\xfb\x7b\x65\xce\xe7\xa5\xb9\xc2\x8a\x7f\xed\x38\x36\xb3\x28\x37\xa6\x55\xd9\x54\x35\xbf\x40\x79\x16\x63\x05\x88\x48\xc4\x00\x62\x88\xd1\x15\x17\x48\x2a\xac\x72\x69\xdb\xe4\x20\x10\x35\x0d\x04\x60\x05\xfa\x53\xf1\xa2\xfe\x14\x03\x05\x05\xfb\x80\xd8\xb8\xaa\xce\x43\x8d\x5a\x5f\x3d\xba\xae\xd4\xdf\x8d\x72\x64\xb2\xff\xf2\x51\x5c\x65\xff\xab\xdd\xb1\x07\xdc\xbe\x3c\xb2\x8a\xac\x02\x70\xfc\xd5\x07\xd6\x96\x43\x9a\x98\xe9\xac\x78\x36\xf9\xea\xab\x51\xbb\xc0\xd5\xa2\xec\xd6\x97\xfe\xd8\x28\x6c\x1e\xc6\xad\xf7\xc7\x89\xf2\xfc\xcf\xcb\xe5\xf3\x22\x83\x13\xf1\x72\xb6\x0f\x1a\x9c\xf7\xee\xd9\xdf\xca\x5a\x5b\x7a\xe8\xb0\x14\xe8\xc9\xad\x9e\x65\x2a\xfe\xcc\x22\x72\xfb\x4c\xca\x8d\x5c\xe7\xa0\x51\xe3\xd0\x38\x64\x7a\x84\x18\x7b\x17\xa5\xcb\x83\xf3\xed\xd4\x7b\x85\x0a\xd6\x99\x26\xf3\x91\xb0\x04\xa9\x39\xa0\x18\xae\x70\x4e\x15\xe2\x0c\xa4\x7f\x67\x0a\x0f\x99\x8f\xbf\x38\xba\xcf\x29\xed\xaa\xeb\x5a\xff\x7a\x43\x58\x4c\x58\xb2\xbb\x9b\xad\xa9\x26\xbd\x59\x31\x88\x77\x87\x3d\x3a\x87\xb7\x3d\x40\xd5\x7e\x68\xcb\x76\x99\xcf\xfe\x0d\x91\xaa\x5c\x6d\xe5\x2e\xc4\x96\x3b\x62\x03\x24\x6d\xb3\xa3\x24\x38\x85\x73\xb8\x2a\x67\xef\x0e\x9a\x43\x0a\xfc\x92\xc5\x6b\xf0\x1e\x1a\xa8\xef\x99\x48\xce\x72\xf6\x19\x13\xe9\xc1\xe0\x5f\xb7\x2f\xf0\xc4\xe1\xef\xac\xd4\xcf\x18\xfd\x81\x61\x64\x7b\xe0\xdd\xc9\xce\xd3\xc5\xbd\x55\x1f\x7d\x07\x7c\x88\xa4\xc1\x9b\xef\xfb\x8c\x42\xae\xba\xf7\xe9\xb2\xd0\x59\xdf\x3d\x67\x36\x0e\xe6\xd0\x0e\x11\xe8\xab\x59\x7a\xdc\x75\xe2\x77\xf8\xb7\x86\x7f\x6d\xc1\x3d\x94\x00\x2b\x0f\x0a\xfb\x45\xd7\xd8\xde\x6d\xee\x5f\xd7\x5e\x8f\xb4\x39\x9c\xf3\xda\x97\xbf\x57\x18\xe0\x9e\x2e\x15\xdc\xe9\x4c\xb1\x79\xe3\x44\x93\xf1\x38\x8e\x05\x48\x19\xa0\x51\x10\x8c\x1a\xcf\xa7\x5c\xa8\x00\xfd\x32\xf9\x65\x62\x1f\xce\x95\xca\xac\x35\x02\xf4\xb9\x9c\x48\x2e\xc1\x5c\x44\x9c\x0a\xae\x78\x80\xec\x53\x29\x69\x80\xae\x30\x95\x25\x96\xc6\x38\xad\x1b\x25\x9e\xdb\x70\x2b\xdc\xf5\x11\x70\xf3\xa4\xa4\xcf\x0b\xbb\x9f\x7e\xfa\xeb\x5d\xb1\x6b\x5c\xb8\x19\x0c\x5d\x0b\xb0\x17\xa8\xd8\x7b\x0f\x53\x9c\xf5\xc0\x6b\x9d\xce\x17\x77\x93\x3e\xda\x6e\x03\xb1\x02\xb6\xe0\x4b\xaf\x75\xf1\x68\x37\xd0\xd6\x1d\xf0\xa3\xce\xf8\x24\x5e\xe1\xf5\xb5\xe2\xf6\x4d\xa3\xa6\xbf\xc4\x29\x2d\x7f\x0e\x65\x34\xe5\x31\x34\xf7\xf7\xa2\x22\xf4\x75\x43\xa8\xfe\xd3\x43\x8d\x3e\x7f\xf6\xa7\x3c\xd6\x10\x7c\xf9\xe2\xd7\x5f\xcc\x64\xbf\x7c\x69\xee\x00\xf6\x77\x2d\x0b\x2c\x74\xc4\xfd\x8b\x44\x0b\x4c\x73\xb3\x4b\xa4\xe6\x80\xae\x61\x69\xb6\x89\xf4\x67\xc2\xbc\x14\x52\x2e\x96\xe8\x36\x96\x28\xc2\xd1\x1c\xd0\x8f\x99\xe0\x66\x05\x18\x6b\xcb\x8c\xb3\xeb\x64\x7c\x1b\xcb\x71\x31\xa5\x84\xbf\x6c\x0d\xa1\x07\x68\x69\x6a\x95\xfb\x5f\xd7\x4e\xb5\xb6\x52\xfb\x48\x14\x36\xb6\xb6\x5e\x20\x72\x85\xb8\x40\x3f\xfe\xa0\x89\xee\xeb\x0e\xf2\x65\xf9\x4d\x87\xfd\x82\x2a\x2f\x8b\x8e\x8d\x4e\xcd\x07\x75\xbf\xbe\x85\x3b\x17\x1e\xeb\xfc\xc2\x6f\x32\xc6\x97\x8b\xc8\xb7\x6f\xf8\x94\x47\x98\x06\xbf\xfe\xfa\xf3\xcf\xad\xf9\x62\xaa\x42\x3d\x74\x58\xc8\xb8\x8d\x65\x68\xdf\x68\x75\x8b\x38\x63\x10\xa9\x50\x91\x14\x78\xae\x02\xf4\xda\x9f\x4c\x26\xb2\xd5\x87\x72\x1c\x87\x58\x4a\x92\xb0\x14\x98\x6a\x43\x57\xa9\x1e\xee\xa0\xac\xe6\xa1\xbd\x95\xd0\x95\xee\x21\x3a\x0b\x57\xb6\xea\xf6\xb2\xb1\xdf\x66\xec\x60\x23\x90\xb3\x11\x21\xc9\xa3\x6b\x50\xe1\x86\x5e\xb5\x98\x21\xf3\x5b\x29\x24\xe3\x42\x85\x86\xe2\x01\xea\xd9\x40\x47\xc0\xa3\x30\xd3\x91\x2e\xe2\x34\xe4\x59\x11\x9f\xeb\x60\x58\xfc\x95\x5b\x1c\xa1\x45\x8e\x70\x56\xf5\xed\x0c\xac\xa2\x2c\xbc\x06\xc8\x30\x25\x0b\xe8\x09\x52\xcb\x0c\x02\x74\x71\x79\xfe\xe1\xe4\x32\x7c\x7b\x76\xd1\xf6\x16\xd0\x54\x55\x61\xcc\x64\xa8\x94\x0d\xb7\x05\x89\xfd\x4f\x7a\x02\xd2\xc7\x51\x04\x52\x9e\xf2\x24\x01\xe1\x03\xc3\x33\x0a\x71\x93\xe6\x4a\xe0\x88\xb0\xe4\x4e\x3e\x63\xdf\xad\x54\x8a\x97\x0c\xa7\x2d\x57\x3c\x68\x42\x23\xc3\x22\xce\x76\x0f\x35\x48\x58\x4c\xf2\xfd\xf9\xf4\xa4\x3d\x3d\xac\x20\xa4\x24\x25\x2a\x2c\x2b\xb6\x9e\x7d\x12\x91\x45\x61\x79\x94\xd0\x96\xec\x15\x61\x33\xd4\x5d\x02\xf4\xf9\x6e\x0e\xd0\x1c\x2d\x5a\x35\x85\xb8\xab\x17\x1d\xd8\x13\xc7\x29\x61\x2d\x2b\x19\xb8\x42\xca\x93\x30\xc3\x6a\x1e\xa0\x71\x0c\x8b\x31\xcb\x29\x6d\x99\xd2\xe1\x06\xeb\x5d\xa4\x72\x8c\xc3\xa3\x9f\xfd\x89\x3f\xf1\x0f\x3b\x1d\x9a\xa4\x3f\xfc\x75\x32\x99\x14\x40\xff\x08\x69\xa6\x96\x16\xef\xa8\x5c\x61\x7d\xbd\x36\xbc\x44\x2f\x5e\x20\x4c\x29\xbf\x91\xe8\x2a\xa7\x14\x15\xf7\x22\xf4\x2a\x81\x59\x02\xe8\x07\x6d\xe8\x57\xc5\xab\x28\xf8\x7b\xc5\x48\x1b\xc9\xa7\xc5\xf9\x5d\x8b\xac\x65\x32\x66\x79\xda\xca\x06\x36\xdd\xca\x73\xae\xfa\x77\xb8\xb7\xba\xd5\x8e\x48\x9d\x48\x1d\xd4\x66\xec\x5d\x44\xd6\x04\x3c\x68\x1a\xba\x13\x57\xca\x68\x12\xa0\xcb\x93\x69\x99\x3d\x01\x85\x48\x71\x11\xac\xd2\x74\x7d\x39\x72\xff\x16\xda\x25\x9f\xd9\xa1\xc4\x69\xa6\xaa\x1d\xe3\x66\xb6\xb2\xa8\xb4\x51\x58\x24\xa0\x7a\x05\x87\xdb\xc0\xa5\x4e\x3a\xa0\x77\x44\xd6\xf9\x6e\x47\x66\xb3\x61\x93\x4c\xb9\x1a\xc8\xa1\x46\xeb\x74\x0d\x90\x5e\x21\x6c\x5b\x11\x32\x4f\x39\x8e\xdf\x60\x8a\x59\x64\x13\x86\x01\xd4\xc0\x59\x26\xc7\x2d\x7e\xbc\x85\x8c\xf2\xa5\x4e\x1a\xf6\xec\x44\x7a\x45\xcb\x28\x89\xb0\x0e\x54\x2b\xed\x97\x62\x15\xcd\x4f\x7b\xe7\xe3\x3d\x25\x14\xa4\x19\xc5\xaa\x91\x22\xbb\xd2\x5a\xd7\x41\x7b\x4f\x54\x5b\x49\x64\x7f\x51\x50\x6f\x60\x9c\x75\xe7\x8b\x8a\xa4\x4d\x61\xc2\x7a\xe9\x22\x49\xcd\xaf\x0e\xfe\xcc\xf1\xd2\x27\x7c\xac\x2b\x4f\x8f\x70\x93\x1d\x07\x13\xff\x68\xe2\x1f\xb5\x94\x31\xdd\xa7\x39\xa5\x53\x4e\x49\xb4\x0c\xd0\x87\xab\x33\xae\xa6\x02\x24\x30\xd5\xea\xd9\xb3\x7a\x69\x53\xc7\x72\x5c\x34\xfc\x99\x83\x74\xa5\x6b\x51\x96\x07\xe8\xf5\x64\x92\xf6\x5a\x8a\xf4\x3e\x40\x47\xaf\xff\xf6\x91\xb4\x17\x20\x88\x72\x41\xd4\xf2\x84\x33\x05\xb7\xbd\x3c\x4f\xe7\x10\xbf\x33\xba\x3c\xe7\x5c\xfd\x46\x28\xc8\xa5\x54\x90\xf6\x7e\xeb\x8d\x4c\x52\x4c\xf9\xcd\x54\x90\x05\xa1\x90\xc0\x3b\x19\x61\x6a\xca\xe0\xf6\x56\x40\x25\x38\x67\xc7\xf2\x8c\x33\x2d\xd8\x29\xce\x74\xf8\x43\xea\xc2\xe8\x70\x72\x38\xe9\xae\x7c\x11\xce\xf0\x8c\x50\xa2\x48\xdf\x42\x08\xc5\x82\x67\xae\x74\xf6\xf8\xf4\xb4\xf5\xb4\x15\x9b\xca\x4e\x15\x03\xa6\xfd\xa0\x5f\xfc\x39\x16\x08\x2b\xcf\x19\x5e\x50\x51\x0b\xf6\xb3\xef\x42\xce\xf4\xf7\xb7\x61\xe5\x5c\x3d\xa5\xcd\xea\xfe\x9b\xe0\xa9\x2b\x7f\xbe\x22\x40\xe3\xc6\x66\x9a\xa3\x75\x6a\x12\x92\xd2\x87\x7c\xd6\xfa\x19\xcc\xbe\x62\x4e\x6f\xb3\xb0\x8e\xa6\x5b\xaf\x2f\xbb\x07\x9f\x96\x36\x3b\xc7\x9f\x4e\x15\x3f\x28\x04\xf5\x2a\xff\x6d\xa3\x90\xdd\xdd\xb9\x8f\x40\xd4\xd0\xe5\x7b\xa4\xa8\xfe\x9e\xa6\xff\xee\xcd\x75\xf7\x9a\x51\xde\x97\xc7\x77\x26\xb1\xc5\x34\xee\x29\x48\xf4\x14\xd8\x2a\xcd\xec\x75\x6f\xa4\x9a\x77\x09\x3f\x3d\x6d\x56\x05\x21\x2c\x12\x73\x89\xcc\xf3\x62\x22\x75\xcd\xe7\xcd\xb9\xf2\x04\x48\x85\x85\xaa\xee\xa5\x15\x7f\x3d\xbf\x19\xe2\x35\x6b\x7c\x66\x9d\xc7\x6c\xf6\x97\x55\x4a\x3c\xec\xf8\xfd\x78\xec\xce\x23\xed\xbe\xf6\x8d\xc0\x59\x06\xe2\x1e\x83\xb9\x9b\x3b\xfb\x0a\xe8\xf7\x13\x90\x51\xb1\x3f\xe2\xea\x7a\xf6\xee\x32\x7c\xf3\xe1\xec\x6d\x78\xf1\xee\xfc\xd3\x87\x0e\xbb\x86\xa4\x7c\xad\x32\xb4\x69\xcf\x46\xd9\x59\xc9\x5b\x99\xf2\xf5\xc5\x36\x2b\xd1\xae\x58\x39\x58\xee\x82\xd3\x3c\x85\x8f\xda\x7f\x7b\x13\x49\xf5\xd3\x82\x82\x63\x50\x51\xb1\x5f\xef\x1c\xd3\x71\x86\x52\x0b\xef\x38\x7c\xb5\x85\xd4\xb5\xf6\xf0\xf3\x99\xb5\x43\xeb\x65\xec\xa0\x19\x53\x13\x7e\x59\x7e\xb3\x14\xfa\x7f\x00\x00\x00\xff\xff\xc4\x13\x30\x9c\x67\x4e\x00\x00")

func stacksGlooStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksGlooStackYaml,
		"stacks/gloo-stack.yaml",
	)
}

func stacksGlooStackYaml() (*asset, error) {
	bytes, err := stacksGlooStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/gloo-stack.yaml", size: 20071, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksGlooValuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8d\x31\xae\x02\x31\x0c\x05\xfb\x9c\xc2\x67\xf8\x65\x2e\xf0\x25\x2a\x2a\x7a\xef\xe6\x11\x45\x32\xf1\x2a\x36\x0b\xb9\x3d\x0a\xd2\x2a\x14\x48\xb4\x33\xf6\xbc\x54\x6c\xd5\x1d\xad\xc7\x40\x84\xca\x8b\x20\x45\xba\xb2\x18\x02\x51\xc8\xec\x78\xf0\x5b\xae\x68\xfe\x8f\x7a\xd2\x65\xfa\xfb\x96\x1b\x27\x4c\xb0\xb3\x94\xc4\x5e\xb4\x4e\x96\xb0\x89\xf6\x1b\xaa\x8f\x0c\x91\x39\xbb\x1d\xfa\x58\x38\x37\x7d\x16\xd8\xb8\xf8\x20\xfd\xf2\xf7\xe5\x67\x80\x90\x45\x35\xfe\xaa\xbf\x02\x00\x00\xff\xff\x58\xaa\xe0\xf4\xde\x00\x00\x00")

func stacksGlooValuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksGlooValuesYaml,
		"stacks/gloo-values.yaml",
	)
}

func stacksGlooValuesYaml() (*asset, error) {
	bytes, err := stacksGlooValuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/gloo-values.yaml", size: 222, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksLinkerdStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xca\x2f\x2d\x49\x2d\x2a\xb6\xe2\x52\x50\x28\x4f\x4d\x02\x51\x0a\x0a\x60\xb1\x62\x08\x5b\x57\xa1\x24\x1f\xc2\x02\xb1\x13\x0b\x0a\xac\x14\x72\x32\xf3\xb2\x53\x8b\x52\x74\xcb\x53\x93\xa0\x12\x0a\x0a\x05\xf9\x45\x25\x56\x0a\x16\x06\x16\x26\x5c\x80\x00\x00\x00\xff\xff\x1b\xbf\x1e\x08\x52\x00\x00\x00")

func stacksLinkerdStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksLinkerdStackYaml,
		"stacks/linkerd-stack.yaml",
	)
}

func stacksLinkerdStackYaml() (*asset, error) {
	bytes, err := stacksLinkerdStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/linkerd-stack.yaml", size: 82, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksRioAutoscalerStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xcf\x4a\xc4\x30\x10\xc6\xef\x3e\x45\x0e\xc2\x82\xd8\xee\xea\x69\x5b\xe8\xa1\x48\x8f\x8a\xe0\x03\xc8\x34\x99\x86\x60\x92\x09\x99\xb4\x28\xe2\xbb\x4b\x53\x9a\xed\x2d\xdf\x9f\xcc\xf7\x63\x8c\x8b\x91\xc8\xed\x9d\x10\x30\x27\x62\x09\x16\xe3\xaa\x84\xd0\x96\x46\xb0\x9f\x01\xa3\x33\xcc\x86\x3c\x6f\x7e\x25\x4e\x0f\x22\x90\xe2\xd3\x4d\x4a\xf2\x93\xd1\x0e\xc2\xd1\x2c\x07\xeb\x68\xa8\x96\x90\x92\xc5\xda\xd0\x79\x1f\xcd\x5b\x28\xc9\x39\xf4\x0a\xd2\xba\xb0\xfd\x36\x0e\x34\xb6\x82\x53\x24\xaf\x1d\xf9\x2f\xfc\x79\x6a\x9a\xe7\xf3\x81\x50\xe1\x92\xab\xe8\x97\x9d\xea\xad\x7f\x1d\x3e\xde\xfb\x97\xa1\xbb\xff\x2d\xef\xbf\x1c\x06\x8a\xa9\xd0\x5f\x2f\xed\xf5\xf2\x88\xdf\x81\x18\xbb\x09\x2c\x63\x0e\x20\xea\x52\xa9\x2a\x85\xe3\xac\xff\x03\x00\x00\xff\xff\xf1\x2a\x75\xc2\x1e\x01\x00\x00")

func stacksRioAutoscalerStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksRioAutoscalerStackYaml,
		"stacks/rio-autoscaler-stack.yaml",
	)
}

func stacksRioAutoscalerStackYaml() (*asset, error) {
	bytes, err := stacksRioAutoscalerStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/rio-autoscaler-stack.yaml", size: 286, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksRioControllerStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x1a\x5d\x6f\xe2\x46\xf0\x3d\xbf\x62\x85\x4e\x3a\xe9\x24\x93\x5e\x7b\x0f\x15\x6f\x5c\x42\xaf\x91\xf2\x81\x20\x39\xb5\x4f\x68\xb1\x07\x33\x65\xbd\xeb\xee\x8e\xe1\xb8\x34\xff\xbd\x5a\x1b\x8c\x3f\x16\x43\x08\xe4\x7a\xbd\xbc\x04\xcf\xcc\xce\xd7\xce\xcc\xee\x8c\x3d\x4b\xc6\xa0\x25\x10\x98\xce\x19\x63\x11\x97\x38\x01\x43\x1d\xf6\x8f\x77\xc6\x18\x63\x3c\xc6\xcf\xa0\x0d\x2a\xd9\x61\xf3\xf7\x29\x68\x86\x32\xe8\xb0\x5b\x1e\x81\x89\xb9\x0f\x29\x2c\x02\xe2\x01\x27\xde\x49\x9f\x18\x93\x3c\x82\x0e\x7b\xf3\x78\xdb\xbd\xe9\x0d\xfb\xdd\x8b\xde\xd3\x0a\x21\xf8\x18\x84\x59\x93\x31\x8d\xaa\xed\x73\x22\x01\x6d\x54\xe7\x68\x3c\xb3\x34\x04\x51\x87\xb5\x48\x27\xd0\x4a\xc9\x3c\xaf\xae\x8a\x1e\x73\xbf\xcd\x13\x9a\x2a\x8d\x5f\x39\xa1\x92\xed\xd9\xaf\xc6\xf2\x28\x29\x79\x21\x12\x43\xa0\x07\x4a\x34\xa9\xa9\x51\x79\x7e\x46\xe9\xf1\x20\x42\x99\x62\x75\x22\x60\xa5\xa8\x67\x65\x7f\xd2\x2a\x89\x73\xcd\x3d\xd6\x6a\xad\x7e\x6a\x30\x2a\xd1\x3e\x14\x71\xef\xd6\xc8\x39\xe8\xb1\x03\xe1\x31\xa9\xe4\x60\xb5\xf0\x61\x70\xbd\xcf\xda\xb7\xef\xde\x36\x68\xc3\x63\xd4\x10\xa2\x21\x5d\x74\x47\x93\x8e\x3c\x46\x03\x7a\x8e\x3e\x98\x9d\xda\x3a\x25\x06\x11\x1a\xbb\x1d\xcf\x94\x1b\x25\xc4\x09\x65\xb8\x80\xf1\x54\xa9\x99\xaf\xe4\x04\xc3\x24\x5b\x9e\x6b\xe2\xb1\xd6\x9c\x0b\x0c\x76\x53\x3e\x4b\x67\xf8\x42\x20\x4d\x45\x10\x8f\x63\xd3\xa4\xb0\x86\x58\xa0\xcf\x0d\x50\x71\x55\x00\xb1\x50\xcb\x08\x64\x19\xca\x21\x52\xb2\x48\xfa\xbc\x5d\x4c\x48\x19\x9f\x0b\x68\x97\x32\xe3\x65\xa1\xe6\x12\x34\x4e\x50\x04\xed\x99\xe4\x84\x73\x68\x07\x30\x2f\xd8\xe0\x73\x7f\x8a\x32\x6c\xa3\x24\xd0\x92\x0b\x17\xd9\xf1\x34\xf1\x41\x53\xc4\x25\x0f\x41\xef\x11\x3c\x87\xc9\x90\x40\x0b\xa5\x67\xd6\xa8\xb2\x08\x67\x48\xb8\xe4\xa2\x0c\x35\x18\x03\xc5\xbd\xce\x61\xe7\x86\x38\x25\x87\x45\xe4\x98\x93\x3f\x3d\xbe\xc5\xeb\x40\x42\x19\x1e\x9f\xf9\xd6\xea\x7b\x02\x3b\x6c\x3d\x3e\x75\x32\x9c\x98\x7d\x88\xb4\xb0\xbb\x0c\xfa\x94\x52\x04\xca\x19\xe8\x60\x07\xef\x55\xc5\x8f\xb5\x9a\xa0\x38\xb4\xf0\xc7\xb8\x49\x9a\x3d\x76\xde\x4f\x0c\xa9\x68\x8d\x09\x60\x82\x12\x0f\x2f\xe1\x36\xee\x40\x12\xfa\x59\xe0\xa1\x21\x54\xa7\x2e\x1a\xa7\x13\x92\x9d\x69\x27\x14\x10\x2b\x81\xfe\xb2\x89\x6f\xac\x02\x03\x7e\xa2\x91\x96\x29\x31\x1e\x18\x16\x69\x55\x78\x91\x21\x21\x50\xa1\xbc\x2e\x8a\x95\x31\x0d\x70\x43\x7b\x96\xbc\x57\x3a\xba\x4c\x2c\x90\xda\x26\x42\xcf\xc4\xe0\xef\xb0\x9a\x34\x9f\x4c\xd0\x4f\xd7\x1c\xe4\xe0\x34\x75\xed\x09\xb6\x31\x29\xc7\xed\xb2\x3d\x27\x2c\x06\xf5\x76\x3a\x87\xfe\xeb\x7b\x4b\xf6\x7b\x75\xe2\x95\x40\x13\x94\x5c\xe0\x57\xd0\x39\xb8\x62\x5d\x08\x94\xff\xb6\x9b\x99\x3f\xf8\x1a\x38\x41\xfe\x98\xc4\x41\xf1\x31\x00\x01\xb5\x47\x5f\x09\x01\xbe\xad\x00\x39\x22\xb6\xf1\x92\x3f\x2d\xf2\x27\xa7\x33\x09\x66\xa4\x64\xb3\xc9\xc4\xcd\xcc\x6c\x94\xcc\x3a\x84\x32\xd0\x3e\xe9\x44\x6e\x00\x31\xc6\x20\x50\x42\x1d\xe2\x24\xcb\xa5\x9e\xd2\x63\x27\x71\x8c\x35\xa7\xb0\xe5\x4e\x73\xeb\xf8\xef\xc7\xbe\xf5\xa5\xce\xb9\xff\x55\x5c\xee\x90\x0a\x3c\x8f\x86\x6d\x88\xa6\x45\xb9\x62\x65\x82\x6f\xef\xc2\xec\x48\xa9\xb8\x2f\x9d\x07\x54\xdd\xec\x55\xd3\xc1\xe1\x6c\xc7\xf1\xe3\xb6\x34\x31\x99\xbe\xc7\x99\x07\x7c\x44\x19\xa0\x0c\x53\x64\xc3\x58\x40\x49\xd2\xb6\xd4\x68\x6f\x5c\x58\xa0\x95\x80\x01\x4c\xd6\xf4\x6b\x1f\x35\xe8\xb1\xa2\x74\x8f\x25\x9a\x07\x11\x26\x19\xff\x05\x3e\xe5\xb3\x88\x8c\xc7\x30\xbb\xc8\x75\x7d\x5f\x25\x92\x9a\x14\x5f\x5d\xf9\x78\x8d\x32\x1d\xdf\x38\xa6\x34\x2e\x07\x97\xdc\xe8\x90\xbd\x97\x0b\x4f\xa1\x89\xaf\xa1\x49\x03\xbb\x17\xde\x6a\x7e\x70\x44\xd3\x8f\x27\xd1\xde\x1c\xd6\x0c\x62\xa5\xa9\x10\xf0\x19\xbf\x29\x51\x6c\xbc\x0f\x1f\x7e\x59\xc1\x33\xb2\x0e\x2b\x41\xb4\x22\xe5\x2b\xd1\x61\xf7\x17\xfd\x1c\x4a\x5c\x87\x40\xfd\x0a\xb5\x01\x7b\x70\x2a\x9d\xcf\xe0\x2a\xbb\xf4\xfa\xb3\xb7\xfd\x67\x6e\xa5\x46\xad\xe1\xae\x75\xd0\x75\xce\xd1\x6a\x1e\x5d\x84\x7b\xbc\x73\x6c\x31\xfb\x9c\x71\xad\xf5\x99\x75\xd0\xcd\xf7\x04\x8d\x7e\x61\x08\xb7\xf7\x54\xe6\xbf\x3b\x71\x7a\x56\x6b\x70\xca\x86\xff\x30\xde\x2f\xe2\xf8\x1a\x35\x43\x03\x0f\x94\x14\xcb\xd7\x29\x1b\xe5\xc6\x74\xd3\x88\x56\xfb\xd4\xd3\x65\xe3\x8b\x34\x38\x6c\x3b\x5f\x26\xf2\xb8\xf9\xbc\xb7\x2e\xaf\x11\x7b\xb1\xc6\x39\x0a\x08\x21\xf8\xf6\x87\xd6\xff\x3d\xb8\xb2\x82\x9d\xb6\x32\x3f\x68\xb4\x19\xe2\x32\xe0\xfa\x95\x62\xed\xe0\x7d\x49\x01\x59\x93\x59\x00\x64\x6d\x66\x01\x10\xff\xe0\xc5\xf2\xbb\x88\xe7\xc7\x47\x8f\xe1\x84\xb5\x3f\x73\x91\x80\x69\x0f\x1e\x6e\x47\x17\x77\xb7\xf7\x83\xbb\xeb\xeb\xde\xe0\xe9\xa9\x16\xf3\x1b\xf5\xce\xe7\xef\xc7\x40\xbc\x18\xe9\x97\xf9\x7b\xd2\x1d\x81\xbe\x69\x41\x0a\xa8\x7d\xda\xa6\x7a\x47\x13\x59\x9b\xae\xcb\x9f\x1a\x34\x37\x3a\x8c\x11\x44\xb1\xe0\x04\x05\x2e\x15\x55\x59\xfd\xfb\x85\xdd\x6c\xcb\xaa\x66\xea\x16\xbb\xe7\xdb\xbd\x1b\xe5\x74\x67\x95\x48\x0a\x73\x16\x56\xe8\x13\x4d\xda\x0a\x7b\x8e\xf6\x73\x2d\xd6\xe2\xcb\x9a\x33\x16\xc0\x84\x27\x82\x6e\x54\x00\x1d\xf6\xe1\xe7\x9f\x2a\x68\x15\xdb\x0a\xc6\x45\x87\x59\x9b\x2a\xc8\x8c\xe3\xed\xb6\xae\xd7\xfe\x59\x9b\x38\x4a\xd0\x15\x95\x31\xe2\x61\xba\xad\x57\x37\xdd\x4f\xf9\xc7\x21\xd9\x5f\x8a\xeb\x27\x42\xf4\xd3\x39\x53\x87\x75\xc5\x82\x2f\x4d\x89\xa6\x21\x6a\xb2\x3f\xae\xc3\xca\x2e\x79\x4d\xe4\x20\xe7\x55\xea\x4c\xc4\xe0\xea\x6e\x94\x87\x5e\xc5\xfe\xb9\x4d\x0f\xe7\x57\x2e\x75\x1e\x97\xbd\x8f\x0f\x9f\xb6\xad\xcf\x09\xdc\xeb\x7f\xbf\xbf\xef\x0f\x47\xfd\xbb\xc1\xbd\x9b\x41\xeb\xcd\xe3\x86\xe4\xa9\xb5\x95\xc7\x6e\x16\x4d\x1c\xae\xfa\xa3\xee\xe5\xe5\xa0\x37\x1c\xf6\x86\xdb\x0c\x29\xd2\xb8\x6d\xb9\xbc\x1a\x76\x3f\x5e\xf7\x46\xbf\xf5\xba\xf7\x0f\x83\xed\x9c\xaa\x74\xdb\x3d\x33\xea\x0f\xee\xfe\xf8\x73\x1b\x9f\x0d\x85\x9b\xc3\xd5\xed\xf0\xbe\x7b\x7d\x3d\xba\xb9\xbb\xdc\xba\xbd\x45\x1a\x37\x97\xe1\x4d\x23\x83\x15\xba\xbc\x36\x4b\xe5\x1b\x9b\xe0\xb5\x48\x8d\x2c\xb4\xcf\x69\xda\x61\xe7\x73\xae\xcf\x75\x22\xcf\x35\xaa\x73\x63\x44\x45\xc6\x7e\xb9\x6f\xcf\x0b\x1e\xdc\x49\xb1\x2c\x24\xb2\xad\xf2\x20\x83\xa7\xa7\xb3\xb3\x62\xed\xfb\x3b\x01\x93\xbe\x9d\xb5\x0f\x1e\x9b\x73\x8d\x7c\x2c\xac\xab\x6c\xaa\xa6\x2b\x03\x30\xbe\xc6\xb4\x34\x74\xd2\xb7\xe7\x85\xb4\xca\xd2\xb7\x55\x59\x5b\x4e\xa1\xf2\xfa\xbc\xcc\x33\x52\x2c\xfb\xaa\x86\x91\xaa\x72\x28\x27\x51\x99\x83\x01\xb2\x6b\xad\x65\xf6\x3f\x48\xbb\x84\x05\x30\x4e\x42\x26\x54\x18\xae\x3e\x82\x28\xb2\xab\xe4\x54\x99\x5f\x3a\x72\x4b\xc7\x6c\x2c\xe4\x04\x0b\xbe\x64\x0b\x14\x22\x9d\xaf\x83\x74\x28\x57\xce\xae\x3a\xb3\xe7\xf0\xaa\xe5\x59\x99\xdd\x62\x0a\x34\x05\x6d\xed\x8c\xb8\x4c\xb8\x10\xcb\xf4\x84\xc1\xc9\x92\x61\xcc\x78\x10\x64\xdf\xa4\x58\x82\x10\x24\xe8\xd5\x4d\xa3\x28\x62\xd8\x1b\x7c\xbe\xba\xe8\x8d\x2e\xae\x2e\x07\x0e\x11\x35\xbe\xab\xe3\x88\x59\x7a\x36\x51\x3a\x07\x44\x60\xa6\x56\x50\xfa\x2a\xd1\x87\x98\xaa\x92\x9c\xe9\xbe\x43\xda\x04\x38\x25\x3a\xb3\x20\x40\x63\x19\xb9\xfd\x9d\xe7\x7d\x25\x1a\x56\x7c\x32\xc7\x6b\xf5\xc5\x1a\x40\xe4\x08\x82\x5a\xf2\x97\x19\xa1\x34\xc4\x85\x60\x91\x0a\xea\x2e\xbc\xd9\xb6\xaa\xe4\x1b\xd7\xd2\xf2\x75\xea\xdf\x00\x00\x00\xff\xff\x90\xee\xe4\xf9\x80\x29\x00\x00")

func stacksRioControllerStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksRioControllerStackYaml,
		"stacks/rio-controller-stack.yaml",
	)
}

func stacksRioControllerStackYaml() (*asset, error) {
	bytes, err := stacksRioControllerStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/rio-controller-stack.yaml", size: 10624, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stacks/build-stack.yaml":          stacksBuildStackYaml,
	"stacks/buildkit-local-stack.yaml": stacksBuildkitLocalStackYaml,
	"stacks/cert-manager-stack.yaml":   stacksCertManagerStackYaml,
	"stacks/gloo-stack.sh":             stacksGlooStackSh,
	"stacks/gloo-stack.yaml":           stacksGlooStackYaml,
	"stacks/gloo-values.yaml":          stacksGlooValuesYaml,
	"stacks/linkerd-stack.yaml":        stacksLinkerdStackYaml,
	"stacks/rio-autoscaler-stack.yaml": stacksRioAutoscalerStackYaml,
	"stacks/rio-controller-stack.yaml": stacksRioControllerStackYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stacks": &bintree{nil, map[string]*bintree{
		"build-stack.yaml":          &bintree{stacksBuildStackYaml, map[string]*bintree{}},
		"buildkit-local-stack.yaml": &bintree{stacksBuildkitLocalStackYaml, map[string]*bintree{}},
		"cert-manager-stack.yaml":   &bintree{stacksCertManagerStackYaml, map[string]*bintree{}},
		"gloo-stack.sh":             &bintree{stacksGlooStackSh, map[string]*bintree{}},
		"gloo-stack.yaml":           &bintree{stacksGlooStackYaml, map[string]*bintree{}},
		"gloo-values.yaml":          &bintree{stacksGlooValuesYaml, map[string]*bintree{}},
		"linkerd-stack.yaml":        &bintree{stacksLinkerdStackYaml, map[string]*bintree{}},
		"rio-autoscaler-stack.yaml": &bintree{stacksRioAutoscalerStackYaml, map[string]*bintree{}},
		"rio-controller-stack.yaml": &bintree{stacksRioControllerStackYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
