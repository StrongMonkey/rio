// Code generated by go-bindata.
// sources:
// stacks/coredns-stack.yml
// stacks/istio-crd-stack.yml
// stacks/istio-gw-stack.yml
// stacks/istio-stack.yml
// DO NOT EDIT!

package stacks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stacksCorednsStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\xf6\x01\x2c\x4a\x82\x3e\x7f\x75\x79\x6c\xea\x43\x2e\x39\xb4\x45\xaf\x06\x43\xae\x2d\xc2\xfc\xc3\x2e\x95\xc6\x68\xfb\xee\x05\x4d\xcb\x50\xe3\x46\x17\x2d\x77\x86\xcb\xc5\xcc\xe8\x18\x0e\xf6\xc8\x72\x05\x50\xca\xf2\xbf\x54\x19\x43\x96\xf0\xab\xb9\x9c\x01\x84\xdc\x0c\xf0\xf3\x7a\x28\x1f\x12\x45\xe2\x45\x63\x44\xe5\xf2\xb8\x68\x9c\xa6\x67\xa4\x80\x19\x19\xb4\x9b\x38\x23\x09\x17\xb5\x72\x60\x43\xa3\x8c\x21\xa1\x28\x29\xb0\xe9\xff\x5a\x2c\x87\x97\x2f\x45\xc3\x60\x03\xa3\x9e\x08\xdf\x60\x53\xe2\x4c\xa8\xfc\x9b\xf6\x41\x39\x97\x47\x8a\xd3\x71\xfc\xf7\x23\x0b\xfe\xef\x45\x9d\x28\x7a\xcc\x23\x4e\x0c\xf2\x63\xbf\x19\xfe\x86\x5e\xcf\x20\xa0\xc5\xac\x5b\x42\x8e\xee\x45\x14\x9d\x16\x14\xad\xf4\x88\x30\x74\xab\x79\x30\x23\xbd\x58\x8d\x57\x4d\x09\x4d\xe0\x2a\x6b\x29\x60\x8c\x9c\xab\xc8\x2a\xed\x95\x31\x12\x9e\x76\xdf\xf6\x9f\x1e\x9f\x3e\xef\xbf\xee\xbe\x7c\x7f\x7c\xd8\xdd\x50\x43\x31\x49\x50\xce\x5d\x4d\xf1\x5e\x05\x53\x47\x35\xd0\xdc\xd6\x68\xea\x76\xd7\xa7\xda\x87\x48\x78\xb0\x0e\x67\x27\x67\x7b\x0b\xf1\x62\xf1\xfb\x6c\x7c\x4d\x91\x71\x26\xf7\x9d\xf8\x6f\x10\x9d\xe8\x3b\xb9\x19\xe4\x66\x68\x27\x93\xd6\x26\xf0\x3b\x70\x81\x9a\xac\xd3\x15\x2e\x42\xae\x3d\x66\xb2\xba\xde\x38\xba\xf8\xac\xdc\x3e\x21\x79\xcb\x6c\x63\xb8\x6d\xe5\x2c\xe7\xf5\x0f\x95\xf5\x08\x18\x4c\x8a\x36\x64\xbe\x87\x66\x59\xef\x91\x12\x95\xfb\x6e\x50\x1e\x39\xa9\xf9\x46\xcd\xa7\x1e\x51\x9f\x24\x8c\x39\x27\xd9\xb6\x97\x3c\x16\x43\xe4\xb6\xdb\x76\xed\x22\xc2\xd6\xab\x23\x4a\x38\x6d\x59\x1c\x35\x09\x1b\x67\xc1\x64\x2f\x7a\x51\x13\xe2\xd1\x47\x3a\x4b\xf8\xd0\xd5\x20\x12\x2a\xb3\x8f\xc1\x9d\x25\x64\x9a\xaa\xa2\xac\x95\x43\x09\xfd\xea\x4f\x00\x00\x00\xff\xff\xd5\x57\x8c\x0c\x68\x03\x00\x00")

func stacksCorednsStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCorednsStackYml,
		"stacks/coredns-stack.yml",
	)
}

func stacksCorednsStackYml() (*asset, error) {
	bytes, err := stacksCorednsStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/coredns-stack.yml", size: 872, mode: os.FileMode(436), modTime: time.Unix(1533317908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioCrdStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\x41\x4b\xc3\x40\x10\x05\xe0\x7b\x7e\xc5\x42\xce\x46\xaa\x37\x6f\x8a\x45\xbd\xc5\xb6\x78\x0d\xe3\xe6\x35\x1d\x9a\xce\x84\xdd\xd9\x96\xfe\x7b\x71\x5b\x14\x2d\x24\x3d\xbf\xef\x0d\xcb\xdb\x6d\xfa\x44\x10\x18\xe2\x43\xe1\x9c\xd0\x0e\x71\x20\x8f\xb6\xf1\x29\x9a\xee\x9a\x80\xa8\x29\x78\x34\x2d\xd6\x2c\x6c\xac\x92\x65\xe9\xbc\xca\x9a\xbb\xc2\xb9\x1b\xf7\x8c\x68\x2c\xf4\x1d\xd6\xda\xb3\x3f\x56\xa7\xb0\xe2\x68\xac\x15\xeb\xed\x7e\x46\xfd\xb0\xa1\xbb\xcc\xe7\x5d\x40\x8c\x8b\xd4\x63\xdc\x2d\x34\x19\xa6\xd9\xeb\x6a\x55\x3f\xd6\x6f\xcb\x01\xfe\x89\xa5\x65\xe9\xae\xf6\xe3\xf0\x3d\xa9\xd1\xd5\x67\x7f\xf4\x18\x2b\x9d\xc0\x0e\x1a\xb6\x2c\xa7\xe9\x3e\x38\x58\xa2\x7e\x89\xb0\x67\x8f\xea\x37\xbd\xa8\xdf\xff\x9f\x3a\x2f\x33\x59\x38\x5f\x9e\x8b\x85\xe3\xb4\x7e\x21\xc3\x81\x26\x61\xe9\x28\xd9\x06\x62\xec\xf3\x53\x72\xf7\xfc\xf5\x7f\x93\x8b\xfa\xac\xf8\x0a\x00\x00\xff\xff\xbd\xa2\x21\x22\x73\x02\x00\x00")

func stacksIstioCrdStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioCrdStackYml,
		"stacks/istio-crd-stack.yml",
	)
}

func stacksIstioCrdStackYml() (*asset, error) {
	bytes, err := stacksIstioCrdStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-crd-stack.yml", size: 627, mode: os.FileMode(436), modTime: time.Unix(1537832765, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioGwStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xd1\x4f\xdb\x30\x10\xc6\xdf\xf9\x2b\xac\x0c\x89\x6d\xc2\xa4\x45\x43\x93\x22\xed\x21\x82\x3e\xf0\x40\x1b\xd1\xee\x39\x32\xf6\xd1\x9e\x70\xec\xe8\xee\x12\xe8\xa6\xfd\xef\x53\x43\xe8\x92\x0d\xe8\xde\xe2\xfb\x7e\xdf\xe7\xf3\xd9\x61\xa0\x16\x2d\x70\x76\xa4\x14\xb2\x60\xd4\x6b\x23\xf0\x68\xb6\xbb\x82\x52\xde\xdc\x81\xe7\xe7\x6f\xa5\x92\x5e\x4b\x32\x95\xc0\x93\x00\x05\xe3\x93\x4e\x5b\xfb\x78\x67\x7c\x59\x03\x55\xc8\x8c\x31\xf4\x1e\xad\x92\x35\xc8\xe9\xa3\x11\xbb\x39\xf5\xc8\x72\xda\xd4\xce\x08\xa8\x9d\x3d\x74\x60\x2a\x1b\x24\x57\x1b\x92\x2d\x01\xc7\x86\x2c\x70\xf2\xbe\xf9\x73\xda\x22\x49\x63\xfc\x4b\xf7\x07\x79\x07\x2c\x18\x8c\x60\x0c\xd4\xf8\xff\x30\xf4\x27\xed\xc1\xe7\x72\x19\xc9\x01\x65\x8a\x25\xd6\xfa\x1e\x89\xa5\x13\x19\x1d\x3c\xa0\x7d\xd8\x8f\xe9\x79\x8e\x35\xc5\xa7\xed\x4b\x49\xa9\x3a\x92\x70\xa6\x8e\x7f\x16\x8b\xdb\xd5\xf2\xd7\xbe\x8e\x95\x59\x43\xa6\x92\xce\x94\x76\xa6\xf6\x3c\x9b\x9e\x4d\xce\xce\x93\x3d\x64\x63\x55\x99\xe0\xfe\xa4\x69\xd5\x91\x83\x35\xc5\x46\x80\x06\x05\xdd\x0e\x16\xc9\x20\x4c\x2b\xad\x1d\xb2\x8d\x2d\xd0\xf6\x16\xee\x09\x78\x73\x05\xde\x0c\xd3\x4e\xa6\x7c\xa2\x3e\x1c\xa2\xb4\x76\x64\x30\x5c\x35\xd4\x4d\x76\xe8\xff\x72\xd1\x05\xbc\x21\x6b\x5d\x1b\x82\x20\xcb\x4d\x23\x2e\x3e\xbe\x9a\x30\xad\x26\xbb\x88\x83\xa0\xd6\x36\x86\x00\x56\x56\x58\x41\x6c\x64\x94\xd1\x45\xbc\xa9\x6b\xdd\x3f\xa0\x4b\xdf\xf0\x78\x7a\x83\x3b\x1c\x19\x7e\x60\xfd\x80\x21\x77\x8e\x80\x79\x38\xe0\xf1\x7c\x59\x8c\xb0\xfb\xee\xea\x83\x64\xb7\x45\xee\x2a\x0c\x45\xa4\x61\x73\xc9\xf4\x62\x32\x99\x24\x7f\x9f\x54\x28\xfa\xc2\x9b\x00\x79\x23\x9b\x22\x7a\xb4\xc3\x06\xe7\x8b\xf9\xec\xf5\x8b\xfe\xb7\x91\xfe\x88\xe8\xa3\x64\xbb\xbd\xbe\xee\x35\x08\xed\xf0\xa9\x15\x8b\xab\x72\x9e\xdf\xcc\xbe\x1d\x7f\x64\xf0\xf7\x69\x30\x15\x7c\x7a\x45\x5f\x16\xf9\xe5\x08\xe2\xda\xd8\x11\x79\x3d\x5f\xae\xf2\xf9\xe5\xac\xbc\x2e\x5e\x38\xac\x47\xc0\x72\x75\xbd\x28\x6f\x66\xab\xbc\x7c\x7f\x57\x06\x4b\xb0\xfb\xa1\xd0\x41\x10\x94\x6d\x96\x82\xd8\xd4\x02\x09\x1f\xfd\x0e\x00\x00\xff\xff\x7b\x1f\x8e\xc3\xd5\x04\x00\x00")

func stacksIstioGwStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioGwStackYml,
		"stacks/istio-gw-stack.yml",
	)
}

func stacksIstioGwStackYml() (*asset, error) {
	bytes, err := stacksIstioGwStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-gw-stack.yml", size: 1237, mode: os.FileMode(436), modTime: time.Unix(1537807125, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioStackYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x51\x6f\xdb\x36\x10\x7e\xf7\xaf\x20\x8c\x02\x5d\x8b\xc8\x72\xda\x65\x6b\x05\xf8\xc1\x70\x5c\x34\x40\x6a\x7b\x89\x87\x61\x4f\x06\x4d\x9e\x25\x22\x14\x49\x90\x27\x27\xc2\xb6\xff\x3e\x50\xa2\x2c\x2a\x71\xb6\x62\xc0\x5e\x92\xf0\xbe\xef\x8e\x77\xbc\xbb\x4f\x61\x5a\x1d\x44\xee\xb2\x11\x21\x25\xb8\xc2\xff\x26\x84\x69\x85\xa0\x30\x23\x7f\x26\xcd\x99\x10\x2e\x1c\xdd\x4b\xd8\x68\x29\x58\xbd\x28\x80\x3d\xb8\x8c\xa0\xad\x20\xe0\x42\xe5\x16\x9c\x5b\x68\x85\x56\x4b\x09\xf6\x9b\xe6\x90\x91\xf1\xfa\xcb\x97\x71\xa0\xd0\x0a\x8b\xd6\x3f\x23\xab\xf5\x6a\x19\xcc\x96\xbb\x3b\x38\x58\x70\xc5\x35\x48\x5a\x67\xe4\x72\xea\x02\xa4\x2b\xdc\xeb\x4a\xf1\xad\xa5\x87\x83\x60\xc1\x39\x80\x84\x94\xcd\x15\xf3\xdb\xdb\xf5\x6f\xbb\xf9\xea\xf7\x2e\x53\x38\xd0\x4a\xe2\xa2\xa9\xab\x27\x73\xe1\x98\x3e\x82\xad\x5f\xbb\xac\xa9\x5a\x01\xc3\xad\x28\x41\x57\x98\x91\x8f\x43\xec\x20\xf2\x0d\xc5\x22\x23\xe3\x14\x90\xa5\xc2\xa1\xd0\xa9\xb1\xfa\xa9\x1e\x9f\x68\x7b\xa1\xa8\xad\x3b\x5a\xe5\x6c\x2a\x35\xa3\x32\xdd\x0b\x95\x82\x3a\xea\x88\xea\xc0\x1e\x05\x83\x85\xac\x1c\x82\xcd\x48\x13\x2f\x69\xe2\xf5\x49\x5b\x2a\xd4\x75\x65\x29\x0a\xad\x32\xf2\xe3\x55\x9f\x90\xa1\x16\x14\xde\x17\x15\x72\xfd\x18\x71\x2e\xcb\x28\x6b\xa1\x10\x2c\x03\xe3\xa1\xb6\x21\x77\xcb\xeb\x9b\xbb\xe5\x62\xdb\xc7\xf1\x17\xce\x79\x29\xd4\x46\x5b\xcc\xc8\xe5\xd5\x74\x3a\x8d\xcb\xf6\xfd\xdc\x48\xaa\x60\x7e\xbe\x7f\xd1\xd3\xce\x39\xf7\x43\x70\xaa\x45\x48\x8d\x93\x37\x7f\xac\xe6\xdf\x96\xf7\x9b\xf9\x62\xf9\x57\xe6\xa3\xff\x3c\x1a\x85\xda\x9b\xa9\x8b\xb8\x6d\xb7\x24\xdd\x83\x74\x5d\xe7\x1a\x38\x23\x0d\xde\x98\x72\xa9\xf7\x54\xee\x0c\xd8\x52\x38\x27\xb4\x0a\xd4\x84\xbc\x7d\x1f\xda\x34\x69\x9c\x26\x42\xa7\xef\xdf\xf6\x98\x02\x7c\xd4\xf6\x41\xa8\x57\x70\x3f\x9f\xa0\x50\xb0\xe6\x25\x5f\xe1\x18\x01\x4f\x08\xaa\xb9\x77\xf2\xf0\xc9\x79\x02\xab\x1c\xea\xd2\x82\xd3\x95\x65\xc0\xe1\x20\x94\xf0\x21\x5c\xe4\xd8\x7b\xa5\x58\x08\xcb\x0d\xb5\x58\x77\x2e\xdf\x4f\x9c\xf4\xf0\x79\x9f\xb0\x87\xaf\x85\x3c\xc1\xa9\x43\x8a\xd5\x89\x65\xf7\x94\x45\x15\x07\x2b\xb3\x40\x11\x2e\x72\xc0\x0b\x29\x1c\x5e\x3c\x52\x64\xc5\x45\x65\x38\x45\x08\x4f\x5d\x52\xe3\x02\x1b\x14\x37\x5a\x28\xec\xce\x46\xf3\xee\xcf\xae\xdf\xe1\xa8\x68\x09\xce\xd0\xc8\xa0\x39\xf4\x5c\x66\x21\x04\x71\x82\xc3\x83\xf0\x5a\x33\x7a\x36\x6a\x59\x34\xa2\x65\x49\x15\xcf\x7a\x8c\x24\x89\xd4\xf9\x4e\x57\x68\x2a\xdc\x49\x38\x82\x9c\x71\xd8\x57\x39\x49\x12\x0b\xae\x56\x6c\xf6\xa1\x78\xb6\xd9\xae\x0f\x98\xb4\x42\x18\x2d\x79\x4b\x49\xbd\xf9\xc4\x02\x75\x14\x56\xab\xd2\xcb\x64\xe4\xba\x59\x5f\xef\xfc\xbc\xcf\xde\xfc\xe0\x40\x1e\x52\x5f\xea\xbb\x33\x78\xb3\x0f\x31\xa9\x79\x8f\x01\xf3\xe6\x76\xbd\xdd\x6d\xbf\xde\xad\xb7\xdb\xdb\xe5\xec\x2a\xda\xca\x0e\x5c\xcc\x17\x5f\x97\xbb\xfb\x5f\x7e\x9d\xdf\x7f\x9d\x5d\xf5\x5b\x5f\xd2\x1c\xc2\x12\xa6\xed\x62\x5d\x4e\xa6\x93\x0f\x91\xf4\x34\x4f\x9c\x11\xc1\xfd\xc0\x63\xdd\x16\xcb\xc0\xa2\x8b\xd7\xae\x55\xa3\xbe\x3c\x78\x32\xda\x41\x5c\x6e\xb3\xcf\x69\x81\x68\x86\xc6\xcb\x69\x9a\x5b\xc3\x22\xe3\xe7\xe9\xe7\x8f\x0d\xf1\xc2\xff\x48\x4a\xad\x04\x6a\x2b\x54\xfe\x4a\xda\xfe\xe6\xe3\x87\x67\x89\x77\xbd\x8e\xe2\x0e\x05\x33\x21\x49\x32\x14\xd6\x08\x8a\x94\x66\xe0\x80\x50\x1a\x49\x11\xbe\x08\x09\x11\xf0\x5c\xe5\x5b\x01\xdf\xb5\xaa\x56\xd3\x52\x4e\xb0\x34\x72\x10\xe9\xbc\x5c\x46\x94\x81\x6e\xfe\xef\x23\x74\xb3\xba\xdf\xce\x57\x8b\xe5\xee\x66\xd3\xf1\x84\x79\xf7\x7d\x63\x70\x52\x66\x26\x90\x72\x90\x6d\x86\xa1\x47\xe3\xb0\x17\x01\x6a\x9a\x34\x1e\xbd\xe8\x90\x7f\x12\x6a\x0c\x28\x9e\x70\xe5\x92\x26\xc7\xd9\xe9\x9f\x06\x8f\xfa\x21\x49\x8c\xb6\x38\xfb\x34\xfd\x69\x3a\x34\x17\xda\xa1\x77\x99\x85\x6b\x46\x7d\x83\xe5\x21\x71\x22\x57\xc0\x13\x46\x87\x01\x03\x37\x71\xa8\x2d\xcd\x21\x39\xbd\xcb\xcc\x0a\x9d\xb8\xda\x21\x94\xff\xf2\x19\x79\xb4\x02\x61\x20\x43\x27\x01\xa3\x8c\xe9\x4a\x3d\xb7\xb6\xc7\x33\x91\xbc\x70\x72\x90\x80\x40\x38\x18\xa9\x6b\xdf\x6a\xf7\x12\x3c\x1f\xfd\x25\xe1\x0c\x72\x3e\x6e\xa3\xd6\xad\x4e\x77\xc4\xe8\x23\xf0\x5f\x7c\x2c\x18\x29\x18\x75\x27\x65\xfe\xa7\xd9\xf9\x3b\x00\x00\xff\xff\x4a\x3e\x32\x64\x54\x0a\x00\x00")

func stacksIstioStackYmlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioStackYml,
		"stacks/istio-stack.yml",
	)
}

func stacksIstioStackYml() (*asset, error) {
	bytes, err := stacksIstioStackYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-stack.yml", size: 2644, mode: os.FileMode(436), modTime: time.Unix(1537905271, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stacks/coredns-stack.yml":   stacksCorednsStackYml,
	"stacks/istio-crd-stack.yml": stacksIstioCrdStackYml,
	"stacks/istio-gw-stack.yml":  stacksIstioGwStackYml,
	"stacks/istio-stack.yml":     stacksIstioStackYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stacks": &bintree{nil, map[string]*bintree{
		"coredns-stack.yml":   &bintree{stacksCorednsStackYml, map[string]*bintree{}},
		"istio-crd-stack.yml": &bintree{stacksIstioCrdStackYml, map[string]*bintree{}},
		"istio-gw-stack.yml":  &bintree{stacksIstioGwStackYml, map[string]*bintree{}},
		"istio-stack.yml":     &bintree{stacksIstioStackYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
