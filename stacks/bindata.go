// Code generated by go-bindata.
// sources:
// stacks/cert-manager-stack.yaml
// stacks/coredns-stack.yaml
// stacks/istio-crd-stack.yaml
// stacks/istio-stack.yaml
// stacks/istio-telemetry-stack.yaml
// stacks/localstorage-stack.yaml
// stacks/nfs-stack.yaml
// stacks/rio-autoscaler-stack.yaml
// DO NOT EDIT!

package stacks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stacksCertManagerStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x6b\xdb\x40\x10\xc5\xef\xfa\x14\x83\x5b\x08\x04\xd6\x21\xb7\xa2\x9b\x31\x26\xe4\x90\x36\x84\xde\xc5\x7a\xf5\xac\x2c\xd9\x3f\xea\xcc\xac\x5b\x53\xfa\xdd\x8b\x25\x39\x56\x69\xc0\x3e\xee\x9b\xdf\xcc\xee\x9b\xb7\x02\xde\x7b\x07\xa9\x2b\x22\x07\x56\x13\x6d\xb2\x1d\xf8\x78\x26\xea\x42\xde\xda\xd0\xf4\xe0\xe8\x45\x7c\x4e\x32\xea\x86\x6e\x6e\x07\x7c\xa2\x97\x6f\x5f\x64\xe9\xf3\xdd\xed\xcd\xb9\x8c\x5f\x8a\x34\xf4\xdc\xf9\xd4\x31\x44\x20\xb3\xb2\xcb\x69\xe7\xbb\x68\xfb\xb9\x28\x70\x0c\x9d\x2b\xd8\x23\xe9\xbf\xc8\xf8\xe0\x99\xd4\xe7\x76\x3a\xfa\x68\x3b\xd4\xf4\xf9\xf7\x7a\xf3\xf2\xbd\x79\x5a\x7d\x5d\x3d\x6c\x5e\x9a\xc7\xa7\xd5\xc3\xe6\xcf\x19\x78\x2e\x21\x3c\xe7\xe0\xdd\xa1\xa6\x55\xf8\x69\x0f\x32\xd4\x5c\x8e\xd1\xa6\xf6\xe4\x70\xbe\x8d\x49\x32\x26\xc0\xb6\x60\x83\x00\xa7\x3e\x27\x93\x6c\x84\xf4\xd6\x61\x22\xd8\x67\x23\x07\x51\xc4\xf7\x16\x17\x8a\x28\xd8\x30\x24\x17\x76\xb8\xa6\x27\xe4\x4e\xb3\x68\x0b\x3e\x5d\xbd\x50\x2e\x58\x54\xd5\x5b\xd9\x82\x13\x74\x4c\xec\x7d\x54\xdb\xb8\x22\x9a\x63\x73\xba\xa5\x69\xb1\xf3\xc9\xeb\x29\xb3\x4f\x83\x1f\x3a\xfb\x31\xf4\x28\x52\xc0\xcb\x0f\x62\xdc\xdf\xdb\xd0\xbf\xda\xfb\x01\x5b\xbf\xda\x10\x90\x3a\x5c\x24\xbf\x71\x7b\xcd\x3c\xb0\xfa\x9d\x77\x56\x2f\x4d\xbc\x60\xc9\xd0\x7a\x5c\xed\x15\x46\xaa\x1f\x05\x32\x75\x1a\xda\x5b\xf6\x76\x1b\x50\xd3\xff\xff\xa4\x22\x6a\x21\x8e\x7d\x7f\xc4\x6b\x5a\xcc\xf7\x36\xfe\x1f\xd2\x4c\x45\x8e\x69\xfc\x0d\x00\x00\xff\xff\x22\x78\xed\xc4\x3e\x03\x00\x00")

func stacksCertManagerStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCertManagerStackYaml,
		"stacks/cert-manager-stack.yaml",
	)
}

func stacksCertManagerStackYaml() (*asset, error) {
	bytes, err := stacksCertManagerStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/cert-manager-stack.yaml", size: 830, mode: os.FileMode(420), modTime: time.Unix(1545254090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksCorednsStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6e\xdb\x3c\x10\xbc\xfb\x29\xf6\x01\x2c\x4a\x82\x3e\x7f\x75\x79\x6c\xea\x43\x2e\x39\xb4\x45\xaf\x06\x43\xae\x2d\xc2\xfc\xc3\x2e\x95\xc6\x68\xfb\xee\x05\x4d\xcb\x50\xe3\x46\x17\x2d\x77\x86\xcb\xc5\xcc\xe8\x18\x0e\xf6\xc8\x72\x05\x50\xca\xf2\xbf\x54\x19\x43\x96\xf0\xab\xb9\x9c\x01\x84\xdc\x0c\xf0\xf3\x7a\x28\x1f\x12\x45\xe2\x45\x63\x44\xe5\xf2\xb8\x68\x9c\xa6\x67\xa4\x80\x19\x19\xb4\x9b\x38\x23\x09\x17\xb5\x72\x60\x43\xa3\x8c\x21\xa1\x28\x29\xb0\xe9\xff\x5a\x2c\x87\x97\x2f\x45\xc3\x60\x03\xa3\x9e\x08\xdf\x60\x53\xe2\x4c\xa8\xfc\x9b\xf6\x41\x39\x97\x47\x8a\xd3\x71\xfc\xf7\x23\x0b\xfe\xef\x45\x9d\x28\x7a\xcc\x23\x4e\x0c\xf2\x63\xbf\x19\xfe\x86\x5e\xcf\x20\xa0\xc5\xac\x5b\x42\x8e\xee\x45\x14\x9d\x16\x14\xad\xf4\x88\x30\x74\xab\x79\x30\x23\xbd\x58\x8d\x57\x4d\x09\x4d\xe0\x2a\x6b\x29\x60\x8c\x9c\xab\xc8\x2a\xed\x95\x31\x12\x9e\x76\xdf\xf6\x9f\x1e\x9f\x3e\xef\xbf\xee\xbe\x7c\x7f\x7c\xd8\xdd\x50\x43\x31\x49\x50\xce\x5d\x4d\xf1\x5e\x05\x53\x47\x35\xd0\xdc\xd6\x68\xea\x76\xd7\xa7\xda\x87\x48\x78\xb0\x0e\x67\x27\x67\x7b\x0b\xf1\x62\xf1\xfb\x6c\x7c\x4d\x91\x71\x26\xf7\x9d\xf8\x6f\x10\x9d\xe8\x3b\xb9\x19\xe4\x66\x68\x27\x93\xd6\x26\xf0\x3b\x70\x81\x9a\xac\xd3\x15\x2e\x42\xae\x3d\x66\xb2\xba\xde\x38\xba\xf8\xac\xdc\x3e\x21\x79\xcb\x6c\x63\xb8\x6d\xe5\x2c\xe7\xf5\x0f\x95\xf5\x08\x18\x4c\x8a\x36\x64\xbe\x87\x66\x59\xef\x91\x12\x95\xfb\x6e\x50\x1e\x39\xa9\xf9\x46\xcd\xa7\x1e\x51\x9f\x24\x8c\x39\x27\xd9\xb6\x97\x3c\x16\x43\xe4\xb6\xdb\x76\xed\x22\xc2\xd6\xab\x23\x4a\x38\x6d\x59\x1c\x35\x09\x1b\x67\xc1\x64\x2f\x7a\x51\x13\xe2\xd1\x47\x3a\x4b\xf8\xd0\xd5\x20\x12\x2a\xb3\x8f\xc1\x9d\x25\x64\x9a\xaa\xa2\xac\x95\x43\x09\xfd\xea\x4f\x00\x00\x00\xff\xff\xd5\x57\x8c\x0c\x68\x03\x00\x00")

func stacksCorednsStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCorednsStackYaml,
		"stacks/coredns-stack.yaml",
	)
}

func stacksCorednsStackYaml() (*asset, error) {
	bytes, err := stacksCorednsStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/coredns-stack.yaml", size: 872, mode: os.FileMode(420), modTime: time.Unix(1545254090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioCrdStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\x41\x4b\xc3\x40\x10\x05\xe0\x7b\x7e\xc5\x42\xce\x46\xaa\x37\x6f\x8a\x45\xbd\xc5\xb6\x78\x0d\xe3\xe6\x35\x1d\x9a\xce\x84\xdd\xd9\x96\xfe\x7b\x71\x5b\x14\x2d\x24\x3d\xbf\xef\x0d\xcb\xdb\x6d\xfa\x44\x10\x18\xe2\x43\xe1\x9c\xd0\x0e\x71\x20\x8f\xb6\xf1\x29\x9a\xee\x9a\x80\xa8\x29\x78\x34\x2d\xd6\x2c\x6c\xac\x92\x65\xe9\xbc\xca\x9a\xbb\xc2\xb9\x1b\xf7\x8c\x68\x2c\xf4\x1d\xd6\xda\xb3\x3f\x56\xa7\xb0\xe2\x68\xac\x15\xeb\xed\x7e\x46\xfd\xb0\xa1\xbb\xcc\xe7\x5d\x40\x8c\x8b\xd4\x63\xdc\x2d\x34\x19\xa6\xd9\xeb\x6a\x55\x3f\xd6\x6f\xcb\x01\xfe\x89\xa5\x65\xe9\xae\xf6\xe3\xf0\x3d\xa9\xd1\xd5\x67\x7f\xf4\x18\x2b\x9d\xc0\x0e\x1a\xb6\x2c\xa7\xe9\x3e\x38\x58\xa2\x7e\x89\xb0\x67\x8f\xea\x37\xbd\xa8\xdf\xff\x9f\x3a\x2f\x33\x59\x38\x5f\x9e\x8b\x85\xe3\xb4\x7e\x21\xc3\x81\x26\x61\xe9\x28\xd9\x06\x62\xec\xf3\x53\x72\xf7\xfc\xf5\x7f\x93\x8b\xfa\xac\xf8\x0a\x00\x00\xff\xff\xbd\xa2\x21\x22\x73\x02\x00\x00")

func stacksIstioCrdStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioCrdStackYaml,
		"stacks/istio-crd-stack.yaml",
	)
}

func stacksIstioCrdStackYaml() (*asset, error) {
	bytes, err := stacksIstioCrdStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-crd-stack.yaml", size: 627, mode: os.FileMode(420), modTime: time.Unix(1545254090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x51\x6f\xdb\x38\x12\x7e\xf7\xaf\x20\x74\x05\x72\x2d\x42\xcb\x69\x9b\xbb\x56\x80\x1f\x0c\xc7\x45\x03\x24\xb1\x2f\x76\x71\xe8\x93\x41\x8b\x63\x9b\x08\x45\x6a\xc9\x91\x53\x6f\xb7\xff\x7d\x41\x8a\xb6\xa8\xc4\xae\xb3\xbb\x58\xec\x4b\x1b\xf1\xfb\x66\x38\xc3\xe1\x7c\x1c\xe7\x5a\x2d\xc5\xca\x66\x1d\x42\x0a\xb0\x6b\xf7\x3f\x21\xb9\x56\x08\x0a\x33\xf2\x1b\xf5\xdf\x84\x70\x61\xd9\x42\xc2\x44\x4b\x91\x6f\x87\x6b\xc8\x1f\x6c\x46\xd0\x54\x10\x70\xa1\x56\x06\xac\x1d\x6a\x85\x46\x4b\x09\xe6\x56\x73\xc8\x48\x32\xfe\xf4\x29\x09\x14\x56\xe1\xba\xb6\xcf\xc8\xdd\xf8\x6e\x14\x96\x0d\xb7\xf7\xb0\x34\x60\xd7\x57\x20\xd9\x36\x23\x17\x3d\x1b\x20\x5d\xe1\x42\x57\x8a\xcf\x0c\x5b\x2e\x45\x1e\x8c\x03\x48\x48\xe1\xb7\x18\xdc\xdc\x8c\xff\x3f\x1f\xdc\x7d\xdd\x45\x0a\x4b\x56\x49\x1c\xfa\xbc\x1a\x32\x17\x36\xd7\x1b\x30\xdb\x63\x9b\xf9\xac\x15\xe4\x38\x13\x05\xe8\x0a\x33\xf2\xae\x8d\x2d\xc5\x6a\xc2\x70\x9d\x91\x24\x05\xcc\x53\x61\x51\xe8\xb4\x34\xfa\xdb\x36\xd9\xd3\x16\x42\x31\xb3\xdd\xd1\x2a\x6b\x52\xa9\x73\x26\xd3\x85\x50\x29\xa8\x8d\x8e\xa8\x16\xcc\x46\xe4\x30\x94\x95\x45\x30\x19\xf1\xfe\xa8\xf7\xd7\x04\x6d\x98\x50\x57\x95\x61\x28\xb4\xca\xc8\xfb\xcb\x26\xa0\x92\x19\x50\x38\x5d\x57\xc8\xf5\x63\xc4\xb9\x28\xa2\xa8\x85\x42\x30\x39\x94\x0e\xaa\x0b\x72\x3f\xba\xba\xbe\x1f\x0d\x67\x8d\x1f\xb7\xe1\x80\x17\x42\x4d\xb4\xc1\x8c\x5c\x5c\xf6\x7a\xbd\x38\x6d\x57\xcf\x89\x64\x0a\x06\x87\xeb\x17\x1d\xed\x80\x73\x77\x09\xf6\xb9\x08\xa9\xb1\xfb\xea\xfb\xdd\xe0\x76\x34\x9d\x0c\x86\xa3\x1f\x99\xf3\xfe\xdf\x4e\x27\xe4\xee\x6f\x5d\xc4\xad\xab\x25\xd9\x02\xa4\xdd\x55\xce\xc3\x19\xf1\xb8\x5f\x5a\x49\xbd\x60\x72\x5e\x82\x29\x84\xb5\x42\xab\x40\xa5\xe4\xec\x4d\x28\x53\xd7\x1b\x75\x85\x4e\xdf\x9c\x35\x98\x02\x7c\xd4\xe6\x41\xa8\x23\xb8\xbb\x9f\xa0\x50\xe4\xfe\x24\x8f\x70\x4a\x01\xdf\x10\x94\xdf\xb7\xfb\xf0\xc1\x3a\x42\x5e\x59\xd4\x85\x01\xab\x2b\x93\x03\x87\xa5\x50\xc2\xb9\xb0\x91\x61\x63\x95\xe2\x5a\x18\x5e\x32\x83\xdb\x9d\xc9\xcb\x89\xdd\x06\x3e\x6c\x13\xfa\xf0\x98\xcb\x3d\x9c\x5a\x64\x58\xed\x59\x66\xc1\xf2\x28\xe3\xb0\x9a\x1b\x60\x08\xe7\x2b\xc0\x73\x29\x2c\x9e\x3f\x32\xcc\xd7\xe7\x55\xc9\x19\x42\x38\xea\x82\x95\x36\xb0\x41\xf1\x52\x0b\x85\xbb\xef\x52\xf3\xdd\x9f\xbb\x7a\x87\x4f\xc5\x0a\xb0\x25\x8b\x16\x34\x87\x86\x9b\x1b\x08\x4e\xac\xe0\xf0\x20\x9c\xd6\x74\x9e\x5c\xb5\x2c\xba\xa2\x45\xc1\x14\xcf\x1a\x8c\x50\x2a\xf5\x6a\xae\x2b\x2c\x2b\x9c\x4b\xd8\x80\xec\x73\x58\x54\x2b\x42\xa9\x01\xbb\x55\x79\xff\xed\xfa\x49\x67\xdb\xc6\x21\xad\x85\x30\x6a\xf2\x9a\x92\xba\xe5\x3d\x0b\xd4\x46\x18\xad\x0a\x27\x93\x91\xe9\x64\x7c\x35\x77\xf7\xbd\xff\xea\xdf\x16\xe4\x32\x75\xa9\xbe\x3e\x80\xfb\x7e\x88\x49\xfe\x3c\x5a\xcc\xeb\x9b\xf1\x6c\x3e\xfb\x7c\x3f\x9e\xcd\x6e\x46\xfd\xcb\xa8\x2b\x77\xe0\x70\x30\xfc\x3c\x9a\x4f\xff\xf7\x65\x30\xfd\xdc\xbf\x6c\xba\xbe\x60\x2b\x08\x4d\x98\xd6\x8d\x75\xd1\xed\x75\xdf\x47\xd2\xe3\x8f\x38\x23\x82\xbb\x0b\x8f\xdb\x3a\xd9\x1c\x0c\xda\xb8\xed\x6a\x35\x6a\xd2\x83\x6f\xa5\xb6\x10\xa7\xeb\xfb\x39\x5d\x23\x96\xed\xc5\x8b\x5e\xba\x32\x65\x1e\x2d\x7e\xec\x7d\x7c\xe7\x89\xe7\xee\x1f\x5a\x68\x25\x50\x1b\xa1\x56\x47\xc2\x76\x3b\x6f\xde\x3e\x09\x7c\x57\xeb\xc8\x6f\x5b\x30\x29\xa1\xb4\x2d\xac\x11\x14\x29\x4d\xcb\x00\xa1\x28\x25\x43\xf8\x24\x24\x44\xc0\x53\x95\xaf\x05\x7c\x5e\xab\xda\x96\x15\xb2\x8b\x45\x29\x5b\x9e\x0e\xcb\x65\x44\x69\xe9\xe6\xdf\x7e\x85\xae\xef\xa6\xb3\xc1\xdd\x70\x34\xbf\x9e\xec\x78\xa2\x7c\xfd\xb2\x6b\xb0\x57\xe6\x5c\x20\xe3\x20\xeb\x08\x43\x8d\x92\xd0\x17\x01\xf2\x45\x4a\x3a\xcf\x2a\xe4\x8e\x84\x95\x25\x28\x4e\xb9\xb2\xd4\xc7\xd8\xdf\x0f\x0d\x0e\x75\x97\x84\x96\xda\x60\xff\x43\xef\x3f\xbd\xf6\xf2\x5a\x5b\x74\x26\xfd\xb0\x4d\xa7\x29\xb0\x5c\x52\x2b\x56\x0a\x38\xcd\x59\xdb\x61\xe0\x52\x8b\xda\xb0\x15\xd0\xfd\xb9\xf4\x8d\xd0\xd4\x6e\x2d\x42\x71\xe2\x19\x79\x34\x02\xa1\x25\x43\x7b\x01\x63\x79\xae\x2b\xf5\x74\xb5\xfe\x3c\xe0\xc9\x09\x27\x07\x09\x08\x84\x43\x29\xf5\xd6\x95\xda\x3e\x07\x0f\x7b\x7f\x4e\x38\x80\x1c\xf6\xeb\xd5\xba\xd6\xe9\x1d\x31\x7a\x04\xfe\x8c\x8d\x81\x52\x8a\x9c\xd9\xbd\x32\xbf\xe8\xee\xac\x18\xc2\x23\xdb\x1e\x7a\xd7\x93\x80\x25\x19\x49\xdc\x3e\x46\x31\x99\x9c\xa8\x4c\xe2\xe2\xac\x1f\xa1\x28\xda\x13\x4f\x66\xf2\x73\xe3\x37\xe9\x46\x18\xac\x98\xdc\x9d\xf1\x49\x3e\x07\x8b\x42\xf9\x21\xc1\x54\xf2\x05\x06\x21\xd3\x40\xac\x97\xe7\xda\x70\x37\xf5\x59\xd4\x25\x5d\x0a\x63\xf1\xf0\x83\x77\x50\x87\x5d\xc3\xd8\x8c\xbc\xfa\x3e\x19\xdf\xcf\xa6\x3f\x9e\x2a\x68\x72\x40\x42\x93\x3f\xa2\xa1\x46\x57\x6d\xe5\xa4\x9b\xe8\x23\x79\x9b\xb4\x44\xef\xe0\x64\x1d\x31\xce\x2e\xec\x19\xf9\xd7\x29\x16\xa5\xad\x61\x37\xb6\x7f\x7f\xe9\x1d\x1c\x81\x29\x3d\x3c\x0a\xb7\x22\x28\x7a\xce\xc5\x49\xa2\x57\xf0\xe8\x37\x40\xcb\x87\x77\x71\x14\x3f\xfd\xee\x3c\x7b\xa8\x7e\x15\xe5\x83\x50\x61\x68\x8e\x0f\xb8\x7d\xbe\x6e\x52\xb3\xfc\x0b\x2f\x4f\x32\xdb\xb3\x7c\xcc\xf3\x53\x7d\xf2\x17\xde\xaa\x56\xa1\x9f\x07\x12\x0f\xf1\xf5\x8c\xbf\xc3\x40\x6d\xfe\x91\xc7\x8d\x92\xeb\xe9\xec\x7a\x3c\xbf\x1d\xcd\x06\xf3\x9f\xef\xba\xd3\xb2\x38\x9f\xa3\x83\x91\xef\x0f\xf7\x2c\xba\xb5\x78\x48\x0c\xa3\x75\x68\x76\x1a\x94\xb0\xf3\x4b\xe5\xe4\xc2\x8b\x18\x25\x1b\x66\x84\xfb\x19\x9d\x91\xd9\xe8\x66\x74\x3b\x9a\xdd\x7f\x6d\xb2\xed\xb8\xdf\xae\x36\x37\xa2\xac\x7f\xc9\xd5\x6d\x4c\x11\x24\x14\x80\x66\xdb\x8c\xcd\x49\xa7\xd3\xf9\x3d\x00\x00\xff\xff\x51\x23\x47\x9f\xb8\x0f\x00\x00")

func stacksIstioStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioStackYaml,
		"stacks/istio-stack.yaml",
	)
}

func stacksIstioStackYaml() (*asset, error) {
	bytes, err := stacksIstioStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-stack.yaml", size: 4024, mode: os.FileMode(420), modTime: time.Unix(1545947989, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksIstioTelemetryStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x6d\x6f\xdb\x36\x10\xfe\xee\x5f\x71\x68\x07\xc4\x69\x2b\x3b\x69\xd1\x01\xd1\x60\x14\x6e\x93\xb6\x01\xda\xc4\x48\xd2\x01\x43\xd7\x11\x27\xf1\x6c\xb3\xa5\x48\x8d\xa4\xdc\x18\xf0\x8f\x1f\x48\xc9\x12\x9d\x28\x69\x17\x60\xfb\x64\xf9\xde\xef\xb9\x17\x5e\xae\xd5\x5c\x2c\x6c\x3a\x00\x28\x8d\x2e\xc8\x2d\xa9\xb2\x49\x4d\xf5\x44\x80\x5c\x2b\x47\xca\xa5\x00\x9b\x24\x10\x00\x16\x52\x67\x28\xd3\xe6\x1f\x80\xcd\x0d\x96\xc4\x84\x72\x64\x56\x28\x53\x38\x7c\x69\x07\x3b\xac\xd6\x4d\x43\x7e\x0c\x97\x81\x01\x35\x03\xe6\xda\x00\xa9\x95\x5e\x83\x75\xe8\xb6\xca\x09\x7c\xd5\x19\x53\x58\x50\x0a\x7b\x81\x9d\x04\xf6\x5e\xeb\xb9\x20\x67\x44\x6e\x59\x89\x6e\x99\xc2\x38\x70\xc7\x5d\x22\xad\xdc\xb7\x2a\x23\xa3\xc8\x91\x65\x96\xb3\x28\xe9\xad\x23\xa3\x25\xa5\x50\x6a\x3e\x68\x89\x86\x24\x66\x24\xfb\xa4\xad\xae\x4c\x4e\x2c\xf0\x6d\x0a\x9f\x19\x2b\xc8\x21\x8b\xbc\x94\x3a\xb8\x71\x28\x14\x19\x56\x6a\xe3\x42\x1e\x5f\x5a\x23\x00\x98\x3b\xa1\x55\x0a\xdf\x88\xca\x88\x6c\x68\x41\xd7\x29\xec\x8d\x9e\x24\x75\xca\x3e\x9d\xbd\x7b\x9d\x23\xe7\x86\xac\x65\xec\x19\xf4\x47\x82\x4a\x69\x87\xde\x1d\xeb\xc0\x61\x42\x87\xc0\xfa\x62\x32\x54\x4a\xcc\xe9\x76\x58\xc3\xcf\x7f\xa5\x5f\x9e\xee\x0f\x5f\xa5\xe9\x9f\xfc\xe9\xfe\xab\xdf\x86\xfe\x67\x47\x2e\x68\x16\xa1\x65\x7e\x39\x4c\x0f\x5f\x1e\x1c\x1d\x44\x7c\x87\x66\x41\xae\x8e\x3e\x85\x28\xf6\x28\xc3\x6d\x14\x41\xa8\xc0\x1e\x74\xfa\xd3\xac\xeb\x35\x1c\x45\x01\xfd\x4c\xad\x7c\x61\x6c\x89\x79\x6f\x75\x6e\x23\xb1\x9b\x41\xab\xfc\xaf\xdb\xe3\xae\x7e\xf8\x91\xc7\xad\xee\xe0\xc6\x14\xb0\x3b\x1b\xf6\x31\x9c\x5c\xe7\xb2\xe2\x04\x56\x17\x04\x7a\x0e\x6e\x49\xcd\xbc\x35\x13\x04\x6e\x89\x0e\x96\xb8\x22\x28\xd0\x5a\xb1\x22\xc8\xd1\x70\xa1\x50\x0a\xb7\x8e\x2c\x5d\x2d\x85\x05\x29\xac\x83\x02\xd7\xa0\x88\x38\x38\x0d\x19\x41\x69\x2a\x45\x1c\xe6\x95\x71\x4b\x32\x50\xe8\x95\x50\x61\xb0\xbf\xa3\xe1\xcf\x00\x2d\x08\x35\xd7\xa6\x20\x1e\x59\xcb\xd6\x50\x92\xf1\x64\x54\x39\x01\x2a\x0e\x36\x47\x89\x99\xf0\x6e\xc1\x91\x75\x42\x2d\x46\xf7\x60\x0b\xb9\xac\xac\x23\x13\x20\x81\x2f\x3d\x83\x34\xd4\x95\xcb\x74\xa5\xf8\x46\xa8\xfa\x37\x9a\x81\xb0\x31\xf6\x47\x4f\xf6\x7a\x0a\xc1\x8d\x2e\xef\xf3\xec\xf2\x92\x95\x86\xe6\xe2\xfa\xff\xf5\xeb\xd1\x27\xbf\x56\x9a\xd9\xe9\xf7\x3e\x7a\xba\xff\x10\xe3\x2c\x00\xc9\x58\xaf\xd1\xd0\x32\xcc\x49\xfb\xb0\xc0\x7f\xc6\x76\x5e\x32\xae\xbf\x2b\xeb\x0c\x61\xf1\x9f\xb9\x59\x3a\x57\xb2\x61\x28\xc2\x06\x79\x21\xd4\x03\x4b\xf1\x13\xae\xb6\xfd\x39\x94\xd9\xc6\x90\x33\xeb\x4d\x26\x42\x4f\x38\x32\x0a\xe5\xa6\xc0\xeb\x8d\x36\x62\xe1\x47\xed\xbe\x28\x06\x00\x0b\x83\x73\x54\x98\x70\xb4\xcb\x4c\xa3\xe1\xa5\xd1\x2b\xc1\xc9\xd8\x1b\x4f\xf5\xa6\x31\x82\xa5\xf8\x9d\x8c\x0d\x46\x0e\x1b\xda\x0d\x1d\x9f\x16\x17\x16\x33\x49\xc7\x24\xa9\x76\x38\x47\x69\xbb\x05\x34\xd7\x92\x93\x49\x41\x58\x27\x74\x4b\xad\x9f\xe5\x5d\x9a\x2e\xbd\x7e\xb4\x79\x00\x9a\x97\x79\x85\x66\x2c\x45\x36\x6e\x52\x18\xb7\x29\xd8\xf1\x0d\x13\x66\x71\xca\xbb\x68\x01\xdc\xba\xa4\x14\xe6\x42\xd2\x0e\x02\x0e\xeb\x62\xdc\x95\x7a\x7f\xf2\x00\xb7\x34\xa1\x79\x72\x72\xb2\x36\xf5\xe8\x5c\xaf\xa3\xf0\x89\x0b\xe7\xb1\x49\xc1\x99\x2a\xde\xc9\xc2\x1e\xd3\x1c\x2b\xe9\x6e\x71\xbe\x5a\xad\x8e\xd1\x61\x8c\x02\x80\x13\x05\x9d\xb6\x07\xd2\x4b\x1b\x31\x6b\x24\x67\xb7\xaf\x96\x1e\x34\xb6\x78\xf4\xdc\x38\x00\x95\x91\x29\xf8\xd6\x4e\xc7\xd1\x11\x94\x1e\xf9\x17\x78\x60\xc9\xac\x44\x93\x75\xc4\x0c\xea\xf5\x41\xc7\x4a\x32\x85\xb0\x36\x2e\x61\x02\x4a\x73\xea\x0e\xb2\xad\x95\x96\x40\x8a\x97\x5a\xa8\xe8\x66\x2b\x35\xb7\xbb\xda\xe3\x18\xd5\xa4\xb9\xf9\x0a\x2c\x3b\xb1\x05\x39\x1f\xfd\x64\xdc\x3c\x47\x81\x21\x0a\x5c\x34\xa9\xc6\xe9\xac\x9e\x8f\x5e\x8c\x0e\x3b\x89\x59\x25\xe5\x4c\x4b\x91\xaf\x53\x38\x9d\x9f\x69\x37\x33\x64\x49\xb9\x20\x41\xd7\xa5\xb6\x54\x67\x93\x80\x47\x62\xec\x01\xda\xf6\x4c\xf7\x4e\x26\x3d\xf7\xef\x98\x5c\x1e\x79\x8e\x3e\x47\xeb\x42\x36\x36\x8a\x02\x15\xdf\xda\x48\x12\xeb\xb4\xc1\x05\x8d\x9c\xe5\xd9\xc8\x90\x6f\x4a\xa1\xd5\xe4\xd7\x65\x2b\x51\x1b\x1f\xf9\x8e\x9e\xfc\xd0\x43\xd3\xf0\xb5\x7d\x52\x2b\x61\xb4\x0a\xb7\x55\x63\xee\xdd\xc5\xf4\xed\xf4\x6c\xca\x66\xe7\x17\x57\x93\x17\x07\x07\x07\x5b\xfa\x5b\x36\xfd\x74\xf5\x9e\xbd\x9e\x5e\x9e\xbe\x61\x27\x67\xd3\xd7\x1f\x4e\x8e\x27\xdd\x5c\x77\x12\xd3\xb3\xf3\xb3\x3f\x3e\x9e\x7f\xba\x6c\xa5\xda\x7e\xee\x13\x3a\xbf\x78\xc7\x2e\xce\x3f\x9c\x4c\xc2\xda\xec\xc4\x66\xd3\xab\xf7\x97\xec\x78\x7a\x35\x9d\x8c\xfd\x8c\x6d\x27\x3d\xae\x24\x47\x61\x97\xa8\x0e\x8f\x8e\x9e\x6f\xd9\xa9\x44\xff\xc8\xf7\x57\x13\xe5\x77\x5c\xdb\x9e\x3a\xfa\x44\xef\xac\xe3\x3d\x5b\x32\xc0\xbd\x5d\x41\x81\xec\x9b\x5d\xa8\x45\xbc\x8f\x6e\xeb\x8d\xd6\xd8\x94\x3b\xe9\xdd\x40\xf7\x99\x6d\xa5\xe2\xef\xce\xe0\x4a\xcb\xaa\xa0\x36\x76\x2f\x93\xee\xe2\x37\x18\xfc\x5d\xf9\x33\x28\x0c\x65\x02\x2b\x34\xa2\x5e\x48\x1f\x5e\xb3\xb3\xe9\xc7\x93\xcb\xd9\xf4\xcd\xc9\x00\x80\x93\xcd\x8d\x28\xeb\x05\xfe\x28\x2c\xd5\xc4\xae\xad\xa3\xa2\xbb\x51\x1f\x0d\xfe\x09\x00\x00\xff\xff\x4b\x50\x2b\xc6\xf0\x0d\x00\x00")

func stacksIstioTelemetryStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksIstioTelemetryStackYaml,
		"stacks/istio-telemetry-stack.yaml",
	)
}

func stacksIstioTelemetryStackYaml() (*asset, error) {
	bytes, err := stacksIstioTelemetryStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/istio-telemetry-stack.yaml", size: 3568, mode: os.FileMode(420), modTime: time.Unix(1545947863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksLocalstorageStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x51\x8b\xd3\x40\x10\x7e\xcf\xaf\x18\x82\x70\x2a\x97\xe6\xf4\x49\x16\x7c\xa8\xd7\x16\x85\xbb\xb6\xd8\x53\x1f\x44\xc2\x34\x99\xb6\xeb\x6d\x66\xc3\xee\x24\x20\xea\x7f\x97\xdd\xa4\x69\x7b\x70\x3e\x25\x33\xdf\x37\xbb\xb3\xdf\x37\xf3\xd8\x6e\xc9\x31\x09\x79\x95\x00\xd4\xc8\x7a\x47\x5e\x14\xfc\xc9\x12\x00\x00\x6c\xf4\x57\x72\x5e\x5b\x56\xe0\xc5\x3a\xdc\xd3\xe4\xf1\x9d\x9f\x68\x9b\x77\x6f\x22\xe3\x51\x73\xa5\x60\xd3\x63\xb7\x06\xbd\x8f\xe9\x9a\x04\x2b\x14\x54\x31\x02\x60\xac\x49\x81\xb1\x25\x9a\x21\x83\xcc\x56\x50\xb4\x65\x7f\x24\xc1\xf1\x8e\x32\x9c\x33\x39\xf5\x16\xee\xd3\x3e\xab\x68\x87\xad\x91\x2c\xc2\x0a\x52\x71\x2d\xa5\xb1\xb6\x71\xb6\xd3\xa1\x4d\x72\x0a\x1c\x72\x79\x20\x17\x8a\xe2\x85\x59\x83\x72\x88\xb4\xce\x9a\xb6\xa6\x0f\x9a\x2b\xcd\xfb\x7b\x5b\x91\x82\x6f\xa8\x65\x61\xdd\x42\x3b\x2f\xb7\x96\x7d\x5b\x93\x8b\x5c\x17\xba\xd0\xf5\xda\x1a\x5d\xfe\x52\x30\x23\x43\x42\x49\x52\x5a\xde\xe9\x7d\x6c\xb9\xff\xed\x9b\x2f\x2d\x0b\xf1\x49\x38\x80\xdf\xe3\xa3\x52\xb6\x15\xad\x51\x0e\xf7\xd8\xa4\x0a\xbe\x8f\xc0\x39\x69\x24\xa6\x0a\xd2\xd9\x7c\x31\xfd\x72\xf7\x50\xac\xa7\x0f\x1f\x8b\xc5\xea\x73\xb1\x5c\x2d\x8b\xbb\x4f\x9b\x87\xf9\xac\x58\xae\x66\xf3\x4d\x7a\x7d\x59\x18\x5e\xe8\x9f\x9c\x1d\x81\xbc\x43\x97\x1b\xbd\xcd\x07\x51\x72\x17\xac\x8b\x32\xf8\xf4\x82\xfc\xe3\x2c\xfa\x9b\x3c\xcd\xf6\x19\x83\x5b\x32\xa3\x5d\x25\x8a\x18\x0a\x32\x97\x8e\x50\xac\x53\xc0\xd6\xd5\xc8\x89\x27\xd7\xe9\xb2\x9f\xa9\x93\x05\xd9\xb9\x4b\x83\x6a\x75\x8d\x5c\xf5\x41\xf6\x0c\x75\x00\xb3\xac\xa2\x6d\xbb\x1f\x22\x2f\xe8\x64\x44\x7a\x27\x86\x30\x27\x29\xf3\x3e\x33\x7c\x26\x3f\xbd\xe5\xa3\x4d\xd1\xbd\xa3\x77\xff\xe3\x12\x77\xda\x59\xae\x83\xad\xc3\xd1\xeb\xd5\xac\x58\x4e\xef\xe7\x9b\xf5\xf4\x76\xfe\xfe\xc5\x4b\x4f\x66\x97\x87\xd1\xf6\x0d\x96\xf4\x2a\xb2\xf6\xc6\x6e\xd1\x14\x0d\xb9\x5a\x7b\x7f\x1a\xef\x0c\x82\xbb\x7e\xf8\x6f\xc2\x56\xf9\x30\x32\xbd\x19\x71\xd6\x8e\xe0\xd5\x6b\x20\xae\x1a\xab\x59\xfc\xd5\x29\xf7\xb4\xe6\x02\xb3\xd5\x18\x46\x37\xe8\xba\x41\x29\x0f\x40\x1d\xb1\xf8\x51\xb5\x8b\x15\x3e\xdf\xb6\xa1\x33\x5d\xe3\x9e\xc6\x15\xca\x9f\x31\xaf\xbb\x99\xdc\x4c\xde\x26\xff\x02\x00\x00\xff\xff\xdc\x03\x0d\x3a\x3d\x04\x00\x00")

func stacksLocalstorageStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksLocalstorageStackYaml,
		"stacks/localstorage-stack.yaml",
	)
}

func stacksLocalstorageStackYaml() (*asset, error) {
	bytes, err := stacksLocalstorageStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/localstorage-stack.yaml", size: 1085, mode: os.FileMode(420), modTime: time.Unix(1545254090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksNfsStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xda\x40\x10\xbd\xf3\x2b\x46\xa8\x47\x9c\x28\x55\x0f\xcd\x4a\x39\x44\x91\x2b\x72\x28\x20\x40\xa8\x37\x34\xd8\x03\x8c\x58\xef\x3a\xbb\x63\x27\xa8\xed\x7f\xaf\x76\xcd\x87\x1d\x40\xaa\x6f\xb3\xf3\xde\xdb\xf9\x78\xeb\x5d\xb5\x22\x67\x48\xc8\xab\x1e\x40\x81\x86\xd7\xe4\x45\xc1\x9f\xa4\x07\x00\x80\x25\x2f\xc8\x79\xb6\x46\x81\x17\xeb\x70\x43\x77\xbb\xef\xfe\x8e\xed\x7d\xfd\x10\x11\x3b\x36\xb9\x82\x59\x93\x7b\xd1\xe8\x7d\x3c\x2e\x48\x30\x47\x41\x15\x23\x00\x83\x05\x29\x30\xeb\x26\x5b\x3a\x5b\x73\x50\x25\xd7\x1c\xf6\x3c\xb9\x9a\xb3\xa6\x0a\xb3\xf6\x49\x1b\x11\x29\x5c\xe0\x86\x14\xbc\x55\xb8\x0f\xb7\xd3\x87\x90\x33\xa8\x97\x87\xaa\xee\x03\x29\xd3\x4c\x46\x3a\x5c\x8d\x42\x5e\xa2\x02\x99\xba\x91\x4a\x60\x32\x1d\x2f\x5e\x67\xaf\xe3\x51\x3a\x5d\x8e\x9e\x7f\xa6\x4f\xc7\xc2\x12\x18\xfd\x98\x2d\x67\xe9\x74\x91\x4e\x9f\xbe\xfc\x3e\x07\xcb\xe1\x78\x36\x0f\xd0\xbf\x2d\xdc\xe4\x79\x3e\xec\xa2\xd2\x5f\x93\xf1\x74\x1e\x13\x0d\xb0\xb6\xba\x2a\x9a\xb6\x02\x2b\x8e\xe4\xbe\x0c\x23\xf5\x42\x46\x0e\xe9\x98\xdd\x68\xbb\x42\xbd\x2c\xc9\x15\xec\x43\xf9\x27\xd6\x86\x64\xa0\xd9\xcb\xe0\x1d\x25\xdb\x0e\x32\x47\x28\x34\xc8\x49\x93\x10\x5c\x17\xbb\x20\x55\x65\x8e\x57\xd0\x99\x46\x2e\xae\x53\x3e\x2f\xfc\x10\x66\x61\xc7\xa7\x5b\x0e\xb5\x34\xea\x83\x32\xf2\xa8\x26\x23\x87\x45\xff\x6f\x33\x5d\x01\x93\x97\x96\x8f\x1a\x8e\xbc\xa0\x13\x05\xa8\xdf\x71\xef\x7b\xf1\xd0\x73\x4e\x3b\xce\x76\xfe\x68\x30\x36\x2c\x49\x67\xda\x2d\xd7\xe4\xc8\x7e\x8b\xe6\xe1\xf1\xf1\x6b\xcb\x28\x6d\x73\x84\x2f\xb3\x45\x81\x26\x3f\xb3\x13\xe8\xfb\x6d\xbf\x1d\x26\x59\x27\x2c\x6c\x65\x04\x12\x09\x96\xfd\x06\xd7\xfd\xa2\x6e\x1a\x04\x2e\x8d\x70\x56\xbf\x68\xe5\xa6\x79\x94\xdf\xa2\xa3\xfc\x04\x2c\x1d\xd7\xac\x69\x43\xb9\x02\x71\x15\x9d\x87\x61\x58\x5e\xac\x11\xe4\xf8\xee\xba\xb9\x30\xa8\x49\xa5\xf5\xc4\x6a\xce\xf6\xe7\x61\xbf\x55\xe4\xa5\xd9\x5f\x02\x35\x3a\xc6\x95\x26\x05\x57\x3a\xed\x01\xe4\xe4\x33\xc7\xa5\xc4\xff\x45\x7f\x68\xbd\x84\x77\x0f\x76\x1d\xf0\x10\xde\x38\xb9\xfe\x2d\x9d\xd6\x68\x2e\xa4\xd2\x8f\xd2\x3a\x81\x12\x65\xfb\x49\xed\x5f\x00\x00\x00\xff\xff\x7c\xd3\x96\x06\xc1\x04\x00\x00")

func stacksNfsStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksNfsStackYaml,
		"stacks/nfs-stack.yaml",
	)
}

func stacksNfsStackYaml() (*asset, error) {
	bytes, err := stacksNfsStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/nfs-stack.yaml", size: 1217, mode: os.FileMode(420), modTime: time.Unix(1545254090, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksRioAutoscalerStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x51\x6e\xdb\x30\x0c\x86\xdf\x7d\x0a\xbd\x15\x18\xaa\x34\x09\x86\xa1\xd5\x29\x8a\xf5\x00\x01\x23\x31\x0e\x11\x89\x12\x24\xca\x6e\x86\x1d\x7e\x70\x6c\x2f\xf1\x96\x01\x05\xb6\x3d\xfa\x27\xf5\xeb\xe7\x27\xda\x46\x3e\x50\x5b\x4c\xa3\x14\x54\x89\xc5\x82\x47\x3d\x8a\x83\xa6\x94\x8d\x2c\xc8\x62\xd4\x77\x7d\xf9\x56\x0a\x19\xf6\x1e\xf5\xd8\x2a\x51\x7f\xc3\x1c\x8d\x92\x5c\x71\x6a\x08\xf0\x3e\x55\x6b\xd2\x19\x04\x8d\xda\xac\xa7\xda\x60\x07\xc4\x98\x87\x4b\x6c\xcd\x19\xd9\x9e\xb5\x40\x6e\x51\x74\xc2\x6c\x91\x05\xda\xe1\xc4\xea\x43\x47\x1c\x1e\xa0\x7a\x31\x6a\x33\x75\x17\xb9\xa4\xeb\x89\x5d\xec\x8d\xfa\xb2\x2e\x53\x21\x01\x93\xbd\xea\xb3\x2c\x64\x4f\x9a\x58\x30\x77\xe0\x8d\xda\xce\xfa\x62\x3c\x2d\xc7\x8c\xe5\x18\xbd\x33\xea\x73\xb8\xdb\xd1\x66\xb0\x38\x4c\x40\xd1\x19\xb5\x0d\x4d\x53\x30\x77\x64\x71\xc9\x36\x8f\x54\x5b\x1f\xf7\xe0\x77\x09\x73\xa0\x52\x28\x72\x19\x75\xad\x1e\x3e\xa9\x11\x7f\x80\x54\x1e\xae\x22\x76\xc8\x72\x2b\xcc\xf6\x37\x12\xa3\xf4\x31\x9f\x88\xdb\x15\x15\xa1\xb8\xa2\xf8\xd4\x51\x96\x0a\xfe\xd7\xee\x16\xe5\xb1\x07\xb1\xc7\x47\x4f\x45\x1e\x6b\x72\x20\xa8\x32\x45\xfd\x33\xea\xca\x82\x88\xc7\xc1\x64\x3e\x7d\x99\x00\x6d\x0c\x01\xd9\x81\x0c\xb9\x6f\xfc\x6e\x9c\x26\x6f\x87\x1e\x47\xdb\x3b\x66\x77\x93\xa8\x14\xdd\x6f\x9e\x97\xb2\x42\x76\x29\x12\xcb\x58\xa6\x70\x59\x13\x07\x54\x8e\xc0\x9b\x97\x97\xed\xd3\x22\x7d\x36\x0e\xbb\x6b\xe7\x6b\xf5\xfe\x35\x7a\xb2\x67\xa3\xc0\xf7\x70\x2e\xd3\x76\x87\x00\xec\x66\xf8\x4b\x87\x49\x5c\x08\x2d\x08\xf6\x70\xfe\x37\xaf\xf8\x77\xd0\xae\x68\xe6\xe7\xfb\x1f\x84\xf0\x3d\xc5\x82\xf3\x5c\xcf\xeb\xa7\xa3\x48\xfa\x30\xbb\x09\xd7\xf4\xa5\xf5\x90\x19\x79\xe6\xf1\xbc\x7e\x68\x9a\xe6\x54\xf7\x98\x19\x65\xfc\x53\x18\x02\x96\x04\x16\xdd\xce\xd6\x22\x31\xec\x32\x96\x58\xb3\xc5\x9d\xc3\x03\x31\xc9\xcc\x59\xab\xb7\x11\xca\xdb\x70\xe3\xd7\xc5\x5a\xae\xfe\xb4\xc9\xdd\xa6\xf9\x11\x00\x00\xff\xff\xee\xa5\x13\xe4\xf3\x04\x00\x00")

func stacksRioAutoscalerStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksRioAutoscalerStackYaml,
		"stacks/rio-autoscaler-stack.yaml",
	)
}

func stacksRioAutoscalerStackYaml() (*asset, error) {
	bytes, err := stacksRioAutoscalerStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/rio-autoscaler-stack.yaml", size: 1267, mode: os.FileMode(420), modTime: time.Unix(1546647669, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stacks/cert-manager-stack.yaml":    stacksCertManagerStackYaml,
	"stacks/coredns-stack.yaml":         stacksCorednsStackYaml,
	"stacks/istio-crd-stack.yaml":       stacksIstioCrdStackYaml,
	"stacks/istio-stack.yaml":           stacksIstioStackYaml,
	"stacks/istio-telemetry-stack.yaml": stacksIstioTelemetryStackYaml,
	"stacks/localstorage-stack.yaml":    stacksLocalstorageStackYaml,
	"stacks/nfs-stack.yaml":             stacksNfsStackYaml,
	"stacks/rio-autoscaler-stack.yaml":  stacksRioAutoscalerStackYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stacks": &bintree{nil, map[string]*bintree{
		"cert-manager-stack.yaml":    &bintree{stacksCertManagerStackYaml, map[string]*bintree{}},
		"coredns-stack.yaml":         &bintree{stacksCorednsStackYaml, map[string]*bintree{}},
		"istio-crd-stack.yaml":       &bintree{stacksIstioCrdStackYaml, map[string]*bintree{}},
		"istio-stack.yaml":           &bintree{stacksIstioStackYaml, map[string]*bintree{}},
		"istio-telemetry-stack.yaml": &bintree{stacksIstioTelemetryStackYaml, map[string]*bintree{}},
		"localstorage-stack.yaml":    &bintree{stacksLocalstorageStackYaml, map[string]*bintree{}},
		"nfs-stack.yaml":             &bintree{stacksNfsStackYaml, map[string]*bintree{}},
		"rio-autoscaler-stack.yaml":  &bintree{stacksRioAutoscalerStackYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
