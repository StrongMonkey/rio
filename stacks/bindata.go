// Code generated for package stacks by go-bindata DO NOT EDIT. (@generated)
// sources:
// stacks/build-stack.yaml
// stacks/cert-manager-stack.yaml
// stacks/gloo-stack.sh
// stacks/gloo-stack.yaml
// stacks/gloo-values.yaml
// stacks/linkerd-stack.yaml
// stacks/rio-autoscaler-stack.yaml
// stacks/rio-controller-stack.yaml
// stacks/tekton-stack.sh
// stacks/tekton-stack.yaml
package stacks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stacksBuildStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x4d\x6b\xdb\x40\x10\xbd\xfb\x57\x0c\xea\x21\x10\xac\x0f\xa7\x21\x71\x04\x3e\x84\xa6\xb4\xbd\x85\x34\x97\x12\x4a\x58\xad\xc6\xeb\xc5\xab\x5d\x31\x3b\x96\x6b\xe8\x8f\x2f\xb2\x56\x2b\x85\x04\x8a\x40\x88\x37\x6f\x66\xde\x9b\x19\x49\x67\xb7\x5a\xf9\x72\x01\x50\x1d\xb4\xa9\xf7\x9a\xeb\x74\x00\x7b\x6c\x86\x66\xec\x1a\x53\xc2\xdf\x33\x0a\x50\x63\x75\x50\x1b\xa6\x03\x06\xe0\x45\xc9\xdf\xe1\x13\x00\xad\xa8\x0c\xd6\x9b\xad\x30\x3e\x12\x8e\x8e\xf6\x48\x99\x93\xfa\x3d\x71\x56\x08\x40\xc9\x37\x89\x3d\xb0\x47\x6c\x3d\x3b\x12\x0a\x37\xab\xe2\xf6\xf3\xed\xf5\x6a\x7d\x75\x1d\x5b\x53\x3b\x6b\x2e\xea\x9a\xd0\x7b\xd8\xc0\x0b\x24\x2c\xdb\x32\xcf\x8b\xec\xfc\x94\xeb\x62\x5d\x24\x30\x51\x3f\x0d\x3e\xee\x43\x86\xf6\x31\x79\xeb\x08\x04\xb3\x90\x3b\x6d\x15\x28\x07\x2d\xb9\xad\x36\xe8\x41\xd8\x7a\xc8\x52\x48\x3e\x8b\xa5\xde\x14\xda\x40\x32\xb6\xbc\x29\x6e\x8a\x64\xb1\xf0\x48\x9d\x96\xf8\x76\xd2\xc3\x88\x75\x23\x14\x96\x90\x34\xae\x3a\xe5\x63\xac\xec\x8a\xec\x26\x5b\x25\x67\x46\xeb\x88\xfd\x40\x4e\xa1\xf7\x90\xef\x98\xdb\xa5\xb6\x8c\x64\x85\x99\xa6\xe7\x51\x1e\x48\xf3\xe9\x8b\xb3\x8c\x7f\xb8\x0c\xea\x5a\xd2\x9d\x36\xa8\xb0\x2e\x21\x72\x67\xab\xef\xcb\xbe\x5b\x7f\x8e\x2c\xa3\x9c\x31\x83\x85\xb6\x48\x31\xc9\x8a\x06\x4b\x20\x54\xda\x33\x9d\x42\xb7\xd1\xcf\x08\x97\x57\xc9\x62\xdc\x76\x37\x4a\x4a\xe1\xe9\xeb\xb7\x1f\x3f\x9f\x9f\x7e\xbd\x7e\x7f\x7e\x7e\x7c\xbd\x7f\x78\x78\xda\x4c\x6b\x1a\x85\x4f\xc6\x07\xeb\xe5\xba\xc8\x59\xb6\xcb\xb1\xf6\x07\x33\x00\xe8\x9c\x39\x34\x38\xcb\x0b\x97\x93\x46\x45\x79\x27\x28\x37\xba\xca\x63\x9d\x16\xc9\x6b\xcf\x68\x7b\xab\x47\xac\x76\xce\xed\x87\x02\xca\xb8\x4a\x98\xd7\x16\xa9\xd1\xde\x6b\x67\xa3\xfb\xe4\x12\x94\xe6\xa3\x60\xb9\x43\xca\xa4\x60\x36\x98\x69\x97\x4f\xa0\x4f\xfe\x4f\x95\xae\x69\x34\x47\xe6\xc5\x65\xd8\x4c\x23\x5a\x7f\x31\x81\xd8\xa1\xe5\x08\x28\xe4\xa5\xd1\x9e\xa1\x75\xb5\x0f\x98\x24\x14\x8c\xcb\x18\xca\xfb\x58\x6e\x9c\x0a\x71\x8f\x92\x90\xfd\xfc\xe6\x48\xd8\x5e\xd0\x4c\x71\x7f\x77\xd7\xd9\xea\x4c\x12\x34\x9d\xc7\xc4\x08\x40\x9a\x9a\xf3\xbc\xd2\xf0\xc7\x04\xb8\x5c\x17\x77\xc5\xd4\xe2\xf1\x60\xcc\xa3\x33\x5a\x9e\x4a\x10\xe6\x28\x4e\xfe\xa3\x83\xbe\x0b\x07\xdd\xbf\xd2\x30\xfc\xc5\xbf\x00\x00\x00\xff\xff\xfd\xdd\x6c\x3f\x9b\x04\x00\x00")

func stacksBuildStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksBuildStackYaml,
		"stacks/build-stack.yaml",
	)
}

func stacksBuildStackYaml() (*asset, error) {
	bytes, err := stacksBuildStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/build-stack.yaml", size: 1179, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksCertManagerStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xc1\x6a\x32\x41\x10\x84\xef\x3e\xc5\xb0\x08\x82\x30\xfa\xff\xb7\xb0\xb7\x25\x48\x4e\x09\x42\x72\x0f\x93\xb1\x32\x0e\x99\x9d\x5e\xba\x7b\x4d\x44\x7c\xf7\xe0\xba\xd1\x11\x72\xc8\xb1\xab\xbe\x6a\xaa\x04\xbc\x8b\x1e\x52\x4f\x8c\xf1\x60\xb5\xad\xcb\x2e\x80\x4f\xb7\x31\x21\xd1\x9b\x4b\xaf\x1d\xb8\x8d\x22\x91\xb2\x9c\x75\x6b\x66\xf3\x01\x1f\xe9\xc5\xc7\x9d\x2c\x22\x2d\xe7\xb3\xab\x8d\x2f\x45\x1e\x32\xcb\x98\x03\x43\x04\x52\xd8\x9e\xf2\x7b\x0c\xad\xeb\x4a\x51\xe0\x19\x5a\x2a\xd8\x21\xeb\x2d\x72\x2e\x5c\x48\x1d\x6d\xc6\x33\xb6\x2e\xa0\x36\x15\xbb\xec\xb7\xe0\x65\xb9\xc8\x7a\xca\xca\x94\x12\xb8\x9e\x1e\x5e\x9a\x87\x63\x75\xcd\xac\xfb\x94\xd6\x94\xa2\xdf\xd7\xa6\x49\x9f\x6e\x2f\x83\xe7\x38\x5c\x16\x97\xbf\x46\xc9\xda\x04\xb7\x01\x5b\x24\x78\x8d\x94\x6d\x76\x2d\xa4\x73\x1e\x23\x31\x3d\x3c\x35\x8f\xab\xe7\x75\x73\xbf\x3a\x5e\x42\x3e\xf5\xa2\x60\xcb\x10\xea\xd9\xe3\x6f\x29\xe7\x5b\xd8\xad\x6a\xf7\xef\xbf\x15\x4a\x3b\xb0\x1d\xaa\x8f\xc0\xef\x9b\x4f\xa1\x33\x7c\xb3\x79\xa8\x4e\x41\x49\x74\x03\xfe\x99\x53\x29\xf7\xa8\x26\x93\xef\x00\x00\x00\xff\xff\xb5\x0f\x05\x7e\x14\x02\x00\x00")

func stacksCertManagerStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksCertManagerStackYaml,
		"stacks/cert-manager-stack.yaml",
	)
}

func stacksCertManagerStackYaml() (*asset, error) {
	bytes, err := stacksCertManagerStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/cert-manager-stack.yaml", size: 532, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksGlooStackSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xce\xcf\x4b\xc3\x40\x10\xc5\xf1\xfb\xfc\x15\x4f\x2c\xac\x1e\xb6\x7b\x2f\x45\x28\x12\x6f\xfe\x00\x3d\x0b\x93\x74\xba\x86\x4e\x36\x92\x99\x28\xc1\xf8\xbf\x4b\x0c\x3d\x7e\x0f\x8f\xcf\xbb\xbe\x4a\x75\x5b\x52\xcd\xf6\x41\xd4\xb0\xe3\x0e\x59\xfb\x3e\x9a\x73\x73\xde\x4e\xdc\x29\xf6\x7b\x54\xcf\x0f\x74\x1e\x6b\x19\x8a\xb8\xd8\x8e\x80\x8e\x4b\x7b\x12\xf3\x1d\x66\xda\xdc\x2c\x93\xc6\x15\x6d\x31\x67\x55\x64\x76\xf9\xe6\x09\xb1\x20\x6c\x7e\x9e\x0e\x8f\xd5\xeb\xcb\xe1\xbe\xfa\x0d\x88\xf1\x8b\x75\x14\xc3\x36\xfd\x3b\x6b\xad\x50\x8c\xc7\x61\x8a\xc3\x58\x30\xc3\xe4\x88\x60\xe9\x3d\x01\x40\xca\xe1\x96\xc8\xa5\xfb\x54\x76\x59\xf8\xdc\xbf\x5d\x0a\x27\x56\x13\x5a\x2e\xfe\x05\x00\x00\xff\xff\x9e\x2f\xe5\x9e\xcd\x00\x00\x00")

func stacksGlooStackShBytes() ([]byte, error) {
	return bindataRead(
		_stacksGlooStackSh,
		"stacks/gloo-stack.sh",
	)
}

func stacksGlooStackSh() (*asset, error) {
	bytes, err := stacksGlooStackShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/gloo-stack.sh", size: 205, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksGlooStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x20\xdc\x05\x6e\x0b\x54\xb2\x93\xdb\xde\xee\x0a\xb8\x87\x34\xed\x16\xc5\xa5\x59\x23\xc9\xf6\xe5\x70\x10\x68\x69\x22\xf3\x42\x91\x5a\x92\x72\xe2\xeb\xf5\x3e\xfb\x81\x14\xf5\x9f\xb6\xe5\x38\x89\xd3\xb4\x79\x68\x6d\x91\x1a\x0e\xe7\xf7\x9b\xe1\x0c\x49\x5f\xe7\x33\x10\x0c\x14\xc8\xe0\x00\xa1\x14\x33\x72\x05\x52\x05\xe8\xbf\x07\x08\x21\x64\xfe\xc1\x19\xf9\x04\x42\x12\xce\x02\xfd\x19\x6e\x15\x30\xfd\x4d\xfa\xd7\xbf\x48\x9f\xf0\xf1\xe2\x70\x06\x0a\x1f\x9a\xce\xd7\x84\xc5\x01\x3a\xc9\xa5\xe2\xe9\x39\x48\x9e\x8b\x08\xde\xc2\x15\x61\x44\x11\xce\x4c\x97\x14\x14\x8e\xb1\xc2\x81\xf9\x86\x10\xc3\x29\x04\x48\x82\x52\x84\x25\xd2\x4f\x28\xe7\xbe\xe4\x94\xfb\x84\xdb\x1e\x98\x31\xae\xb0\x16\x20\xcb\x97\x10\x1a\xcd\x81\xa6\xbe\x9c\x8f\xe7\x9c\x5f\x8f\x02\x14\x89\xd8\x23\x4c\x2a\x4c\xa9\xed\x43\xf1\x0c\x68\xe3\x0d\x2d\xb9\x1e\xc8\x3c\x96\x19\x44\x65\x87\x44\xf0\x3c\x0b\x90\x63\x7c\xad\x61\x43\x4e\x31\xc7\x8b\xa6\x1c\x33\x1c\x91\xea\x1f\xad\xa6\x53\x22\x55\xd5\x9c\xd1\x5c\x60\xda\x19\xdf\xe8\x30\xe7\x42\x9d\xb5\x87\x40\xc8\x43\xd5\xbb\x32\xe2\x19\x04\xc8\x74\xc9\x70\x04\xb1\x7d\xbe\x28\x51\x59\x1c\xb6\x9f\x34\x04\x79\xd6\xbc\x55\x17\x23\x10\xc4\x02\xe2\x00\x29\x91\x43\xf3\xb1\xe2\x02\x27\xd0\x78\x6e\xfe\xf1\x3c\xef\xb1\xc9\x90\x60\x05\x37\x78\x29\x7d\xfb\xa1\xc4\xc3\x5f\x1c\xed\x42\x09\x17\xda\xab\x06\x70\x62\xfe\xbe\xe8\xed\x80\xdc\xb6\x38\x11\x2f\x67\xb3\x11\xf1\xe4\xa6\xee\x42\x58\x92\x53\x2c\xaa\xb7\x07\x73\xe1\x68\x33\x17\x8e\xd6\x82\xbe\x82\x23\xfb\xe2\xc2\x82\x08\x95\x63\xaa\xf5\x21\x11\xf4\x28\xf1\xb0\x7c\x58\x47\x86\x4f\x85\x62\x17\x85\x62\x0e\x4e\xb4\x3b\x38\xa9\xd1\x99\xdc\x46\x86\x2c\xa4\x83\x21\x6d\x21\x3b\x07\x0d\x47\xc8\x70\x06\x8c\xa7\x13\x2e\x04\xcf\x15\x28\x3c\xa3\x4f\x89\x1e\xe7\x5a\xa9\x4b\xad\x94\x83\x1a\x75\xa3\x93\x16\x8d\x09\x6d\xa4\x84\x50\x0e\x4a\xd4\x02\xbe\x41\x3a\x64\x82\xdf\x12\xb8\xbf\x4c\x62\x87\x24\x61\x2a\xf8\xad\x6b\xb9\x30\xcf\x9d\xd0\x5b\xe5\x37\xc2\x9e\xdd\x3a\x60\xcf\x1a\xc3\x7d\x4b\x88\xe7\x99\x54\x02\x70\xfa\x24\x30\xff\xc3\x2a\xe3\x80\xbd\x6c\x72\x22\x5f\x4d\x62\x23\xf6\xb9\x6b\x15\xc8\xdb\xc3\x7e\x8b\xf0\x1b\xa0\x9e\x14\x07\xde\xeb\xd7\xd6\x10\xc1\xb4\xaf\x65\x43\x31\xa7\xcd\x94\x48\xd6\x50\x22\x69\x68\xf1\x2d\xf1\x02\xe7\x6a\x1e\x71\x76\x45\x12\xe9\x03\x53\x20\x32\x41\x24\x3c\x24\x3f\xd6\x8f\xe2\xa4\xca\x71\xae\xe6\x27\x46\x49\x07\x4f\xea\x46\x27\x49\x1a\x13\x5c\xcb\x10\x0f\xe1\xc8\xc1\x8f\xfa\xf5\xa7\x42\x8e\x26\x2f\x16\x4d\xf4\x2b\x95\xd6\xc0\xfd\xc3\xe7\xb3\xe3\x8f\xef\x2e\xa6\xc7\x27\xef\xbe\xd8\x86\xee\x16\x00\xce\xac\x13\x6f\x83\x7b\x26\xa0\xb3\xb3\xd0\xe9\xe3\xdd\x00\x49\xe6\x6a\x14\xa0\xd1\x64\x34\x6c\x3e\xb6\x28\x38\x8e\x22\x9e\x33\xe5\x9c\xd4\x26\xdd\xcb\x0d\x8d\x6d\xa7\x33\x6a\xcc\x67\xb4\x71\x42\xaf\x47\x2d\x1b\x37\x06\x63\x25\x24\x0e\xcb\x3f\xba\x11\x62\x22\x23\xbe\x00\xb1\x7c\x34\x4b\x74\x47\x5c\x67\x8e\x95\xb1\xef\xc1\x38\xd1\xda\x34\x78\x04\x5a\xb4\xc6\xdb\xc8\x8c\xbd\x1a\xc5\x6b\x66\xc9\x8f\x66\x9a\xd6\xa8\x77\x30\x90\x5d\x04\x69\x2e\x15\x88\x73\x6e\x0b\xbb\xa6\xd9\xc4\x0c\x47\xbe\x0e\xe9\x5c\x90\xff\x98\x29\xd5\x8b\xa9\xd3\x6e\xa5\x86\xd7\xf9\x0c\x3c\x61\x17\x56\xef\x06\xab\x68\x0e\xa2\x5e\x8c\x3a\xd6\x75\x5b\xb8\xb6\xb2\x56\xa3\x86\xc2\x65\xde\xa1\x06\x5e\x6d\xe2\x43\x1b\x66\x45\x4e\xcb\x65\xce\xd3\xb6\x30\xe9\x94\x0c\xd0\x3f\x47\xa3\x7f\x59\x31\xe5\xbc\xcc\xd3\x8c\xc7\x72\xf4\x0a\x8d\xca\xfd\x96\xe2\x73\x24\x40\x99\x8f\xc0\xe2\x8c\x13\x56\x7c\x29\x16\xc6\x14\x67\xe6\x5b\x85\x98\xac\x24\x2f\x40\xcc\x8c\xd4\x04\x94\xee\xa2\x57\x6d\xfd\xbf\x31\xa0\xed\xf5\xa8\x38\x6a\xfb\x7b\x65\xce\xe7\xa5\xb9\xc2\x8a\x7f\xed\x38\x36\xb3\x28\x37\xa6\x55\xd9\x54\x35\xbf\x40\x79\x16\x63\x05\x88\x48\xc4\x00\x62\x88\xd1\x15\x17\x48\x2a\xac\x72\x69\xdb\xe4\x20\x10\x35\x0d\x04\x60\x05\xfa\x53\xf1\xa2\xfe\x14\x03\x05\x05\xfb\x80\xd8\xb8\xaa\xce\x43\x8d\x5a\x5f\x3d\xba\xae\xd4\xdf\x8d\x72\x64\xb2\xff\xf2\x51\x5c\x65\xff\xab\xdd\xb1\x07\xdc\xbe\x3c\xb2\x8a\xac\x02\x70\xfc\xd5\x07\xd6\x96\x43\x9a\x98\xe9\xac\x78\x36\xf9\xea\xab\x51\xbb\xc0\xd5\xa2\xec\xd6\x97\xfe\xd8\x28\x6c\x1e\xc6\xad\xf7\xc7\x89\xf2\xfc\xcf\xcb\xe5\xf3\x22\x83\x13\xf1\x72\xb6\x0f\x1a\x9c\xf7\xee\xd9\xdf\xca\x5a\x5b\x7a\xe8\xb0\x14\xe8\xc9\xad\x9e\x65\x2a\xfe\xcc\x22\x72\xfb\x4c\xca\x8d\x5c\xe7\xa0\x51\xe3\xd0\x38\x64\x7a\x84\x18\x7b\x17\xa5\xcb\x83\xf3\xed\xd4\x7b\x85\x0a\xd6\x99\x26\xf3\x91\xb0\x04\xa9\x39\xa0\x18\xae\x70\x4e\x15\xe2\x0c\xa4\x7f\x67\x0a\x0f\x99\x8f\xbf\x38\xba\xcf\x29\xed\xaa\xeb\x5a\xff\x7a\x43\x58\x4c\x58\xb2\xbb\x9b\xad\xa9\x26\xbd\x59\x31\x88\x77\x87\x3d\x3a\x87\xb7\x3d\x40\xd5\x7e\x68\xcb\x76\x99\xcf\xfe\x0d\x91\xaa\x5c\x6d\xe5\x2e\xc4\x96\x3b\x62\x03\x24\x6d\xb3\xa3\x24\x38\x85\x73\xb8\x2a\x67\xef\x0e\x9a\x43\x0a\xfc\x92\xc5\x6b\xf0\x1e\x1a\xa8\xef\x99\x48\xce\x72\xf6\x19\x13\xe9\xc1\xe0\x5f\xb7\x2f\xf0\xc4\xe1\xef\xac\xd4\xcf\x18\xfd\x81\x61\x64\x7b\xe0\xdd\xc9\xce\xd3\xc5\xbd\x55\x1f\x7d\x07\x7c\x88\xa4\xc1\x9b\xef\xfb\x8c\x42\xae\xba\xf7\xe9\xb2\xd0\x59\xdf\x3d\x67\x36\x0e\xe6\xd0\x0e\x11\xe8\xab\x59\x7a\xdc\x75\xe2\x77\xf8\xb7\x86\x7f\x6d\xc1\x3d\x94\x00\x2b\x0f\x0a\xfb\x45\xd7\xd8\xde\x6d\xee\x5f\xd7\x5e\x8f\xb4\x39\x9c\xf3\xda\x97\xbf\x57\x18\xe0\x9e\x2e\x15\xdc\xe9\x4c\xb1\x79\xe3\x44\x93\xf1\x38\x8e\x05\x48\x19\xa0\x51\x10\x8c\x1a\xcf\xa7\x5c\xa8\x00\xfd\x32\xf9\x65\x62\x1f\xce\x95\xca\xac\x35\x02\xf4\xb9\x9c\x48\x2e\xc1\x5c\x44\x9c\x0a\xae\x78\x80\xec\x53\x29\x69\x80\xae\x30\x95\x25\x96\xc6\x38\xad\x1b\x25\x9e\xdb\x70\x2b\xdc\xf5\x11\x70\xf3\xa4\xa4\xcf\x0b\xbb\x9f\x7e\xfa\xeb\x5d\xb1\x6b\x5c\xb8\x19\x0c\x5d\x0b\xb0\x17\xa8\xd8\x7b\x0f\x53\x9c\xf5\xc0\x6b\x9d\xce\x17\x77\x93\x3e\xda\x6e\x03\xb1\x02\xb6\xe0\x4b\xaf\x75\xf1\x68\x37\xd0\xd6\x1d\xf0\xa3\xce\xf8\x24\x5e\xe1\xf5\xb5\xe2\xf6\x4d\xa3\xa6\xbf\xc4\x29\x2d\x7f\x0e\x65\x34\xe5\x31\x34\xf7\xf7\xa2\x22\xf4\x75\x43\xa8\xfe\xd3\x43\x8d\x3e\x7f\xf6\xa7\x3c\xd6\x10\x7c\xf9\xe2\xd7\x5f\xcc\x64\xbf\x7c\x69\xee\x00\xf6\x77\x2d\x0b\x2c\x74\xc4\xfd\x8b\x44\x0b\x4c\x73\xb3\x4b\xa4\xe6\x80\xae\x61\x69\xb6\x89\xf4\x67\xc2\xbc\x14\x52\x2e\x96\xe8\x36\x96\x28\xc2\xd1\x1c\xd0\x8f\x99\xe0\x66\x05\x18\x6b\xcb\x8c\xb3\xeb\x64\x7c\x1b\xcb\x71\x31\xa5\x84\xbf\x6c\x0d\xa1\x07\x68\x69\x6a\x95\xfb\x5f\xd7\x4e\xb5\xb6\x52\xfb\x48\x14\x36\xb6\xb6\x5e\x20\x72\x85\xb8\x40\x3f\xfe\xa0\x89\xee\xeb\x0e\xf2\x65\xf9\x4d\x87\xfd\x82\x2a\x2f\x8b\x8e\x8d\x4e\xcd\x07\x75\xbf\xbe\x85\x3b\x17\x1e\xeb\xfc\xc2\x6f\x32\xc6\x97\x8b\xc8\xb7\x6f\xf8\x94\x47\x98\x06\xbf\xfe\xfa\xf3\xcf\xad\xf9\x62\xaa\x42\x3d\x74\x58\xc8\xb8\x8d\x65\x68\xdf\x68\x75\x8b\x38\x63\x10\xa9\x50\x91\x14\x78\xae\x02\xf4\xda\x9f\x4c\x26\xb2\xd5\x87\x72\x1c\x87\x58\x4a\x92\xb0\x14\x98\x6a\x43\x57\xa9\x1e\xee\xa0\xac\xe6\xa1\xbd\x95\xd0\x95\xee\x21\x3a\x0b\x57\xb6\xea\xf6\xb2\xb1\xdf\x66\xec\x60\x23\x90\xb3\x11\x21\xc9\xa3\x6b\x50\xe1\x86\x5e\xb5\x98\x21\xf3\x5b\x29\x24\xe3\x42\x85\x86\xe2\x01\xea\xd9\x40\x47\xc0\xa3\x30\xd3\x91\x2e\xe2\x34\xe4\x59\x11\x9f\xeb\x60\x58\xfc\x95\x5b\x1c\xa1\x45\x8e\x70\x56\xf5\xed\x0c\xac\xa2\x2c\xbc\x06\xc8\x30\x25\x0b\xe8\x09\x52\xcb\x0c\x02\x74\x71\x79\xfe\xe1\xe4\x32\x7c\x7b\x76\xd1\xf6\x16\xd0\x54\x55\x61\xcc\x64\xa8\x94\x0d\xb7\x05\x89\xfd\x4f\x7a\x02\xd2\xc7\x51\x04\x52\x9e\xf2\x24\x01\xe1\x03\xc3\x33\x0a\x71\x93\xe6\x4a\xe0\x88\xb0\xe4\x4e\x3e\x63\xdf\xad\x54\x8a\x97\x0c\xa7\x2d\x57\x3c\x68\x42\x23\xc3\x22\xce\x76\x0f\x35\x48\x58\x4c\xf2\xfd\xf9\xf4\xa4\x3d\x3d\xac\x20\xa4\x24\x25\x2a\x2c\x2b\xb6\x9e\x7d\x12\x91\x45\x61\x79\x94\xd0\x96\xec\x15\x61\x33\xd4\x5d\x02\xf4\xf9\x6e\x0e\xd0\x1c\x2d\x5a\x35\x85\xb8\xab\x17\x1d\xd8\x13\xc7\x29\x61\x2d\x2b\x19\xb8\x42\xca\x93\x30\xc3\x6a\x1e\xa0\x71\x0c\x8b\x31\xcb\x29\x6d\x99\xd2\xe1\x06\xeb\x5d\xa4\x72\x8c\xc3\xa3\x9f\xfd\x89\x3f\xf1\x0f\x3b\x1d\x9a\xa4\x3f\xfc\x75\x32\x99\x14\x40\xff\x08\x69\xa6\x96\x16\xef\xa8\x5c\x61\x7d\xbd\x36\xbc\x44\x2f\x5e\x20\x4c\x29\xbf\x91\xe8\x2a\xa7\x14\x15\xf7\x22\xf4\x2a\x81\x59\x02\xe8\x07\x6d\xe8\x57\xc5\xab\x28\xf8\x7b\xc5\x48\x1b\xc9\xa7\xc5\xf9\x5d\x8b\xac\x65\x32\x66\x79\xda\xca\x06\x36\xdd\xca\x73\xae\xfa\x77\xb8\xb7\xba\xd5\x8e\x48\x9d\x48\x1d\xd4\x66\xec\x5d\x44\xd6\x04\x3c\x68\x1a\xba\x13\x57\xca\x68\x12\xa0\xcb\x93\x69\x99\x3d\x01\x85\x48\x71\x11\xac\xd2\x74\x7d\x39\x72\xff\x16\xda\x25\x9f\xd9\xa1\xc4\x69\xa6\xaa\x1d\xe3\x66\xb6\xb2\xa8\xb4\x51\x58\x24\xa0\x7a\x05\x87\xdb\xc0\xa5\x4e\x3a\xa0\x77\x44\xd6\xf9\x6e\x47\x66\xb3\x61\x93\x4c\xb9\x1a\xc8\xa1\x46\xeb\x74\x0d\x90\x5e\x21\x6c\x5b\x11\x32\x4f\x39\x8e\xdf\x60\x8a\x59\x64\x13\x86\x01\xd4\xc0\x59\x26\xc7\x2d\x7e\xbc\x85\x8c\xf2\xa5\x4e\x1a\xf6\xec\x44\x7a\x45\xcb\x28\x89\xb0\x0e\x54\x2b\xed\x97\x62\x15\xcd\x4f\x7b\xe7\xe3\x3d\x25\x14\xa4\x19\xc5\xaa\x91\x22\xbb\xd2\x5a\xd7\x41\x7b\x4f\x54\x5b\x49\x64\x7f\x51\x50\x6f\x60\x9c\x75\xe7\x8b\x8a\xa4\x4d\x61\xc2\x7a\xe9\x22\x49\xcd\xaf\x0e\xfe\xcc\xf1\xd2\x27\x7c\xac\x2b\x4f\x8f\x70\x93\x1d\x07\x13\xff\x68\xe2\x1f\xb5\x94\x31\xdd\xa7\x39\xa5\x53\x4e\x49\xb4\x0c\xd0\x87\xab\x33\xae\xa6\x02\x24\x30\xd5\xea\xd9\xb3\x7a\x69\x53\xc7\x72\x5c\x34\xfc\x99\x83\x74\xa5\x6b\x51\x96\x07\xe8\xf5\x64\x92\xf6\x5a\x8a\xf4\x3e\x40\x47\xaf\xff\xf6\x91\xb4\x17\x20\x88\x72\x41\xd4\xf2\x84\x33\x05\xb7\xbd\x3c\x4f\xe7\x10\xbf\x33\xba\x3c\xe7\x5c\xfd\x46\x28\xc8\xa5\x54\x90\xf6\x7e\xeb\x8d\x4c\x52\x4c\xf9\xcd\x54\x90\x05\xa1\x90\xc0\x3b\x19\x61\x6a\xca\xe0\xf6\x56\x40\x25\x38\x67\xc7\xf2\x8c\x33\x2d\xd8\x29\xce\x74\xf8\x43\xea\xc2\xe8\x70\x72\x38\xe9\xae\x7c\x11\xce\xf0\x8c\x50\xa2\x48\xdf\x42\x08\xc5\x82\x67\xae\x74\xf6\xf8\xf4\xb4\xf5\xb4\x15\x9b\xca\x4e\x15\x03\xa6\xfd\xa0\x5f\xfc\x39\x16\x08\x2b\xcf\x19\x5e\x50\x51\x0b\xf6\xb3\xef\x42\xce\xf4\xf7\xb7\x61\xe5\x5c\x3d\xa5\xcd\xea\xfe\x9b\xe0\xa9\x2b\x7f\xbe\x22\x40\xe3\xc6\x66\x9a\xa3\x75\x6a\x12\x92\xd2\x87\x7c\xd6\xfa\x19\xcc\xbe\x62\x4e\x6f\xb3\xb0\x8e\xa6\x5b\xaf\x2f\xbb\x07\x9f\x96\x36\x3b\xc7\x9f\x4e\x15\x3f\x28\x04\xf5\x2a\xff\x6d\xa3\x90\xdd\xdd\xb9\x8f\x40\xd4\xd0\xe5\x7b\xa4\xa8\xfe\x9e\xa6\xff\xee\xcd\x75\xf7\x9a\x51\xde\x97\xc7\x77\x26\xb1\xc5\x34\xee\x29\x48\xf4\x14\xd8\x2a\xcd\xec\x75\x6f\xa4\x9a\x77\x09\x3f\x3d\x6d\x56\x05\x21\x2c\x12\x73\x89\xcc\xf3\x62\x22\x75\xcd\xe7\xcd\xb9\xf2\x04\x48\x85\x85\xaa\xee\xa5\x15\x7f\x3d\xbf\x19\xe2\x35\x6b\x7c\x66\x9d\xc7\x6c\xf6\x97\x55\x4a\x3c\xec\xf8\xfd\x78\xec\xce\x23\xed\xbe\xf6\x8d\xc0\x59\x06\xe2\x1e\x83\xb9\x9b\x3b\xfb\x0a\xe8\xf7\x13\x90\x51\xb1\x3f\xe2\xea\x7a\xf6\xee\x32\x7c\xf3\xe1\xec\x6d\x78\xf1\xee\xfc\xd3\x87\x0e\xbb\x86\xa4\x7c\xad\x32\xb4\x69\xcf\x46\xd9\x59\xc9\x5b\x99\xf2\xf5\xc5\x36\x2b\xd1\xae\x58\x39\x58\xee\x82\xd3\x3c\x85\x8f\xda\x7f\x7b\x13\x49\xf5\xd3\x82\x82\x63\x50\x51\xb1\x5f\xef\x1c\xd3\x71\x86\x52\x0b\xef\x38\x7c\xb5\x85\xd4\xb5\xf6\xf0\xf3\x99\xb5\x43\xeb\x65\xec\xa0\x19\x53\x13\x7e\x59\x7e\xb3\x14\xfa\x7f\x00\x00\x00\xff\xff\xc4\x13\x30\x9c\x67\x4e\x00\x00")

func stacksGlooStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksGlooStackYaml,
		"stacks/gloo-stack.yaml",
	)
}

func stacksGlooStackYaml() (*asset, error) {
	bytes, err := stacksGlooStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/gloo-stack.yaml", size: 20071, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksGlooValuesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8d\x31\xae\x02\x31\x0c\x05\xfb\x9c\xc2\x67\xf8\x65\x2e\xf0\x25\x2a\x2a\x7a\xef\xe6\x11\x45\x32\xf1\x2a\x36\x0b\xb9\x3d\x0a\xd2\x2a\x14\x48\xb4\x33\xf6\xbc\x54\x6c\xd5\x1d\xad\xc7\x40\x84\xca\x8b\x20\x45\xba\xb2\x18\x02\x51\xc8\xec\x78\xf0\x5b\xae\x68\xfe\x8f\x7a\xd2\x65\xfa\xfb\x96\x1b\x27\x4c\xb0\xb3\x94\xc4\x5e\xb4\x4e\x96\xb0\x89\xf6\x1b\xaa\x8f\x0c\x91\x39\xbb\x1d\xfa\x58\x38\x37\x7d\x16\xd8\xb8\xf8\x20\xfd\xf2\xf7\xe5\x67\x80\x90\x45\x35\xfe\xaa\xbf\x02\x00\x00\xff\xff\x58\xaa\xe0\xf4\xde\x00\x00\x00")

func stacksGlooValuesYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksGlooValuesYaml,
		"stacks/gloo-values.yaml",
	)
}

func stacksGlooValuesYaml() (*asset, error) {
	bytes, err := stacksGlooValuesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/gloo-values.yaml", size: 222, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksLinkerdStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xca\x2f\x2d\x49\x2d\x2a\xb6\xe2\x52\x50\x28\x4f\x4d\x02\x51\x0a\x0a\x60\xb1\x62\x08\x5b\x57\xa1\x24\x1f\xc2\x02\xb1\x13\x0b\x0a\xac\x14\x72\x32\xf3\xb2\x53\x8b\x52\x74\xcb\x53\x93\xa0\x12\x0a\x0a\x05\xf9\x45\x25\x56\x0a\x16\x06\x16\x26\x5c\x80\x00\x00\x00\xff\xff\x1b\xbf\x1e\x08\x52\x00\x00\x00")

func stacksLinkerdStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksLinkerdStackYaml,
		"stacks/linkerd-stack.yaml",
	)
}

func stacksLinkerdStackYaml() (*asset, error) {
	bytes, err := stacksLinkerdStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/linkerd-stack.yaml", size: 82, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksRioAutoscalerStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x41\x4b\xc3\x40\x10\x85\xef\xfe\x8a\x3d\x08\x05\x31\x49\xf5\xd4\x06\x7a\x28\xd2\xa3\x12\xf0\x07\xc8\x74\x33\x5d\x16\x67\x77\x96\x9d\x49\x34\x88\xff\x5d\x1a\x6d\x92\x83\xd0\xdb\xce\xbc\xef\xed\xe3\x8d\x60\xee\xbd\x45\xa9\x6f\x8c\x81\x4e\x59\x2c\x10\xe6\xf3\x64\x8c\x23\x3e\x02\xbd\x25\xcc\xc1\x8b\x78\x8e\xf2\xbb\x2f\xcc\xea\xce\x24\x6e\x65\x35\x8f\x96\xe3\xc9\xbb\x00\x69\xb9\x9c\x3e\x2c\xb3\xe7\xd2\x82\x2a\x61\xe9\xb9\xba\x84\x8e\x59\x68\x39\x04\x8c\x2d\xe8\x39\x61\xe1\xfe\xdf\x73\x15\xa8\x44\x41\xbb\x3f\xce\x07\x70\x58\x1b\xd1\xcc\xd1\x05\x8e\xef\x38\x3c\x6c\xb7\x8f\xd5\xa2\x6a\x8b\xfd\x8c\x36\x1d\x51\xc3\xe4\xed\x50\x1b\xa0\x0f\x18\x64\xd4\x30\xf6\x97\xea\x2f\xfb\xe7\xc3\x6b\xb3\x7f\x3a\xec\x6e\xbf\xa6\xf7\xf7\x28\x26\xce\x3a\x9d\x68\xb3\xae\x37\xeb\x7b\xfc\x4c\x2c\xb8\x3b\x01\x09\x8e\x02\x64\x37\x21\x45\xd1\xe2\xb1\x73\x3f\x01\x00\x00\xff\xff\x56\x67\x15\x4d\x83\x01\x00\x00")

func stacksRioAutoscalerStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksRioAutoscalerStackYaml,
		"stacks/rio-autoscaler-stack.yaml",
	)
}

func stacksRioAutoscalerStackYaml() (*asset, error) {
	bytes, err := stacksRioAutoscalerStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/rio-autoscaler-stack.yaml", size: 387, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksRioControllerStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5a\x5f\x6f\xdb\x36\x10\x7f\xef\xa7\x20\x8c\x01\x05\x0a\xc8\x5e\xb7\x3e\x0c\x7a\x4b\xd3\xa0\x2b\x90\x3f\x86\x9b\x16\xdb\x53\x71\xa6\xce\xca\xcd\x14\xa9\x91\x27\xa7\x6e\x97\xef\x3e\x50\xb2\x65\x49\x56\x64\xc7\xb1\xd2\x75\xf5\x93\x79\x77\xba\xfb\xdd\x1f\x1d\x79\xb4\xe7\xd9\x14\xad\x46\x46\x17\x3e\x13\x22\x01\x4d\x33\x74\x1c\x8a\x7f\x82\x67\x42\x08\x01\x29\x7d\x44\xeb\xc8\xe8\x50\x2c\x5e\xe6\xa4\x39\xe9\x28\x14\x97\x90\xa0\x4b\x41\x62\x4e\x4b\x90\x21\x02\x86\x30\x5f\x09\xa1\x21\xc1\x50\xfc\xf4\xf5\xf2\xe4\xe2\xec\xfd\xf8\xe4\xf4\xec\x6e\xc5\x50\x30\x45\xe5\xd6\x62\xc2\x92\x19\x4a\x60\x56\x38\x24\x33\x22\x17\xb8\xa5\x63\x4c\x42\x31\x60\x9b\xe1\x20\x17\x0b\x82\x6d\x28\x76\x0a\x72\x08\x19\xdf\x18\x4b\x5f\x80\xc9\xe8\xe1\xfc\x37\xe7\x75\xd4\x40\x9e\xaa\xcc\x31\xda\x89\x51\x5d\x30\x2d\x99\x40\x16\x92\x01\x44\x09\xe9\x9c\x6b\x33\x85\x2b\xa0\x81\xb7\xfd\xd6\x9a\x2c\x2d\x91\x07\x62\x30\x58\x7d\xb5\xe8\x4c\x66\x25\x56\x79\x2f\xd6\xcc\x05\xda\x69\x0b\x23\x10\xda\xe8\xc9\xea\xc1\x0f\x93\xf3\x7d\x9e\x7d\xfe\xe2\x79\x07\x1a\x48\xc9\x62\x4c\x8e\x6d\x35\x1c\x5d\x18\x21\x25\x87\x76\x41\x12\xdd\x4e\xb4\xad\x16\xa3\x84\x9c\x4f\xc7\x03\xed\x26\x19\x03\x93\x8e\x6f\x71\x7a\x63\xcc\x5c\x1a\x3d\xa3\x38\x2b\x1e\x2f\x91\x04\x62\xb0\x00\x45\xd1\x6e\xc9\x07\x61\xc6\xcf\x8c\xda\x35\x0c\x41\x9a\xba\x2e\xc0\x16\x53\x45\x12\x1c\x72\xf5\xa9\x08\x53\x65\x96\x09\xea\x3a\x15\x30\x31\xba\x2a\xfa\xa0\x2c\x4e\x33\x52\xd1\x70\xae\x81\x69\x81\xc3\x08\x17\x15\xd5\x12\xe4\x0d\xe9\x78\x48\x9a\xd1\x6a\x50\x6d\x62\x87\xd5\x62\x1b\x12\x89\x96\x13\xd0\x10\xa3\xdd\x23\xa7\x87\xd9\xd0\xc8\xb7\xc6\xce\xbd\x53\x75\x13\xad\x99\x6a\xb3\x4b\x3a\xb6\xe8\x1c\x56\x53\x50\xd2\x46\x8e\x81\xb3\xc3\x0a\x65\x0a\x2c\x6f\x8e\xef\x31\x64\x6c\x9c\x04\x45\x3a\x3e\xbe\xf2\x7b\x9b\x62\x0f\x7e\xf8\x36\x39\xac\x75\xef\x1e\xfc\xe9\x57\x7d\x4c\x7c\xeb\xb3\x8c\xb6\x4f\x2b\x8a\xf4\x1c\x6d\xb4\x43\xf7\xaa\x11\xa7\xd6\xcc\x48\x1d\xda\x8f\x53\xda\xbc\x34\x7b\x64\x5e\x66\x8e\x4d\xb2\xe6\x44\x38\x23\x4d\x87\x77\x56\x5f\x77\xa8\x99\x64\x51\x78\xe4\x98\x4c\xdf\x4d\xa3\x3f\x23\xc5\x56\xd3\xa3\x81\xd4\x28\x92\xcb\x2e\xbd\xa9\x89\x1c\xca\xcc\x12\x2f\x73\x61\x3a\xb0\x2c\xf2\xae\xf0\x28\x47\x62\xe4\x4a\x7b\xbd\xad\x76\xc6\xbc\xc0\x1d\xef\xd9\xf2\x9e\x68\xeb\x72\xa9\x22\x1e\xba\x84\x02\x97\xa2\xdc\xe1\x35\x5b\x98\xcd\x48\xe6\xcf\x1c\x14\xe0\xfc\xd5\xf5\x3b\xd8\xc6\xa5\x92\xb7\xcb\xf7\x52\xb0\x5a\xd4\xf7\xcb\xb5\xe0\x5f\x1f\x27\x8a\xef\xab\x1d\xaf\x46\x9a\x91\x06\x45\x5f\xd0\x96\xe4\x86\x77\x31\x72\xf9\xdd\x27\xb3\x5c\x48\x8b\xc0\x58\x2e\xb3\x34\xaa\x2e\x23\x54\xb8\xb5\x94\x46\x29\x94\xbe\x03\x94\x8c\xd4\xd7\x4b\xb9\xba\x2d\x57\xad\xc1\x64\x9c\xb3\xd1\xdd\x2e\x33\xb8\xb9\xdb\x80\x2c\x0e\xee\x75\xa2\x5f\xd9\x4c\x6f\x08\x29\xa5\xa8\x48\xe3\x36\xa5\x55\xac\xb4\xda\x67\xc4\x7a\x09\x8c\x77\xa7\x92\xf2\x56\x77\xb7\xf9\xdf\x8f\x7f\xeb\x43\x5d\x6b\xfe\x9b\xbc\x32\x20\x0d\x7a\x59\x0d\xf7\x31\xba\x1e\x2a\x81\xd5\x05\xbe\x7d\x08\x8b\x2d\xa5\x11\xbe\x7c\x4c\x6f\x86\x39\x68\xbe\x0e\x2d\xc1\x6e\xd9\x7e\xda\x3d\xcd\x5c\x81\xf7\x38\x63\xfa\x6b\xd2\x11\xe9\x38\x67\x76\x4c\xeb\x46\xb3\xf5\xad\xc6\x06\xd3\xca\x03\xd6\x28\x9c\xe0\x6c\x2d\xbf\x8e\x51\x07\x8e\x95\x64\xfb\x6d\x41\xf7\xfd\x80\xcb\xa6\x7f\xa1\xe4\xf2\x8a\xa0\xd0\xf1\xbe\x38\xc8\x9d\x48\x69\x32\xcd\x5d\xc0\x57\x47\x3e\xd8\x92\xcc\x6f\x55\x5a\x2e\x4f\xda\x02\x5c\x0b\x63\x8b\xed\xbd\x42\xd8\x07\x12\x69\xb1\x0b\x81\xcf\x45\xb0\x1a\xeb\x8f\xe8\xfa\xf1\x2c\xfa\x93\xc3\x5a\x41\x6a\x2c\x57\x0a\xbe\xd0\x77\xc3\x9c\xba\xe0\xd5\xab\x5f\x57\xf4\x42\x2c\x14\x35\x8a\x35\x6c\xa4\x51\xa1\xb8\x3e\x1d\x97\x54\x06\x1b\x23\x8f\x1b\xd2\x0e\xfd\xc6\x69\x6c\x79\x35\xd6\xc8\xd2\xd3\x5f\x89\xed\x7f\x15\x56\x1b\xd4\x3a\xce\x5a\x07\x1d\xe7\x5a\x46\xcd\xa3\x9b\x58\x1d\xd3\xb0\x5f\x33\xfb\xec\x71\x83\xf5\x9e\x75\xd0\xc9\xb7\x87\x41\xbf\x72\x37\xb6\xf7\xad\xcc\x7f\xf7\xc6\xe9\x41\xa3\x41\x9f\x03\xff\x61\xba\x1f\xa5\xf1\x29\x7a\x86\x45\x88\x8c\x56\xcb\xa7\x69\x1b\xf5\xc1\x74\x33\x88\x36\xe7\xd4\xfe\xde\xc6\x47\x21\x38\x2c\x9d\x8f\x33\x79\xdc\xf7\x79\x6f\x2c\x4f\x51\x7b\xa9\xa5\x05\x29\x8c\x31\xfa\xf6\x9b\xd6\xff\xbd\xb8\x8a\x86\x9d\x8f\x32\x3f\x68\xb5\x39\x06\x1d\x81\x7d\xa2\x5a\x3b\x38\x2f\x39\xa1\x18\x32\x2b\x84\x62\xcc\xac\x10\xd2\x1f\xbc\x59\x7e\x17\xf5\xfc\xf5\x6b\x20\x68\x26\x86\x1f\x41\x65\xe8\x86\x93\x0f\x97\x9f\x4e\xaf\x2e\xaf\x27\x57\xe7\xe7\x67\x93\xbb\xbb\xad\x9a\xdf\xc0\x1b\x2d\x5e\x4e\x91\xa1\x5a\xe9\x6f\xca\x9f\x2f\x77\x14\xfa\x66\x04\xa9\xb0\xf6\x19\x9b\xb6\x27\x9a\xc4\xfb\x74\x5e\xff\x07\x40\xf7\xa0\x23\x04\x63\x92\x2a\x60\xac\x68\x69\x40\x15\xdb\x7f\x2b\xd8\xad\xb6\x0e\xb5\x80\x5b\x9d\x9e\x2f\xf7\x1e\x94\xf3\xcc\x1a\x95\x55\xee\x59\x44\x65\x4e\x74\xf9\x28\x1c\xb4\x8c\x9f\x6b\xb3\x9e\x5f\x47\x2e\x44\x84\x33\xc8\x14\x5f\x98\x08\x43\xf1\xea\x97\x9f\x1b\x6c\x93\xfa\x0e\x06\x2a\x14\xde\xa7\x06\xb3\xd0\x78\x79\xdf\xd4\xeb\x3f\xde\x27\x20\x8d\xb6\x01\x99\x12\x88\xf3\xb4\xbe\xbb\x38\x79\x5b\xfe\x67\xa3\xf8\xe4\xbc\x71\xa6\xd4\x38\xbf\x67\x0a\xc5\x89\xba\x85\xa5\xab\xc9\x74\x54\x4d\xf1\x01\x1b\x37\xb2\x14\x74\x89\x37\x2b\xfe\xdd\xd5\xa7\x37\x67\xaf\x3f\xbc\xbd\xbb\x6b\xe8\x08\x82\x08\xa7\x59\xbc\xf5\x30\xea\xa8\x21\x8b\x7a\xd1\x04\x50\xa0\xf6\xca\xcb\x6a\x6e\x84\x74\xe1\xed\xb7\xfe\x9f\xa5\xae\xe3\xf7\xeb\xeb\xf1\xa7\xf1\xe4\xea\x8f\x3f\xef\x53\xb0\x91\xa8\x6b\x28\x2a\xe8\xc2\xd7\xd5\x56\x80\x12\x4f\x1d\x03\xdf\x84\x62\xb4\x00\x3b\xb2\x99\x1e\x59\x32\x23\xe7\x54\xc3\xcc\x7e\x25\xe7\xdb\x14\x44\x57\x5a\x2d\x2b\xf5\xb3\x89\xd6\xb3\xea\x2b\xf7\x77\x86\x2e\xff\x51\xd0\x2f\x02\xb1\x00\x4b\x30\x55\x18\x8a\x7a\xa8\x22\x74\xd2\x52\x5e\x95\xa1\x18\x94\x1d\x42\xb0\x11\xc5\xff\x24\x04\xe7\xe3\x50\x55\x43\x23\x58\x75\x15\xfe\xed\xa4\xd9\x32\xbf\x66\x11\xa9\x35\x9f\x97\xc2\x21\xf3\xea\x77\xf3\xaa\x9a\x7a\x1b\xfc\x37\x00\x00\xff\xff\xa1\x7b\x49\xed\xcf\x24\x00\x00")

func stacksRioControllerStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksRioControllerStackYaml,
		"stacks/rio-controller-stack.yaml",
	)
}

func stacksRioControllerStackYaml() (*asset, error) {
	bytes, err := stacksRioControllerStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/rio-controller-stack.yaml", size: 9423, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksTektonStackSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8e\xb1\x6a\x03\x31\x10\x44\x7b\x7d\xc5\x84\x04\x9c\x14\xbe\xed\x0f\x93\xce\xae\x02\x6e\x52\x07\xf6\x2e\x63\x59\x9c\x4e\x12\xda\x75\x11\xf0\xc7\x07\x93\x4b\x39\xcc\x30\xef\x3d\x3f\xc9\x94\x8a\x4c\x6a\xd7\x10\x66\x75\xbc\xc3\xb9\x78\x2d\x7b\x73\x9d\x97\xe1\x47\xd7\x8c\xc3\x01\xc7\xf3\x29\x2c\xb7\x89\xbd\xd0\x69\x63\x00\x56\x2d\xe9\x42\xf3\x11\xf7\xf0\xf2\x3a\xdf\x7a\xc6\xde\x3e\x70\x75\x6f\x36\x8a\x98\xd7\xae\x91\x43\xac\x35\x66\x6a\x4b\x36\xcc\x75\x95\xed\xbc\x33\x53\x8d\x26\x2d\x35\xe6\x54\x28\x59\x9d\xe6\xb2\x15\x7f\xdc\x3b\x8c\xdf\xd8\x99\x7c\x09\x00\x48\xdc\xbd\x85\xe0\x5c\xdb\x63\xfc\x70\x88\xf5\xf3\x3f\xe1\xa2\xd9\x18\x8e\xe7\xd3\x6f\x00\x00\x00\xff\xff\xdc\xf8\x8e\x36\xd3\x00\x00\x00")

func stacksTektonStackShBytes() ([]byte, error) {
	return bindataRead(
		_stacksTektonStackSh,
		"stacks/tekton-stack.sh",
	)
}

func stacksTektonStackSh() (*asset, error) {
	bytes, err := stacksTektonStackShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/tekton-stack.sh", size: 211, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stacksTektonStackYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xeb\x73\xdc\x38\x72\xff\xee\xbf\x02\x35\xf9\x90\xbb\x2a\xcf\x88\xef\xc7\x54\x2e\x39\xaf\xac\x75\x29\x59\xcb\x2a\x49\x7b\xc9\xd5\xd5\xd5\x5e\x13\x68\x72\xb0\x22\x01\x06\x00\x47\xd6\x5e\xee\x7f\x4f\xf1\x35\x43\x72\x1e\x96\xb4\x5a\xaf\xd6\xe7\xf9\xe0\x12\x80\x46\xe3\xd7\x2f\xa0\xd1\x24\x7d\x5b\x25\xa8\x04\x1a\xd4\xcb\x57\x84\x14\x20\x78\x8a\xda\x2c\xc9\xff\xbd\x22\x84\x10\x28\xf9\x9f\x50\x69\x2e\xc5\x92\xac\xed\xa6\xeb\x96\x0b\xb6\x24\x17\x50\xa0\x2e\x81\x62\xd3\x57\xa0\x01\x06\x06\x96\x4d\x8b\x10\x01\x05\x2e\x89\xc1\x5b\x23\xc5\xbc\xe4\x25\xe6\x5c\xa0\x6e\x06\x9b\x7f\xe6\xf3\xf9\x0e\xfb\x52\xe6\x9c\xde\x9f\xac\xed\x04\x0d\x0c\x97\xba\x94\xec\x1a\x69\xa5\xb8\xb9\xbf\x6c\x68\x1e\xbb\xa4\x2e\x91\xf6\x64\x90\xe7\xf2\xee\x52\xf1\x35\xcf\x31\xc3\x33\x4d\x21\x07\xd3\xac\x9f\x42\xae\xb1\xa3\x4a\xf5\x3b\x25\xab\xb2\x9f\x44\x88\x02\x91\xb5\x1a\x6a\x7f\x73\x52\xc0\xc7\x25\x09\x7c\xdf\xf5\x37\x9d\x84\x14\x5c\x2c\x89\xbd\x9d\x55\xe5\xb8\x24\xef\x2b\x6d\xae\x2a\xf1\x46\x77\xfd\x2b\xa9\xcd\xf9\xe5\xe9\x78\xc5\xba\xf3\x02\xcd\x9d\x54\xb7\xbb\x03\x97\xe7\x6f\xc7\x9d\x65\x2f\x00\x1b\xf7\xab\x7a\x99\xef\x35\xaa\xe5\x04\x43\xb3\xfe\x1b\x71\xdf\x75\x6b\xfc\x8e\x8b\xea\xe3\xa7\xa8\xaa\xb2\xcc\xb1\x40\x61\x20\x6f\xf4\xa1\x7f\x19\x85\xac\x65\x5e\x15\x5b\x66\x73\x82\x45\x69\xee\xdf\x72\xb5\xe9\xa0\x52\xa4\x3c\x7b\x0f\xe5\xa6\x47\x23\x55\x68\x8e\x7b\x94\x4a\x80\x2e\xa0\x32\x2b\xa9\xf8\x4f\x8d\x95\x17\xb7\x91\x5e\x70\x79\x32\x72\xe5\xd3\xbc\xd2\x06\xd5\x95\xcc\x1f\xe3\xcc\x73\x60\x05\x17\xaf\x7a\xa9\x3a\xf4\xf3\x1a\xc0\x58\x57\x73\x32\x9b\xf5\xe6\x41\x2d\x2b\x45\x87\xa2\x96\x92\xe9\x51\xe3\x24\x97\xd9\xa6\x43\xf4\x51\xa6\x27\x82\x6f\xdb\xb8\x46\x61\x86\xc3\x6a\xcd\x29\x02\xa5\xb2\x1a\xf6\xb7\x1a\x2c\xa0\x1c\xac\x56\xeb\x49\x1b\x14\xa6\x35\x00\xcd\x81\x17\x1b\x9b\xa0\x4a\x06\x30\xb3\x4e\xd7\xf5\xdf\x39\xd7\xdb\x06\x55\x08\x06\x37\xcd\xaa\x64\xc3\x26\xc3\x1c\x07\xcd\x12\x0c\x5d\x6d\x5a\x77\x9b\xd6\x5e\xad\x41\xb9\xc1\xba\x47\x6f\x0c\xcb\x5c\xde\x17\x03\xd9\x7f\x43\x88\x4f\x52\x2e\x20\xe7\x3f\xa1\x7a\x41\xe0\x59\xc1\x75\x1d\x37\x0a\x33\xae\x8d\x1a\xc6\xcb\x61\xa1\x8a\xca\x80\xe1\x22\xbb\xc3\x64\x25\xe5\x6d\xeb\x65\x55\x3b\xf9\xe5\xc8\xd6\xc6\xee\x82\xe1\xfa\xb0\x24\x06\xf4\xed\x20\x5c\xda\x3d\x61\xdc\x59\xb7\x54\x25\x06\x11\x34\x3a\x66\x86\x3d\x7b\xc9\x36\xab\x0e\xa3\x92\xf1\xdf\xa6\xae\x6a\x09\x77\xfd\x78\xac\x81\x97\xe8\xe7\x0f\xf6\x85\x13\x6d\xc0\x54\xfb\x5d\x62\x3a\xb6\x51\xc8\xa4\x7f\xe3\x20\x87\x06\x8e\x4d\xda\x00\x1b\x13\xfc\xfa\x2a\x2c\xb7\x59\xd8\x56\x7d\x4d\x42\x38\x55\xf3\x7c\x1a\x21\x07\x4e\xc0\x2e\xbd\x6b\x18\x73\x3c\x20\x69\xd5\xa5\x39\x07\xcf\xfb\xd1\xa9\x7e\xdd\x1e\x84\x6f\xda\x83\xf0\x31\x07\x3b\x95\xc2\x28\x99\xe7\xa8\x06\x74\xcd\x29\xfc\xd8\x94\xf6\x58\x02\x32\xcd\x72\x07\x59\xc8\x37\x5c\x30\x2e\xb2\xa7\x61\x1e\xe6\x25\x32\xc7\x2b\x4c\x37\xa9\x6f\x67\xc9\x23\xb8\x3a\xca\xfd\x79\xd1\x03\x32\x21\x5d\x25\x3f\x22\x35\x9b\x64\xe8\xa0\x29\x3e\x83\xf2\xa1\xe4\xf8\xd1\xa0\xa8\x5b\xfa\x88\xde\x2b\x6d\x64\x71\xd5\xf9\xe5\x5b\x4c\xb9\x68\x76\xe4\x23\xda\x1f\xee\x04\x8b\xc9\x7e\x32\xbc\x6b\x64\xad\xb6\x77\x76\x1c\x31\x0c\x15\x42\x28\x18\xcc\xa4\xe2\xe3\x74\x1a\xf2\x7c\xd0\x3a\x10\x4e\x13\x53\xdd\x80\xbe\xdd\x8c\x94\x79\xa5\x20\x5f\xee\x3b\xca\x34\x95\x25\x6e\x66\xf5\x9d\x55\xb2\x13\x9d\x84\xb4\x5b\xcf\x92\xfc\xfd\x1f\xdb\xa0\xec\xa3\x0d\xf2\x72\xd5\xe9\xf2\xd7\xb0\xc2\xe6\xec\x7c\x21\x36\xe8\xf1\xec\x5a\x60\x7a\xca\x77\xfa\xdf\xdc\xa1\xd9\x6f\xce\x04\x39\x24\x98\x0f\x30\xde\x0a\x30\x7c\x8d\xb5\x82\x4f\xa8\x62\x73\x2e\xb4\x81\x3c\x5f\x92\x99\x51\x15\xce\x46\x86\xe3\x05\x64\xa8\x17\x14\xe8\x8a\x8b\x6c\xc1\x85\x41\x25\x20\x5f\x0c\x78\x1c\x32\xe3\x27\xe7\x3c\xd0\xb0\xdd\xb4\x79\xcf\x67\x30\xd4\x2d\x31\x31\xee\x79\x8d\x79\xc7\xb0\xad\x24\x5b\x43\xad\xa4\x32\x17\xe3\xf5\xe7\x84\x17\x5b\x66\x9a\x8b\xac\xca\x41\x75\x53\xbf\x18\x77\x68\x0d\xbb\x89\x8c\x97\x11\x90\x97\x5d\xff\x8e\xd9\xa6\x13\xbe\x34\xfd\xd7\x49\xe5\x31\x13\x00\x6b\xb7\x23\xc8\x2f\x55\x13\x01\xa7\xf5\xfd\x5f\x0c\x52\xad\xff\xbc\xfe\x70\x71\x09\x66\xb5\x24\x8b\x56\xdc\xc5\x76\x0f\xfb\xcb\x7f\xfc\xee\x8f\x0b\x73\x5f\xe2\x1f\xfe\x30\xbb\xae\x28\x45\x64\xc8\x66\xbf\xff\xeb\x62\x94\xa5\xf6\x98\x36\x14\x9b\xfe\x7a\xea\x92\x68\xa3\xb6\x51\xf6\xc4\x05\x15\x82\x1e\x6c\xb7\xed\x82\x57\xe3\xce\x07\xae\xa6\x0d\x28\x73\xc3\x0b\x9c\xc2\xdf\xe9\x6f\x19\x8e\x72\xe9\x7d\xe0\x8b\x32\xc7\x1a\xfd\x1e\x9e\xa7\xfb\x07\x77\x18\x7f\xfe\x48\xb9\xaa\x76\x0f\xaf\x3d\x37\xda\x43\x3b\x5d\xa9\x46\x8d\x2f\x36\xbc\x7a\xd0\x2f\x6b\x9b\xeb\x65\x39\x6c\xc1\x49\xf9\xe1\x4b\xb1\xcb\x0b\xca\xc3\xf7\x26\xe0\x7b\x32\xef\x2f\x42\xe7\x5f\x8f\x99\xaf\xc7\xcc\xa3\xa3\x63\xdf\x11\x33\xa9\xab\x1e\x3a\x5e\x8c\x1a\x35\x7e\x9d\x90\xda\x57\x63\xda\x1b\x27\xd3\x1b\x12\x94\xe5\x43\xcb\x1d\xcf\x51\x16\x19\x06\x62\x29\x95\x19\x44\x5d\xbb\x44\x81\x46\x71\xba\xd5\x79\x4d\xb4\x24\xb1\x15\x5b\xdb\x2e\x25\x8d\xa4\x32\x5f\x92\x9b\xd3\xcb\xad\x03\x81\xca\xd0\x5c\x4e\xc9\x35\xe6\x48\x8d\x54\x8f\x94\xf8\x73\x29\xba\x7b\x40\x71\x5c\xcb\xbb\x44\x4f\x54\x71\xab\x4c\xcf\x73\xf7\x6a\x2d\xda\x0e\x3c\x54\x6b\x43\x64\x07\x55\xf6\x4c\xcf\x3b\xa7\x0a\x3d\xcc\x16\xb2\x4c\x61\x06\x06\xe7\x46\xb6\x55\xc0\xc9\x85\xff\xc1\x93\x91\x71\xb3\xb7\x58\xd0\x69\x62\x4b\x5c\x53\x36\x14\x9f\x7a\xea\xfa\xf8\x87\x3e\x9f\xff\xf9\xce\xa4\x46\x3f\x29\xca\xb7\x4d\x5a\x07\x0b\x1d\x14\x96\x8e\xd4\xfc\xc7\x65\xfc\x49\xc9\x7f\x5b\xd5\x7f\xa1\x1e\xb4\xe6\x78\xf7\x30\x27\xa8\x29\xbf\x18\x27\x38\x68\xcd\x07\x18\xac\x33\x4b\xa3\x7c\x22\xaa\xee\x34\xde\x14\x24\x07\x2f\x4d\x1c\x2c\xa2\xa6\x3c\x9b\x83\x32\x3c\x05\x6a\xe6\x49\x45\x6f\xd1\x3c\x70\x03\xfc\x6c\xa8\xca\x35\x7d\x4e\x48\x1d\xaf\x1f\xf0\x23\xd4\x29\x52\xff\xae\x53\xfd\xfb\x97\x4f\xfc\xb6\x84\xe4\xe8\x6f\x42\x78\xf6\x3f\x6f\xde\x5f\x7e\x77\x46\x4e\x3f\x5c\x7c\x7b\xfe\xee\xfb\xab\x37\x37\xe7\x1f\x2e\xf6\x11\x3e\x88\xe3\x43\x30\x0e\xd8\xde\xac\xb8\x26\x49\x2e\xe9\x2d\xe1\x9a\x08\x69\x08\x50\x53\x41\x9e\xdf\x93\xb4\x12\xb4\x4d\xd1\xc9\xe8\xd1\xfd\xeb\xc1\xf4\xa4\x32\xcd\x5b\x25\xa8\x89\x91\x84\xe7\x75\xec\x2b\x30\x48\xcc\x0a\x09\xac\x81\xe7\x90\xe4\x38\x9e\x3f\x98\x2e\xcb\xc6\xf5\x09\x08\x46\x98\xa4\x55\x81\xc2\xd4\x53\x0b\xc2\x05\x01\x72\x07\xf7\xc4\xac\xc0\xd4\xd0\x80\x52\xd4\x9a\x27\x39\x0e\xe6\x1b\x49\x2a\x8d\x4a\xb7\x54\x7f\xbb\xad\x12\xa4\x26\x27\xf5\x31\xf0\x37\x62\x6a\xd1\xda\x95\x49\x01\xe5\xe2\xd5\x3e\xfd\xdf\xac\x50\x23\xd1\x8d\xad\xc7\x30\x37\xe0\x0a\xb8\x27\x49\x3d\x58\x72\x64\x44\x56\x86\xc8\x74\x88\xa1\x5e\xa6\xf3\x96\x4e\x93\xb5\x38\x95\xe0\x82\xa1\x30\xc8\x6a\x94\x09\xd6\x12\xd5\x4a\xa9\x9d\xac\x25\x1b\xcb\xb1\x51\x3b\x5d\x81\xc8\x5a\x05\x8e\xf0\x2c\xa6\xa6\x63\x98\x42\x95\x9b\xb9\xe1\x05\xca\xca\xcc\x0b\x2e\x2a\x83\x8d\xc8\x06\xb8\xd0\xed\x72\x2d\x11\x11\x55\x91\xa0\x1a\x23\xef\x27\xb4\x5a\x24\xa9\x54\x7d\x16\xde\x48\x30\x28\xfc\xbc\x26\x3c\x25\x42\x0a\xac\x2d\x51\xa7\x36\x3c\xe5\xc8\xb6\x1a\x3d\x00\x65\x49\x66\x81\x35\xab\x97\x0a\xac\x7e\xb5\xa7\x45\x7b\xb7\x80\xfe\x05\x22\x3d\x97\x59\x8e\x6b\xcc\x17\xdb\xe4\x73\x49\xb8\x48\xe5\x74\xbc\x4b\xb3\x46\x83\x3f\x41\x39\xcf\x65\x96\xa1\x9a\xb7\x48\x87\xfb\xc5\xdf\x5f\x6d\x23\x74\xd6\xf0\x98\x2d\xc9\xac\x9e\x3d\x7b\x3d\x1c\x62\xf5\x90\x2c\x6b\xe7\x9f\x75\xaf\xec\x8d\xc6\x1b\xef\xe4\x22\x9b\x2d\x47\x2c\x49\xcd\x8b\x1b\x0e\x35\x5b\xdb\xb2\x5e\x8f\xc7\xcc\x0a\x15\x42\x6a\x50\xb5\xc3\x83\xd1\x7f\x8c\xd8\xcb\xca\x94\x95\xa9\x2f\x8f\x7a\xb6\x24\x7f\x99\x69\xc3\x64\x65\x66\x7f\x1d\x11\xa1\x52\x52\x7d\xd8\xa5\x44\xa5\xa6\x94\x82\x4a\xd6\xa2\x9d\xfd\xa8\xa5\x98\xed\x8e\xd6\xb7\xfd\x5a\x59\xbb\x02\xd5\x0e\xf4\x5f\x78\x5f\xcf\x9d\x4d\xe4\x69\x14\xd8\x8d\xb5\xca\x9c\x10\xd4\x4e\xd1\x8f\x37\x26\x99\x12\x50\xa8\x8d\xdb\x91\xb4\x8d\x29\x49\x81\x5a\x43\xd6\xb3\x29\x74\x36\x25\xd0\x06\xe8\xad\x51\x40\x7b\x9a\x6d\xc7\x0e\x60\x2e\xf0\x4c\xf4\xaa\xd8\x2b\xce\x59\xab\x8d\x7d\xe3\xb5\x26\x8e\x0c\xb3\x6e\x57\x38\x42\xd2\x4a\x38\x24\x18\xba\xc0\xab\xf1\x5f\x8f\x8e\xc8\x5a\xc5\xdb\x7a\xc6\xd7\xa3\xf7\xeb\xd1\xfb\x4f\x74\xf4\x76\xf5\x91\x45\x02\xf4\x16\x05\x9b\x33\xd4\x86\x8b\x16\x7b\xca\x31\x67\x9b\x43\xb2\x3d\x85\xf5\xbd\x36\x58\xf4\xd3\xc8\x80\x7c\xa0\x1a\x72\x6e\x9a\xb7\xaa\xa5\x32\x9a\x20\xaf\xf7\x6f\x52\x2a\x59\xa0\x59\x61\xa5\xc9\xef\x06\xc7\xf9\xef\x89\x54\xa4\xd9\x79\x98\xe2\x6b\x54\x43\x2e\x17\xd2\xe0\x92\x7c\xaf\xb9\xc8\xc8\xf5\x96\x84\xdc\xf1\x3c\x27\x5c\xd0\x4a\x0d\x8a\xaf\xb5\xc8\x2a\x43\xbd\x65\x70\x44\xb4\xe5\x00\xce\x21\x8d\x0c\x40\xcd\x4b\x25\x7f\x44\x6a\xe6\x9c\xed\x55\xca\x10\x5c\x47\x4a\xce\xdf\x2e\x9a\xb8\x18\x70\x6e\xa7\x72\xdd\x39\x05\xe4\x0b\xf2\xdf\x2b\x14\x44\x55\x42\xd4\x32\x4a\x41\xde\x9d\x9e\xbd\x26\x50\x96\x39\xa7\xad\x0d\xfa\xac\x87\x2a\xac\x1d\x81\x43\xae\x5b\xf9\x93\xa1\x0b\x57\x1a\x59\xe3\x30\xbd\x5d\x3a\x12\xa2\x9b\x58\x90\xad\x23\xb4\xd7\xd9\x7f\xd5\x1b\x8c\x3c\x6d\x1d\xaf\x07\x36\xe0\x58\x07\x71\xa9\xe4\x9a\xb3\x61\x76\x74\x5c\x37\x4b\x32\xfb\xb7\x7b\x59\x8d\xec\xb9\x5d\x8b\xfd\xfb\xec\x90\xaa\x9b\xaf\x15\xe6\x43\xa6\xb4\xa9\xd5\xcf\x7b\x71\xb8\x60\xb5\x42\x50\x93\xbb\x15\x36\xee\xc4\xdb\x78\xae\x27\x0e\xaa\xe1\x4d\x10\x68\x1c\x28\xc2\xc8\x91\x75\xaa\xc6\x99\x66\x59\x2e\x13\xc8\x67\x9b\x6b\x72\x53\x2e\x6e\x14\xd8\x2e\xbc\x83\xb1\x21\x58\x90\x6b\x34\xa6\x66\xd0\x6a\x2d\x87\xac\xe6\xdf\xde\xe4\x09\x95\x55\xce\x08\x85\x3a\x01\xc5\x8f\x46\xc1\x70\xe1\x01\xc3\xd6\x4f\x17\x84\x9c\xa7\x47\xa3\xaf\xdb\x49\x07\x4c\x5e\xb7\xeb\x8e\xec\xc4\x33\x21\xd5\x3e\x13\x7d\x4a\xa7\x4b\x32\x6b\xf2\xb3\xd9\xd3\x0e\x4d\x99\xd4\x3b\x36\x24\x3c\xe7\xe6\xfe\xe7\x1e\x9d\x50\x96\x7a\x5c\x7a\x79\xbb\x79\x8b\x7c\x2f\x94\x3d\xc5\xd0\xc5\xf6\x0b\x9f\x05\x97\x27\x54\x16\xa5\x14\x28\x4c\x83\x78\x5c\x54\xde\x47\x7f\xe4\xbb\x9a\x5f\xa6\x5a\xad\xb0\x09\x72\xbd\xfd\x6e\x64\xb7\x48\x5a\x80\xa1\xab\xef\x26\xb2\x3e\xb8\xc6\x6e\xb0\x28\x73\x30\xb8\x1c\xfa\xc6\x48\x8d\x0d\x33\x21\xa4\x69\x5f\x64\x5f\x8e\xb2\xae\x6e\xbb\x98\x43\x65\xa4\xa6\x90\xa3\x9a\xa8\x4c\x43\xda\x16\x35\xd7\x9c\x9a\xb1\x3b\xed\xb7\xd2\x23\xb0\x3f\xcd\xac\x4f\x30\xed\xd8\x28\x8d\xdc\xed\xa5\x13\xd5\x08\xf9\x9c\x80\xca\x26\xb2\xcc\x49\x9d\x3b\x1a\xd9\x5e\x1e\xa6\x43\x6d\xaf\x59\x29\xd4\x2b\x99\xb3\xc9\xf0\xf9\xc5\xb7\x1f\xa6\x33\x9a\xcc\xa3\x0d\xaf\x3b\xc5\x6b\xdd\xf3\xd1\xfb\x58\x2d\x59\x46\x55\x2d\x55\x27\x8f\xc2\x1c\x41\xa3\x3e\xc9\xb8\x59\x55\xc9\x82\xca\xa2\x1b\xa2\xec\xa4\x17\xf6\x84\x16\xec\x64\xcb\xbd\x65\xfe\x47\xbd\x02\xc7\x0f\x96\x51\x1a\x01\x62\x18\x39\x49\xe2\x85\x2c\xf4\xdc\x80\x7a\x16\xfa\x89\x6d\x81\x1d\xc7\x41\x90\x38\x36\xb3\x2c\xb4\x99\xeb\x33\x27\x75\x29\x8b\x42\xdb\x45\xc7\x0a\x28\x3a\x5e\xe4\xd9\x53\x29\xea\x93\x4a\x3f\x2b\xf2\x8e\xa3\xe0\xa6\xc7\x9c\x60\x9a\xba\x16\x73\xdc\xd8\x09\x5d\xea\xc5\x51\x90\x38\x18\xa5\x31\x73\x02\x70\x5c\x4a\x23\x8f\x52\x2f\x4d\x19\x58\xa1\x87\x1e\x46\x6e\x6a\x53\xea\x5b\xb1\xe5\x53\x87\xb9\x0c\xa6\x98\x33\x6e\x9e\x15\x71\xc3\x6f\x88\xd7\xc2\x20\x4d\xbc\x34\x4a\x19\x0b\x42\x27\xa2\x41\x9a\xfa\x09\x0b\xdc\x04\x5d\x0b\x2d\x2f\x8d\xa2\xd4\xb6\xdc\x24\x06\x1b\xe3\xd0\x41\xc7\xf2\x6c\xc7\x07\x4c\x02\xb0\x3c\xe6\xba\x53\xbc\x42\x96\xcf\x8a\x57\xc8\x72\x03\xd5\x0d\x1d\x66\xd1\x24\x8e\x6d\x9a\xc4\x81\x15\xf9\x5e\x14\x59\xb1\x1f\xd2\xd8\xa5\x5e\x60\x31\xd7\xc7\xd0\x77\xdd\xd8\xb2\x03\x0a\x81\x17\x3a\x89\x8f\xe0\xc4\xbe\x9f\x5a\x11\xa3\xc9\x14\x6a\x02\x7a\x35\x17\xf2\x99\x01\xd7\x5c\x7b\xc4\xcc\xb6\xec\x24\x88\xed\xd0\xc7\xc0\xa2\xa9\xe7\xc6\x7e\x90\x40\xe4\x5b\x48\x03\x87\x3a\x2c\x89\x10\x81\xd9\x21\x73\x01\x62\x9a\x26\x9e\x05\x2c\x4c\xc3\xd4\x4d\x03\x70\x53\x7f\x47\xb9\x99\xae\x0c\xcf\x9f\xd7\x1f\x1a\x96\x3d\x60\xea\x59\x1e\x32\x86\x21\x52\x9f\xd2\xd4\xf7\xad\x30\xf2\x52\x87\x85\x36\x82\x97\xd8\x91\x87\xd4\x76\xc3\xc8\x75\xe2\x84\x01\x73\xed\x00\x9d\x20\xa1\x18\xd9\xcc\x4f\xbd\x20\xa0\x53\xc0\x28\x8c\xba\x2f\x25\x17\xcf\xeb\xc4\x5b\xb6\x3d\x70\xa0\x5e\x10\x05\x41\xc2\x6c\x0f\xa8\x1b\xc5\x81\x45\x03\x00\xdb\xb2\x10\x43\x2f\x88\x30\xb4\x42\x88\x7d\xdf\x75\x3c\x04\x8f\x46\x11\xc5\x88\xb9\x71\x12\x51\x96\x22\xda\xf6\x14\x58\x8b\x96\xf1\x0c\xb5\x99\xe3\xc7\xfa\xba\xf0\xcc\x7b\xde\x60\x81\x9e\x7f\x2f\x8b\xe5\xa1\x8d\x0c\x42\x27\x71\x59\xe2\xa1\x97\xd8\x0e\xa5\x1e\x05\x70\xa8\x65\xa7\xae\xeb\x46\x5e\x02\x91\x15\x5a\x0e\x78\x8c\x45\xd4\xb3\xc1\x86\xd8\xb3\xd0\x62\x41\xec\xc4\xc1\x54\x96\xf2\x79\x91\x97\x55\x9e\x2b\xfc\xdf\xaa\x56\xcd\x70\x27\xa1\x21\x3a\x10\xd9\x61\x94\x50\x17\xa3\xd0\xb3\x7c\xd7\x72\x1d\xdb\x71\x62\x2b\x72\x03\x86\x71\x1a\x46\xb6\x67\xc5\x29\x0b\x2c\x8a\xe8\xf8\x14\xa8\xed\x46\x2e\x00\x84\x41\x6a\xef\x86\x67\xc5\x73\x36\xcf\xa8\x9e\xa7\x68\xe8\xea\x19\xf5\xbf\x46\xc1\xa4\x1a\xd2\x64\x52\x66\x39\xd2\x5c\x56\xac\x4e\x4c\x52\xa9\x8a\x93\xa6\xd5\xa2\x40\xa5\x4f\x06\x40\xda\xc0\xd9\xb6\x7b\x0d\x84\xa1\x67\xa7\x9e\x1d\x84\x9e\x03\xd4\xf6\x42\xcf\xc3\x88\x46\xcc\xa2\x36\x04\x4e\x44\x31\x76\x59\x64\xd9\x0c\x58\xca\x12\x3b\x4d\x63\x06\x11\x78\x49\xcc\x52\x8f\x05\x7e\xe8\x8e\xa3\x07\xc5\x7a\x7a\xa6\x77\xaf\xaa\xfc\xf9\xfa\xe6\xec\xfd\x0f\x17\x6f\xde\x9f\x5d\x5f\xbe\x39\x3d\x1b\x11\x11\xb2\x86\xbc\xc2\x6f\x95\x2c\x96\x93\x01\xd2\x5e\xa6\x06\xdf\xa3\xec\x8c\xb5\x2f\xb7\xf4\xb9\xd8\x42\x8c\x3e\x31\x9f\xe2\x68\xeb\x39\x3f\x7c\xf7\xe1\xdd\xbb\xf3\x8b\x77\x0d\x9e\x7d\x50\x0e\x14\xb3\xf6\xf2\xfa\xf0\xcd\xf5\xd9\xd5\x9f\xde\x7c\x73\xfe\xdd\xf9\xcd\x9f\x3f\xcd\x71\x5f\xa6\x3f\xe6\xfb\xfe\xec\xe6\xea\xfc\xf4\xfa\x87\xb7\x1f\xde\xbf\x39\xbf\xd8\xcf\x6c\xfb\x84\x72\xe3\x21\x23\xc2\xc6\xeb\x96\x4f\x4f\x11\x36\xc9\x60\xef\x26\x98\xd0\x20\x0d\x83\xc8\x72\x23\x00\x17\x5d\x3b\x75\x59\x08\x94\x81\x97\x50\x27\x48\x52\xdb\x8d\xac\xc4\x4f\x1d\xb0\x5d\x27\xb5\x02\x3b\xb2\x23\x9b\x02\xa5\xae\x85\x4e\xec\xa7\xe3\x14\xe1\xa1\x17\x80\x4e\xe4\xe6\x3b\xe3\xf7\xcd\x97\xc9\x53\xef\x2a\xea\xde\xd6\x03\x4e\xd0\xd0\x93\x23\x66\x3b\x5a\xa6\x24\xcd\x85\x61\xf8\xc1\xd1\xc5\x23\x30\x4e\x3e\x45\x27\xfd\x03\xdc\xf6\xf6\x37\xf5\xdc\x4f\xc0\x38\x42\xf0\x2b\xdd\xf8\xba\xe7\x1b\xfb\x64\x7f\x9e\x9b\xdf\xd3\xdf\xa0\x79\xf6\x6b\xdf\x18\xca\x6f\xe8\xce\x37\x06\xfe\xf3\xac\xfa\x04\xcb\x3e\xfc\xe2\xf7\x62\xcf\x88\x9f\xb9\x67\x76\xfa\xdc\x9c\xab\x8e\xed\x83\xe3\x83\x1f\x51\x2b\xf4\x92\xfa\x66\x02\xbe\xc5\x92\xd8\xc5\x00\xbc\x90\x39\x98\xf8\x41\xe8\xa4\x31\xa4\xa1\x1f\x5a\xe0\xa1\x07\x49\xe8\xa3\x6f\xb9\x4e\x6c\xbb\xf6\x9e\x1d\x61\x9f\x89\xbf\x6e\x8e\x3b\x9b\xe3\xab\x61\xd4\x66\xf2\xa6\x6f\x75\xff\xe7\xc9\xff\x07\x00\x00\xff\xff\x5e\xa2\x88\x15\xbb\x46\x00\x00")

func stacksTektonStackYamlBytes() ([]byte, error) {
	return bindataRead(
		_stacksTektonStackYaml,
		"stacks/tekton-stack.yaml",
	)
}

func stacksTektonStackYaml() (*asset, error) {
	bytes, err := stacksTektonStackYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stacks/tekton-stack.yaml", size: 18107, mode: os.FileMode(420), modTime: time.Unix(1557785965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stacks/build-stack.yaml":          stacksBuildStackYaml,
	"stacks/cert-manager-stack.yaml":   stacksCertManagerStackYaml,
	"stacks/gloo-stack.sh":             stacksGlooStackSh,
	"stacks/gloo-stack.yaml":           stacksGlooStackYaml,
	"stacks/gloo-values.yaml":          stacksGlooValuesYaml,
	"stacks/linkerd-stack.yaml":        stacksLinkerdStackYaml,
	"stacks/rio-autoscaler-stack.yaml": stacksRioAutoscalerStackYaml,
	"stacks/rio-controller-stack.yaml": stacksRioControllerStackYaml,
	"stacks/tekton-stack.sh":           stacksTektonStackSh,
	"stacks/tekton-stack.yaml":         stacksTektonStackYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"stacks": &bintree{nil, map[string]*bintree{
		"build-stack.yaml":          &bintree{stacksBuildStackYaml, map[string]*bintree{}},
		"cert-manager-stack.yaml":   &bintree{stacksCertManagerStackYaml, map[string]*bintree{}},
		"gloo-stack.sh":             &bintree{stacksGlooStackSh, map[string]*bintree{}},
		"gloo-stack.yaml":           &bintree{stacksGlooStackYaml, map[string]*bintree{}},
		"gloo-values.yaml":          &bintree{stacksGlooValuesYaml, map[string]*bintree{}},
		"linkerd-stack.yaml":        &bintree{stacksLinkerdStackYaml, map[string]*bintree{}},
		"rio-autoscaler-stack.yaml": &bintree{stacksRioAutoscalerStackYaml, map[string]*bintree{}},
		"rio-controller-stack.yaml": &bintree{stacksRioControllerStackYaml, map[string]*bintree{}},
		"tekton-stack.sh":           &bintree{stacksTektonStackSh, map[string]*bintree{}},
		"tekton-stack.yaml":         &bintree{stacksTektonStackYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
